// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: debug_dump.proto

#include "debug_dump.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace webrtc {
namespace audio_network_adaptor {
namespace debug_dump {

inline constexpr NetworkMetrics::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        uplink_bandwidth_bps_{0},
        uplink_packet_loss_fraction_{0},
        target_audio_bitrate_bps_{0},
        rtt_ms_{0},
        uplink_recoverable_packet_loss_fraction_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NetworkMetrics::NetworkMetrics(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NetworkMetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetworkMetricsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetworkMetricsDefaultTypeInternal() {}
  union {
    NetworkMetrics _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetworkMetricsDefaultTypeInternal _NetworkMetrics_default_instance_;

inline constexpr EncoderRuntimeConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        bitrate_bps_{0},
        frame_length_ms_{0},
        uplink_packet_loss_fraction_{0},
        enable_fec_{false},
        enable_dtx_{false},
        num_channels_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR EncoderRuntimeConfig::EncoderRuntimeConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EncoderRuntimeConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EncoderRuntimeConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EncoderRuntimeConfigDefaultTypeInternal() {}
  union {
    EncoderRuntimeConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EncoderRuntimeConfigDefaultTypeInternal _EncoderRuntimeConfig_default_instance_;

inline constexpr Event::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        network_metrics_{nullptr},
        encoder_runtime_config_{nullptr},
        controller_manager_config_{nullptr},
        type_{static_cast< ::webrtc::audio_network_adaptor::debug_dump::Event_Type >(0)},
        timestamp_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR Event::Event(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventDefaultTypeInternal() {}
  union {
    Event _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventDefaultTypeInternal _Event_default_instance_;
}  // namespace debug_dump
}  // namespace audio_network_adaptor
}  // namespace webrtc
namespace webrtc {
namespace audio_network_adaptor {
namespace debug_dump {
PROTOBUF_CONSTINIT const uint32_t Event_Type_internal_data_[] = {
    196608u, 0u, };
bool Event_Type_IsValid(int value) {
  return 0 <= value && value <= 2;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    Event_Type_strings[3] = {};

static const char Event_Type_names[] = {
    "CONTROLLER_MANAGER_CONFIG"
    "ENCODER_RUNTIME_CONFIG"
    "NETWORK_METRICS"
};

static const ::google::protobuf::internal::EnumEntry Event_Type_entries[] =
    {
        {{&Event_Type_names[0], 25}, 2},
        {{&Event_Type_names[25], 22}, 1},
        {{&Event_Type_names[47], 15}, 0},
};

static const int Event_Type_entries_by_number[] = {
    2,  // 0 -> NETWORK_METRICS
    1,  // 1 -> ENCODER_RUNTIME_CONFIG
    0,  // 2 -> CONTROLLER_MANAGER_CONFIG
};

const std::string& Event_Type_Name(Event_Type value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          Event_Type_entries, Event_Type_entries_by_number,
          3, Event_Type_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      Event_Type_entries, Event_Type_entries_by_number, 3,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : Event_Type_strings[idx].get();
}

bool Event_Type_Parse(absl::string_view name, Event_Type* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      Event_Type_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<Event_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Event_Type Event::NETWORK_METRICS;
constexpr Event_Type Event::ENCODER_RUNTIME_CONFIG;
constexpr Event_Type Event::CONTROLLER_MANAGER_CONFIG;
constexpr Event_Type Event::Type_MIN;
constexpr Event_Type Event::Type_MAX;
constexpr int Event::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class NetworkMetrics::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkMetrics>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(NetworkMetrics, _impl_._has_bits_);
  static void set_has_uplink_bandwidth_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uplink_packet_loss_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_audio_bitrate_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rtt_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_uplink_recoverable_packet_loss_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

NetworkMetrics::NetworkMetrics(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
}
NetworkMetrics::NetworkMetrics(
    ::google::protobuf::Arena* arena, const NetworkMetrics& from)
    : NetworkMetrics(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE NetworkMetrics::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void NetworkMetrics::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, uplink_bandwidth_bps_),
           0,
           offsetof(Impl_, uplink_recoverable_packet_loss_fraction_) -
               offsetof(Impl_, uplink_bandwidth_bps_) +
               sizeof(Impl_::uplink_recoverable_packet_loss_fraction_));
}
NetworkMetrics::~NetworkMetrics() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void NetworkMetrics::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void NetworkMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.uplink_bandwidth_bps_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.uplink_recoverable_packet_loss_fraction_) -
        reinterpret_cast<char*>(&_impl_.uplink_bandwidth_bps_)) + sizeof(_impl_.uplink_recoverable_packet_loss_fraction_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* NetworkMetrics::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 0, 2> NetworkMetrics::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(NetworkMetrics, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_NetworkMetrics_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional int32 uplink_bandwidth_bps = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(NetworkMetrics, _impl_.uplink_bandwidth_bps_)}},
    // optional float uplink_packet_loss_fraction = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(NetworkMetrics, _impl_.uplink_packet_loss_fraction_)}},
    // optional int32 target_audio_bitrate_bps = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(NetworkMetrics, _impl_.target_audio_bitrate_bps_)}},
    // optional int32 rtt_ms = 4;
    {::_pbi::TcParser::FastV32S1,
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(NetworkMetrics, _impl_.rtt_ms_)}},
    // optional int32 uplink_recoverable_packet_loss_fraction = 5;
    {::_pbi::TcParser::FastV32S1,
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(NetworkMetrics, _impl_.uplink_recoverable_packet_loss_fraction_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 uplink_bandwidth_bps = 1;
    {PROTOBUF_FIELD_OFFSET(NetworkMetrics, _impl_.uplink_bandwidth_bps_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional float uplink_packet_loss_fraction = 2;
    {PROTOBUF_FIELD_OFFSET(NetworkMetrics, _impl_.uplink_packet_loss_fraction_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional int32 target_audio_bitrate_bps = 3;
    {PROTOBUF_FIELD_OFFSET(NetworkMetrics, _impl_.target_audio_bitrate_bps_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 rtt_ms = 4;
    {PROTOBUF_FIELD_OFFSET(NetworkMetrics, _impl_.rtt_ms_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 uplink_recoverable_packet_loss_fraction = 5;
    {PROTOBUF_FIELD_OFFSET(NetworkMetrics, _impl_.uplink_recoverable_packet_loss_fraction_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* NetworkMetrics::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 uplink_bandwidth_bps = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_uplink_bandwidth_bps(), target);
  }

  // optional float uplink_packet_loss_fraction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_uplink_packet_loss_fraction(), target);
  }

  // optional int32 target_audio_bitrate_bps = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_target_audio_bitrate_bps(), target);
  }

  // optional int32 rtt_ms = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_rtt_ms(), target);
  }

  // optional int32 uplink_recoverable_packet_loss_fraction = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_uplink_recoverable_packet_loss_fraction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
  return target;
}

::size_t NetworkMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 uplink_bandwidth_bps = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_uplink_bandwidth_bps());
    }

    // optional float uplink_packet_loss_fraction = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5;
    }

    // optional int32 target_audio_bitrate_bps = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_target_audio_bitrate_bps());
    }

    // optional int32 rtt_ms = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_rtt_ms());
    }

    // optional int32 uplink_recoverable_packet_loss_fraction = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_uplink_recoverable_packet_loss_fraction());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void NetworkMetrics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const NetworkMetrics*>(
      &from));
}

void NetworkMetrics::MergeFrom(const NetworkMetrics& from) {
  NetworkMetrics* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.uplink_bandwidth_bps_ = from._impl_.uplink_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.uplink_packet_loss_fraction_ = from._impl_.uplink_packet_loss_fraction_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.target_audio_bitrate_bps_ = from._impl_.target_audio_bitrate_bps_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.rtt_ms_ = from._impl_.rtt_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.uplink_recoverable_packet_loss_fraction_ = from._impl_.uplink_recoverable_packet_loss_fraction_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void NetworkMetrics::CopyFrom(const NetworkMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool NetworkMetrics::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* NetworkMetrics::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void NetworkMetrics::InternalSwap(NetworkMetrics* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetworkMetrics, _impl_.uplink_recoverable_packet_loss_fraction_)
      + sizeof(NetworkMetrics::_impl_.uplink_recoverable_packet_loss_fraction_)
      - PROTOBUF_FIELD_OFFSET(NetworkMetrics, _impl_.uplink_bandwidth_bps_)>(
          reinterpret_cast<char*>(&_impl_.uplink_bandwidth_bps_),
          reinterpret_cast<char*>(&other->_impl_.uplink_bandwidth_bps_));
}

std::string NetworkMetrics::GetTypeName() const {
  return "webrtc.audio_network_adaptor.debug_dump.NetworkMetrics";
}

// ===================================================================

class EncoderRuntimeConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<EncoderRuntimeConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EncoderRuntimeConfig, _impl_._has_bits_);
  static void set_has_bitrate_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_frame_length_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uplink_packet_loss_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enable_fec(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_enable_dtx(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_num_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

EncoderRuntimeConfig::EncoderRuntimeConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
}
EncoderRuntimeConfig::EncoderRuntimeConfig(
    ::google::protobuf::Arena* arena, const EncoderRuntimeConfig& from)
    : EncoderRuntimeConfig(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE EncoderRuntimeConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void EncoderRuntimeConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, bitrate_bps_),
           0,
           offsetof(Impl_, num_channels_) -
               offsetof(Impl_, bitrate_bps_) +
               sizeof(Impl_::num_channels_));
}
EncoderRuntimeConfig::~EncoderRuntimeConfig() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void EncoderRuntimeConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EncoderRuntimeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.bitrate_bps_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.num_channels_) -
        reinterpret_cast<char*>(&_impl_.bitrate_bps_)) + sizeof(_impl_.num_channels_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EncoderRuntimeConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 0, 2> EncoderRuntimeConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EncoderRuntimeConfig, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_EncoderRuntimeConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional int32 bitrate_bps = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(EncoderRuntimeConfig, _impl_.bitrate_bps_)}},
    // optional int32 frame_length_ms = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(EncoderRuntimeConfig, _impl_.frame_length_ms_)}},
    // optional float uplink_packet_loss_fraction = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(EncoderRuntimeConfig, _impl_.uplink_packet_loss_fraction_)}},
    // optional bool enable_fec = 4;
    {::_pbi::TcParser::FastV8S1,
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(EncoderRuntimeConfig, _impl_.enable_fec_)}},
    // optional bool enable_dtx = 5;
    {::_pbi::TcParser::FastV8S1,
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(EncoderRuntimeConfig, _impl_.enable_dtx_)}},
    // optional uint32 num_channels = 6;
    {::_pbi::TcParser::FastV32S1,
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(EncoderRuntimeConfig, _impl_.num_channels_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 bitrate_bps = 1;
    {PROTOBUF_FIELD_OFFSET(EncoderRuntimeConfig, _impl_.bitrate_bps_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 frame_length_ms = 2;
    {PROTOBUF_FIELD_OFFSET(EncoderRuntimeConfig, _impl_.frame_length_ms_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional float uplink_packet_loss_fraction = 3;
    {PROTOBUF_FIELD_OFFSET(EncoderRuntimeConfig, _impl_.uplink_packet_loss_fraction_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional bool enable_fec = 4;
    {PROTOBUF_FIELD_OFFSET(EncoderRuntimeConfig, _impl_.enable_fec_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool enable_dtx = 5;
    {PROTOBUF_FIELD_OFFSET(EncoderRuntimeConfig, _impl_.enable_dtx_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional uint32 num_channels = 6;
    {PROTOBUF_FIELD_OFFSET(EncoderRuntimeConfig, _impl_.num_channels_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* EncoderRuntimeConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 bitrate_bps = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_bitrate_bps(), target);
  }

  // optional int32 frame_length_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_frame_length_ms(), target);
  }

  // optional float uplink_packet_loss_fraction = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_uplink_packet_loss_fraction(), target);
  }

  // optional bool enable_fec = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_enable_fec(), target);
  }

  // optional bool enable_dtx = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_enable_dtx(), target);
  }

  // optional uint32 num_channels = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_num_channels(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
  return target;
}

::size_t EncoderRuntimeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 bitrate_bps = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_bitrate_bps());
    }

    // optional int32 frame_length_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_frame_length_ms());
    }

    // optional float uplink_packet_loss_fraction = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 5;
    }

    // optional bool enable_fec = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

    // optional bool enable_dtx = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

    // optional uint32 num_channels = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_num_channels());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void EncoderRuntimeConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EncoderRuntimeConfig*>(
      &from));
}

void EncoderRuntimeConfig::MergeFrom(const EncoderRuntimeConfig& from) {
  EncoderRuntimeConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.bitrate_bps_ = from._impl_.bitrate_bps_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.frame_length_ms_ = from._impl_.frame_length_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.uplink_packet_loss_fraction_ = from._impl_.uplink_packet_loss_fraction_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.enable_fec_ = from._impl_.enable_fec_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.enable_dtx_ = from._impl_.enable_dtx_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.num_channels_ = from._impl_.num_channels_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EncoderRuntimeConfig::CopyFrom(const EncoderRuntimeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EncoderRuntimeConfig::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* EncoderRuntimeConfig::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EncoderRuntimeConfig::InternalSwap(EncoderRuntimeConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EncoderRuntimeConfig, _impl_.num_channels_)
      + sizeof(EncoderRuntimeConfig::_impl_.num_channels_)
      - PROTOBUF_FIELD_OFFSET(EncoderRuntimeConfig, _impl_.bitrate_bps_)>(
          reinterpret_cast<char*>(&_impl_.bitrate_bps_),
          reinterpret_cast<char*>(&other->_impl_.bitrate_bps_));
}

std::string EncoderRuntimeConfig::GetTypeName() const {
  return "webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig";
}

// ===================================================================

class Event::_Internal {
 public:
  using HasBits = decltype(std::declval<Event>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Event, _impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics& network_metrics(const Event* msg);
  static void set_has_network_metrics(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig& encoder_runtime_config(const Event* msg);
  static void set_has_encoder_runtime_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::webrtc::audio_network_adaptor::config::ControllerManager& controller_manager_config(const Event* msg);
  static void set_has_controller_manager_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000018) ^ 0x00000018) != 0;
  }
};

const ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics& Event::_Internal::network_metrics(const Event* msg) {
  return *msg->_impl_.network_metrics_;
}
const ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig& Event::_Internal::encoder_runtime_config(const Event* msg) {
  return *msg->_impl_.encoder_runtime_config_;
}
const ::webrtc::audio_network_adaptor::config::ControllerManager& Event::_Internal::controller_manager_config(const Event* msg) {
  return *msg->_impl_.controller_manager_config_;
}
void Event::clear_controller_manager_config() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.controller_manager_config_ != nullptr) _impl_.controller_manager_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
Event::Event(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audio_network_adaptor.debug_dump.Event)
}
inline PROTOBUF_NDEBUG_INLINE Event::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Event::Event(
    ::google::protobuf::Arena* arena,
    const Event& from)
    : ::google::protobuf::MessageLite(arena) {
  Event* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.network_metrics_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics>(arena, *from._impl_.network_metrics_)
                : nullptr;
  _impl_.encoder_runtime_config_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig>(arena, *from._impl_.encoder_runtime_config_)
                : nullptr;
  _impl_.controller_manager_config_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::webrtc::audio_network_adaptor::config::ControllerManager>(arena, *from._impl_.controller_manager_config_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, type_),
           offsetof(Impl_, timestamp_) -
               offsetof(Impl_, type_) +
               sizeof(Impl_::timestamp_));

  // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.debug_dump.Event)
}
inline PROTOBUF_NDEBUG_INLINE Event::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Event::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, network_metrics_),
           0,
           offsetof(Impl_, timestamp_) -
               offsetof(Impl_, network_metrics_) +
               sizeof(Impl_::timestamp_));
}
Event::~Event() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.debug_dump.Event)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Event::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.network_metrics_;
  delete _impl_.encoder_runtime_config_;
  delete _impl_.controller_manager_config_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.debug_dump.Event)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.network_metrics_ != nullptr);
      _impl_.network_metrics_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.encoder_runtime_config_ != nullptr);
      _impl_.encoder_runtime_config_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.controller_manager_config_ != nullptr);
      _impl_.controller_manager_config_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.type_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.timestamp_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Event::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 4, 0, 2> Event::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Event, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Event_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required .webrtc.audio_network_adaptor.debug_dump.Event.Type type = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 3, 2, PROTOBUF_FIELD_OFFSET(Event, _impl_.type_)}},
    // required uint32 timestamp = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 4, 0, PROTOBUF_FIELD_OFFSET(Event, _impl_.timestamp_)}},
    // optional .webrtc.audio_network_adaptor.debug_dump.NetworkMetrics network_metrics = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 1, PROTOBUF_FIELD_OFFSET(Event, _impl_.network_metrics_)}},
    // optional .webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig encoder_runtime_config = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 2, PROTOBUF_FIELD_OFFSET(Event, _impl_.encoder_runtime_config_)}},
    // optional .webrtc.audio_network_adaptor.config.ControllerManager controller_manager_config = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 2, 3, PROTOBUF_FIELD_OFFSET(Event, _impl_.controller_manager_config_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // required .webrtc.audio_network_adaptor.debug_dump.Event.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.type_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // required uint32 timestamp = 2;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.timestamp_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .webrtc.audio_network_adaptor.debug_dump.NetworkMetrics network_metrics = 3;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.network_metrics_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig encoder_runtime_config = 4;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.encoder_runtime_config_), _Internal::kHasBitsOffset + 1, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .webrtc.audio_network_adaptor.config.ControllerManager controller_manager_config = 5;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.controller_manager_config_), _Internal::kHasBitsOffset + 2, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {0, 3},
    {::_pbi::TcParser::GetTable<::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics>()},
    {::_pbi::TcParser::GetTable<::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig>()},
    {::_pbi::TcParser::GetTable<::webrtc::audio_network_adaptor::config::ControllerManager>()},
  }}, {{
  }},
};

::uint8_t* Event::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audio_network_adaptor.debug_dump.Event)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .webrtc.audio_network_adaptor.debug_dump.Event.Type type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // required uint32 timestamp = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_timestamp(), target);
  }

  // optional .webrtc.audio_network_adaptor.debug_dump.NetworkMetrics network_metrics = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::network_metrics(this),
        _Internal::network_metrics(this).GetCachedSize(), target, stream);
  }

  // optional .webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig encoder_runtime_config = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::encoder_runtime_config(this),
        _Internal::encoder_runtime_config(this).GetCachedSize(), target, stream);
  }

  // optional .webrtc.audio_network_adaptor.config.ControllerManager controller_manager_config = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::controller_manager_config(this),
        _Internal::controller_manager_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audio_network_adaptor.debug_dump.Event)
  return target;
}

::size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.debug_dump.Event)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .webrtc.audio_network_adaptor.debug_dump.NetworkMetrics network_metrics = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.network_metrics_);
    }

    // optional .webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig encoder_runtime_config = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.encoder_runtime_config_);
    }

    // optional .webrtc.audio_network_adaptor.config.ControllerManager controller_manager_config = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.controller_manager_config_);
    }

  }
  if (cached_has_bits & 0x00000018u) {
    // required .webrtc.audio_network_adaptor.debug_dump.Event.Type type = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // required uint32 timestamp = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timestamp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void Event::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Event*>(
      &from));
}

void Event::MergeFrom(const Event& from) {
  Event* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.debug_dump.Event)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_network_metrics()->::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics::MergeFrom(
          from._internal_network_metrics());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_encoder_runtime_config()->::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig::MergeFrom(
          from._internal_encoder_runtime_config());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_controller_manager_config()->::webrtc::audio_network_adaptor::config::ControllerManager::MergeFrom(
          from._internal_controller_manager_config());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.debug_dump.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Event::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) {
    return false;
  }
  return true;
}

::_pbi::CachedSize* Event::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Event::InternalSwap(Event* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event, _impl_.timestamp_)
      + sizeof(Event::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(Event, _impl_.network_metrics_)>(
          reinterpret_cast<char*>(&_impl_.network_metrics_),
          reinterpret_cast<char*>(&other->_impl_.network_metrics_));
}

std::string Event::GetTypeName() const {
  return "webrtc.audio_network_adaptor.debug_dump.Event";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace debug_dump
}  // namespace audio_network_adaptor
}  // namespace webrtc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
