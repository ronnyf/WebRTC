// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: debug_dump.proto

#include "debug_dump.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace webrtc {
namespace audio_network_adaptor {
namespace debug_dump {
template <typename>
PROTOBUF_CONSTEXPR NetworkMetrics::NetworkMetrics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.uplink_bandwidth_bps_)*/ 0

  , /*decltype(_impl_.uplink_packet_loss_fraction_)*/ 0

  , /*decltype(_impl_.target_audio_bitrate_bps_)*/ 0

  , /*decltype(_impl_.rtt_ms_)*/ 0

  , /*decltype(_impl_.uplink_recoverable_packet_loss_fraction_)*/ 0
} {}
struct NetworkMetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetworkMetricsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetworkMetricsDefaultTypeInternal() {}
  union {
    NetworkMetrics _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetworkMetricsDefaultTypeInternal _NetworkMetrics_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EncoderRuntimeConfig::EncoderRuntimeConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bitrate_bps_)*/ 0

  , /*decltype(_impl_.frame_length_ms_)*/ 0

  , /*decltype(_impl_.uplink_packet_loss_fraction_)*/ 0

  , /*decltype(_impl_.enable_fec_)*/ false

  , /*decltype(_impl_.enable_dtx_)*/ false

  , /*decltype(_impl_.num_channels_)*/ 0u
} {}
struct EncoderRuntimeConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EncoderRuntimeConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EncoderRuntimeConfigDefaultTypeInternal() {}
  union {
    EncoderRuntimeConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EncoderRuntimeConfigDefaultTypeInternal _EncoderRuntimeConfig_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Event::Event(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.network_metrics_)*/nullptr
  , /*decltype(_impl_.encoder_runtime_config_)*/nullptr
  , /*decltype(_impl_.controller_manager_config_)*/nullptr
  , /*decltype(_impl_.type_)*/ 0

  , /*decltype(_impl_.timestamp_)*/ 0u
} {}
struct EventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventDefaultTypeInternal() {}
  union {
    Event _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventDefaultTypeInternal _Event_default_instance_;
}  // namespace debug_dump
}  // namespace audio_network_adaptor
}  // namespace webrtc
namespace webrtc {
namespace audio_network_adaptor {
namespace debug_dump {
bool Event_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    Event_Type_strings[3] = {};

static const char Event_Type_names[] = {
    "CONTROLLER_MANAGER_CONFIG"
    "ENCODER_RUNTIME_CONFIG"
    "NETWORK_METRICS"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Event_Type_entries[] =
    {
        {{&Event_Type_names[0], 25}, 2},
        {{&Event_Type_names[25], 22}, 1},
        {{&Event_Type_names[47], 15}, 0},
};

static const int Event_Type_entries_by_number[] = {
    2,  // 0 -> NETWORK_METRICS
    1,  // 1 -> ENCODER_RUNTIME_CONFIG
    0,  // 2 -> CONTROLLER_MANAGER_CONFIG
};

const std::string& Event_Type_Name(Event_Type value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Event_Type_entries, Event_Type_entries_by_number,
          3, Event_Type_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Event_Type_entries, Event_Type_entries_by_number, 3,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : Event_Type_strings[idx].get();
}

bool Event_Type_Parse(absl::string_view name, Event_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Event_Type_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<Event_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Event_Type Event::NETWORK_METRICS;
constexpr Event_Type Event::ENCODER_RUNTIME_CONFIG;
constexpr Event_Type Event::CONTROLLER_MANAGER_CONFIG;
constexpr Event_Type Event::Type_MIN;
constexpr Event_Type Event::Type_MAX;
constexpr int Event::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class NetworkMetrics::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkMetrics>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(NetworkMetrics, _impl_._has_bits_);
  static void set_has_uplink_bandwidth_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uplink_packet_loss_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_audio_bitrate_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rtt_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_uplink_recoverable_packet_loss_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

NetworkMetrics::NetworkMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
}
NetworkMetrics::NetworkMetrics(const NetworkMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
}

inline void NetworkMetrics::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uplink_bandwidth_bps_) { 0 }

    , decltype(_impl_.uplink_packet_loss_fraction_) { 0 }

    , decltype(_impl_.target_audio_bitrate_bps_) { 0 }

    , decltype(_impl_.rtt_ms_) { 0 }

    , decltype(_impl_.uplink_recoverable_packet_loss_fraction_) { 0 }

  };
}

NetworkMetrics::~NetworkMetrics() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetworkMetrics::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void NetworkMetrics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetworkMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.uplink_bandwidth_bps_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.uplink_recoverable_packet_loss_fraction_) -
        reinterpret_cast<char*>(&_impl_.uplink_bandwidth_bps_)) + sizeof(_impl_.uplink_recoverable_packet_loss_fraction_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* NetworkMetrics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 uplink_bandwidth_bps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_uplink_bandwidth_bps(&has_bits);
          _impl_.uplink_bandwidth_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional float uplink_packet_loss_fraction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 21)) {
          _Internal::set_has_uplink_packet_loss_fraction(&has_bits);
          _impl_.uplink_packet_loss_fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 target_audio_bitrate_bps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_target_audio_bitrate_bps(&has_bits);
          _impl_.target_audio_bitrate_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 rtt_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_rtt_ms(&has_bits);
          _impl_.rtt_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 uplink_recoverable_packet_loss_fraction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_uplink_recoverable_packet_loss_fraction(&has_bits);
          _impl_.uplink_recoverable_packet_loss_fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* NetworkMetrics::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 uplink_bandwidth_bps = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_uplink_bandwidth_bps(), target);
  }

  // optional float uplink_packet_loss_fraction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_uplink_packet_loss_fraction(), target);
  }

  // optional int32 target_audio_bitrate_bps = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_target_audio_bitrate_bps(), target);
  }

  // optional int32 rtt_ms = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_rtt_ms(), target);
  }

  // optional int32 uplink_recoverable_packet_loss_fraction = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_uplink_recoverable_packet_loss_fraction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
  return target;
}

::size_t NetworkMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 uplink_bandwidth_bps = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_uplink_bandwidth_bps());
    }

    // optional float uplink_packet_loss_fraction = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5;
    }

    // optional int32 target_audio_bitrate_bps = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_target_audio_bitrate_bps());
    }

    // optional int32 rtt_ms = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_rtt_ms());
    }

    // optional int32 uplink_recoverable_packet_loss_fraction = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_uplink_recoverable_packet_loss_fraction());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkMetrics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const NetworkMetrics*>(
      &from));
}

void NetworkMetrics::MergeFrom(const NetworkMetrics& from) {
  NetworkMetrics* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.uplink_bandwidth_bps_ = from._impl_.uplink_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.uplink_packet_loss_fraction_ = from._impl_.uplink_packet_loss_fraction_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.target_audio_bitrate_bps_ = from._impl_.target_audio_bitrate_bps_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.rtt_ms_ = from._impl_.rtt_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.uplink_recoverable_packet_loss_fraction_ = from._impl_.uplink_recoverable_packet_loss_fraction_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void NetworkMetrics::CopyFrom(const NetworkMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkMetrics::IsInitialized() const {
  return true;
}

void NetworkMetrics::InternalSwap(NetworkMetrics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetworkMetrics, _impl_.uplink_recoverable_packet_loss_fraction_)
      + sizeof(NetworkMetrics::_impl_.uplink_recoverable_packet_loss_fraction_)
      - PROTOBUF_FIELD_OFFSET(NetworkMetrics, _impl_.uplink_bandwidth_bps_)>(
          reinterpret_cast<char*>(&_impl_.uplink_bandwidth_bps_),
          reinterpret_cast<char*>(&other->_impl_.uplink_bandwidth_bps_));
}

std::string NetworkMetrics::GetTypeName() const {
  return "webrtc.audio_network_adaptor.debug_dump.NetworkMetrics";
}

// ===================================================================

class EncoderRuntimeConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<EncoderRuntimeConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EncoderRuntimeConfig, _impl_._has_bits_);
  static void set_has_bitrate_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_frame_length_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uplink_packet_loss_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enable_fec(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_enable_dtx(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_num_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

EncoderRuntimeConfig::EncoderRuntimeConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
}
EncoderRuntimeConfig::EncoderRuntimeConfig(const EncoderRuntimeConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
}

inline void EncoderRuntimeConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bitrate_bps_) { 0 }

    , decltype(_impl_.frame_length_ms_) { 0 }

    , decltype(_impl_.uplink_packet_loss_fraction_) { 0 }

    , decltype(_impl_.enable_fec_) { false }

    , decltype(_impl_.enable_dtx_) { false }

    , decltype(_impl_.num_channels_) { 0u }

  };
}

EncoderRuntimeConfig::~EncoderRuntimeConfig() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EncoderRuntimeConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EncoderRuntimeConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EncoderRuntimeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.bitrate_bps_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.num_channels_) -
        reinterpret_cast<char*>(&_impl_.bitrate_bps_)) + sizeof(_impl_.num_channels_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EncoderRuntimeConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 bitrate_bps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bitrate_bps(&has_bits);
          _impl_.bitrate_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 frame_length_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_frame_length_ms(&has_bits);
          _impl_.frame_length_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional float uplink_packet_loss_fraction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 29)) {
          _Internal::set_has_uplink_packet_loss_fraction(&has_bits);
          _impl_.uplink_packet_loss_fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool enable_fec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_enable_fec(&has_bits);
          _impl_.enable_fec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool enable_dtx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_enable_dtx(&has_bits);
          _impl_.enable_dtx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 num_channels = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_num_channels(&has_bits);
          _impl_.num_channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EncoderRuntimeConfig::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 bitrate_bps = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_bitrate_bps(), target);
  }

  // optional int32 frame_length_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_frame_length_ms(), target);
  }

  // optional float uplink_packet_loss_fraction = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_uplink_packet_loss_fraction(), target);
  }

  // optional bool enable_fec = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_enable_fec(), target);
  }

  // optional bool enable_dtx = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_enable_dtx(), target);
  }

  // optional uint32 num_channels = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_num_channels(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
  return target;
}

::size_t EncoderRuntimeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 bitrate_bps = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_bitrate_bps());
    }

    // optional int32 frame_length_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_frame_length_ms());
    }

    // optional float uplink_packet_loss_fraction = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 5;
    }

    // optional bool enable_fec = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

    // optional bool enable_dtx = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

    // optional uint32 num_channels = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_num_channels());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncoderRuntimeConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EncoderRuntimeConfig*>(
      &from));
}

void EncoderRuntimeConfig::MergeFrom(const EncoderRuntimeConfig& from) {
  EncoderRuntimeConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.bitrate_bps_ = from._impl_.bitrate_bps_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.frame_length_ms_ = from._impl_.frame_length_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.uplink_packet_loss_fraction_ = from._impl_.uplink_packet_loss_fraction_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.enable_fec_ = from._impl_.enable_fec_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.enable_dtx_ = from._impl_.enable_dtx_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.num_channels_ = from._impl_.num_channels_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EncoderRuntimeConfig::CopyFrom(const EncoderRuntimeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncoderRuntimeConfig::IsInitialized() const {
  return true;
}

void EncoderRuntimeConfig::InternalSwap(EncoderRuntimeConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EncoderRuntimeConfig, _impl_.num_channels_)
      + sizeof(EncoderRuntimeConfig::_impl_.num_channels_)
      - PROTOBUF_FIELD_OFFSET(EncoderRuntimeConfig, _impl_.bitrate_bps_)>(
          reinterpret_cast<char*>(&_impl_.bitrate_bps_),
          reinterpret_cast<char*>(&other->_impl_.bitrate_bps_));
}

std::string EncoderRuntimeConfig::GetTypeName() const {
  return "webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig";
}

// ===================================================================

class Event::_Internal {
 public:
  using HasBits = decltype(std::declval<Event>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Event, _impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics& network_metrics(const Event* msg);
  static void set_has_network_metrics(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig& encoder_runtime_config(const Event* msg);
  static void set_has_encoder_runtime_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::webrtc::audio_network_adaptor::config::ControllerManager& controller_manager_config(const Event* msg);
  static void set_has_controller_manager_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000018) ^ 0x00000018) != 0;
  }
};

const ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics&
Event::_Internal::network_metrics(const Event* msg) {
  return *msg->_impl_.network_metrics_;
}
const ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig&
Event::_Internal::encoder_runtime_config(const Event* msg) {
  return *msg->_impl_.encoder_runtime_config_;
}
const ::webrtc::audio_network_adaptor::config::ControllerManager&
Event::_Internal::controller_manager_config(const Event* msg) {
  return *msg->_impl_.controller_manager_config_;
}
void Event::clear_controller_manager_config() {
  if (_impl_.controller_manager_config_ != nullptr) _impl_.controller_manager_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
Event::Event(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audio_network_adaptor.debug_dump.Event)
}
Event::Event(const Event& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Event* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.network_metrics_){nullptr}
    , decltype(_impl_.encoder_runtime_config_){nullptr}
    , decltype(_impl_.controller_manager_config_){nullptr}
    , decltype(_impl_.type_) {}

    , decltype(_impl_.timestamp_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.network_metrics_ = new ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics(*from._impl_.network_metrics_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.encoder_runtime_config_ = new ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig(*from._impl_.encoder_runtime_config_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.controller_manager_config_ = new ::webrtc::audio_network_adaptor::config::ControllerManager(*from._impl_.controller_manager_config_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.debug_dump.Event)
}

inline void Event::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.network_metrics_){nullptr}
    , decltype(_impl_.encoder_runtime_config_){nullptr}
    , decltype(_impl_.controller_manager_config_){nullptr}
    , decltype(_impl_.type_) { 0 }

    , decltype(_impl_.timestamp_) { 0u }

  };
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.debug_dump.Event)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Event::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.network_metrics_;
  if (this != internal_default_instance()) delete _impl_.encoder_runtime_config_;
  if (this != internal_default_instance()) delete _impl_.controller_manager_config_;
}

void Event::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.debug_dump.Event)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.network_metrics_ != nullptr);
      _impl_.network_metrics_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.encoder_runtime_config_ != nullptr);
      _impl_.encoder_runtime_config_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.controller_manager_config_ != nullptr);
      _impl_.controller_manager_config_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.type_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.timestamp_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Event::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .webrtc.audio_network_adaptor.debug_dump.Event.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::webrtc::audio_network_adaptor::debug_dump::Event_Type_IsValid(static_cast<int>(val)))) {
            _internal_set_type(static_cast<::webrtc::audio_network_adaptor::debug_dump::Event_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // required uint32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .webrtc.audio_network_adaptor.debug_dump.NetworkMetrics network_metrics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_network_metrics(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig encoder_runtime_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_encoder_runtime_config(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .webrtc.audio_network_adaptor.config.ControllerManager controller_manager_config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_controller_manager_config(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Event::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audio_network_adaptor.debug_dump.Event)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .webrtc.audio_network_adaptor.debug_dump.Event.Type type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // required uint32 timestamp = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_timestamp(), target);
  }

  // optional .webrtc.audio_network_adaptor.debug_dump.NetworkMetrics network_metrics = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::network_metrics(this),
        _Internal::network_metrics(this).GetCachedSize(), target, stream);
  }

  // optional .webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig encoder_runtime_config = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::encoder_runtime_config(this),
        _Internal::encoder_runtime_config(this).GetCachedSize(), target, stream);
  }

  // optional .webrtc.audio_network_adaptor.config.ControllerManager controller_manager_config = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::controller_manager_config(this),
        _Internal::controller_manager_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audio_network_adaptor.debug_dump.Event)
  return target;
}

::size_t Event::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:webrtc.audio_network_adaptor.debug_dump.Event)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000008u) != 0) {
    // required .webrtc.audio_network_adaptor.debug_dump.Event.Type type = 1;
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  if ((_impl_._has_bits_[0] & 0x00000010u) != 0) {
    // required uint32 timestamp = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_timestamp());
  }

  return total_size;
}
::size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.debug_dump.Event)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000018) ^ 0x00000018) == 0) {  // All required fields are present.
    // required .webrtc.audio_network_adaptor.debug_dump.Event.Type type = 1;
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());

    // required uint32 timestamp = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_timestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .webrtc.audio_network_adaptor.debug_dump.NetworkMetrics network_metrics = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.network_metrics_);
    }

    // optional .webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig encoder_runtime_config = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.encoder_runtime_config_);
    }

    // optional .webrtc.audio_network_adaptor.config.ControllerManager controller_manager_config = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.controller_manager_config_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Event*>(
      &from));
}

void Event::MergeFrom(const Event& from) {
  Event* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.debug_dump.Event)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_network_metrics()->::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics::MergeFrom(
          from._internal_network_metrics());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_encoder_runtime_config()->::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig::MergeFrom(
          from._internal_encoder_runtime_config());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_controller_manager_config()->::webrtc::audio_network_adaptor::config::ControllerManager::MergeFrom(
          from._internal_controller_manager_config());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.debug_dump.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event, _impl_.timestamp_)
      + sizeof(Event::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(Event, _impl_.network_metrics_)>(
          reinterpret_cast<char*>(&_impl_.network_metrics_),
          reinterpret_cast<char*>(&other->_impl_.network_metrics_));
}

std::string Event::GetTypeName() const {
  return "webrtc.audio_network_adaptor.debug_dump.Event";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace debug_dump
}  // namespace audio_network_adaptor
}  // namespace webrtc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics*
Arena::CreateMaybeMessage< ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig*
Arena::CreateMaybeMessage< ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::audio_network_adaptor::debug_dump::Event*
Arena::CreateMaybeMessage< ::webrtc::audio_network_adaptor::debug_dump::Event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::audio_network_adaptor::debug_dump::Event >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
