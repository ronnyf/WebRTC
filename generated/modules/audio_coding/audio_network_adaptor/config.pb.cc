// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#include "config.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace webrtc {
namespace audio_network_adaptor {
namespace config {

inline constexpr FrameLengthControllerV2::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        min_payload_bitrate_bps_{0},
        use_slow_adaptation_{false} {}

template <typename>
PROTOBUF_CONSTEXPR FrameLengthControllerV2::FrameLengthControllerV2(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FrameLengthControllerV2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameLengthControllerV2DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameLengthControllerV2DefaultTypeInternal() {}
  union {
    FrameLengthControllerV2 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameLengthControllerV2DefaultTypeInternal _FrameLengthControllerV2_default_instance_;

inline constexpr FrameLengthController::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        fl_increasing_packet_loss_fraction_{0},
        fl_decreasing_packet_loss_fraction_{0},
        fl_20ms_to_60ms_bandwidth_bps_{0},
        fl_60ms_to_20ms_bandwidth_bps_{0},
        fl_60ms_to_120ms_bandwidth_bps_{0},
        fl_120ms_to_60ms_bandwidth_bps_{0},
        fl_increase_overhead_offset_{0},
        fl_decrease_overhead_offset_{0},
        fl_20ms_to_40ms_bandwidth_bps_{0},
        fl_40ms_to_20ms_bandwidth_bps_{0},
        fl_40ms_to_60ms_bandwidth_bps_{0},
        fl_60ms_to_40ms_bandwidth_bps_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FrameLengthController::FrameLengthController(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FrameLengthControllerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameLengthControllerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameLengthControllerDefaultTypeInternal() {}
  union {
    FrameLengthController _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameLengthControllerDefaultTypeInternal _FrameLengthController_default_instance_;

inline constexpr FecControllerRplrBased_Threshold::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        low_bandwidth_bps_{0},
        low_bandwidth_recoverable_packet_loss_{0},
        high_bandwidth_bps_{0},
        high_bandwidth_recoverable_packet_loss_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FecControllerRplrBased_Threshold::FecControllerRplrBased_Threshold(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FecControllerRplrBased_ThresholdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FecControllerRplrBased_ThresholdDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FecControllerRplrBased_ThresholdDefaultTypeInternal() {}
  union {
    FecControllerRplrBased_Threshold _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FecControllerRplrBased_ThresholdDefaultTypeInternal _FecControllerRplrBased_Threshold_default_instance_;

inline constexpr FecController_Threshold::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        low_bandwidth_bps_{0},
        low_bandwidth_packet_loss_{0},
        high_bandwidth_bps_{0},
        high_bandwidth_packet_loss_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FecController_Threshold::FecController_Threshold(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FecController_ThresholdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FecController_ThresholdDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FecController_ThresholdDefaultTypeInternal() {}
  union {
    FecController_Threshold _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FecController_ThresholdDefaultTypeInternal _FecController_Threshold_default_instance_;

inline constexpr DtxController::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        dtx_enabling_bandwidth_bps_{0},
        dtx_disabling_bandwidth_bps_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DtxController::DtxController(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DtxControllerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DtxControllerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DtxControllerDefaultTypeInternal() {}
  union {
    DtxController _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DtxControllerDefaultTypeInternal _DtxController_default_instance_;

inline constexpr Controller_ScoringPoint::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        uplink_bandwidth_bps_{0},
        uplink_packet_loss_fraction_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Controller_ScoringPoint::Controller_ScoringPoint(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Controller_ScoringPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Controller_ScoringPointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Controller_ScoringPointDefaultTypeInternal() {}
  union {
    Controller_ScoringPoint _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Controller_ScoringPointDefaultTypeInternal _Controller_ScoringPoint_default_instance_;

inline constexpr ChannelController::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        channel_1_to_2_bandwidth_bps_{0},
        channel_2_to_1_bandwidth_bps_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ChannelController::ChannelController(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ChannelControllerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChannelControllerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChannelControllerDefaultTypeInternal() {}
  union {
    ChannelController _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChannelControllerDefaultTypeInternal _ChannelController_default_instance_;

inline constexpr BitrateController::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        fl_increase_overhead_offset_{0},
        fl_decrease_overhead_offset_{0} {}

template <typename>
PROTOBUF_CONSTEXPR BitrateController::BitrateController(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct BitrateControllerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BitrateControllerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BitrateControllerDefaultTypeInternal() {}
  union {
    BitrateController _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BitrateControllerDefaultTypeInternal _BitrateController_default_instance_;

inline constexpr FecControllerRplrBased::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        fec_enabling_threshold_{nullptr},
        fec_disabling_threshold_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR FecControllerRplrBased::FecControllerRplrBased(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FecControllerRplrBasedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FecControllerRplrBasedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FecControllerRplrBasedDefaultTypeInternal() {}
  union {
    FecControllerRplrBased _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FecControllerRplrBasedDefaultTypeInternal _FecControllerRplrBased_default_instance_;

inline constexpr FecController::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        fec_enabling_threshold_{nullptr},
        fec_disabling_threshold_{nullptr},
        time_constant_ms_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FecController::FecController(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FecControllerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FecControllerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FecControllerDefaultTypeInternal() {}
  union {
    FecController _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FecControllerDefaultTypeInternal _FecController_default_instance_;

inline constexpr Controller::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        scoring_point_{nullptr},
        controller_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Controller::Controller(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ControllerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControllerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControllerDefaultTypeInternal() {}
  union {
    Controller _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControllerDefaultTypeInternal _Controller_default_instance_;

inline constexpr ControllerManager::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        controllers_{},
        min_reordering_time_ms_{0},
        min_reordering_squared_distance_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ControllerManager::ControllerManager(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ControllerManagerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControllerManagerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControllerManagerDefaultTypeInternal() {}
  union {
    ControllerManager _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControllerManagerDefaultTypeInternal _ControllerManager_default_instance_;
}  // namespace config
}  // namespace audio_network_adaptor
}  // namespace webrtc
namespace webrtc {
namespace audio_network_adaptor {
namespace config {
// ===================================================================

class FecController_Threshold::_Internal {
 public:
  using HasBits = decltype(std::declval<FecController_Threshold>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FecController_Threshold, _impl_._has_bits_);
  static void set_has_low_bandwidth_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_low_bandwidth_packet_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_high_bandwidth_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_high_bandwidth_packet_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

FecController_Threshold::FecController_Threshold(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audio_network_adaptor.config.FecController.Threshold)
}
FecController_Threshold::FecController_Threshold(
    ::google::protobuf::Arena* arena, const FecController_Threshold& from)
    : FecController_Threshold(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE FecController_Threshold::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void FecController_Threshold::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, low_bandwidth_bps_),
           0,
           offsetof(Impl_, high_bandwidth_packet_loss_) -
               offsetof(Impl_, low_bandwidth_bps_) +
               sizeof(Impl_::high_bandwidth_packet_loss_));
}
FecController_Threshold::~FecController_Threshold() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.config.FecController.Threshold)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void FecController_Threshold::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FecController_Threshold::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.config.FecController.Threshold)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.low_bandwidth_bps_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.high_bandwidth_packet_loss_) -
        reinterpret_cast<char*>(&_impl_.low_bandwidth_bps_)) + sizeof(_impl_.high_bandwidth_packet_loss_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FecController_Threshold::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> FecController_Threshold::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FecController_Threshold, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_FecController_Threshold_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // optional float high_bandwidth_packet_loss = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 3, 0, PROTOBUF_FIELD_OFFSET(FecController_Threshold, _impl_.high_bandwidth_packet_loss_)}},
    // optional int32 low_bandwidth_bps = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(FecController_Threshold, _impl_.low_bandwidth_bps_)}},
    // optional float low_bandwidth_packet_loss = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(FecController_Threshold, _impl_.low_bandwidth_packet_loss_)}},
    // optional int32 high_bandwidth_bps = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(FecController_Threshold, _impl_.high_bandwidth_bps_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 low_bandwidth_bps = 1;
    {PROTOBUF_FIELD_OFFSET(FecController_Threshold, _impl_.low_bandwidth_bps_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional float low_bandwidth_packet_loss = 2;
    {PROTOBUF_FIELD_OFFSET(FecController_Threshold, _impl_.low_bandwidth_packet_loss_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional int32 high_bandwidth_bps = 3;
    {PROTOBUF_FIELD_OFFSET(FecController_Threshold, _impl_.high_bandwidth_bps_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional float high_bandwidth_packet_loss = 4;
    {PROTOBUF_FIELD_OFFSET(FecController_Threshold, _impl_.high_bandwidth_packet_loss_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* FecController_Threshold::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audio_network_adaptor.config.FecController.Threshold)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 low_bandwidth_bps = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_low_bandwidth_bps(), target);
  }

  // optional float low_bandwidth_packet_loss = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_low_bandwidth_packet_loss(), target);
  }

  // optional int32 high_bandwidth_bps = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_high_bandwidth_bps(), target);
  }

  // optional float high_bandwidth_packet_loss = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_high_bandwidth_packet_loss(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audio_network_adaptor.config.FecController.Threshold)
  return target;
}

::size_t FecController_Threshold::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.config.FecController.Threshold)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 low_bandwidth_bps = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_low_bandwidth_bps());
    }

    // optional float low_bandwidth_packet_loss = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5;
    }

    // optional int32 high_bandwidth_bps = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_high_bandwidth_bps());
    }

    // optional float high_bandwidth_packet_loss = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 5;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void FecController_Threshold::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FecController_Threshold*>(
      &from));
}

void FecController_Threshold::MergeFrom(const FecController_Threshold& from) {
  FecController_Threshold* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.config.FecController.Threshold)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.low_bandwidth_bps_ = from._impl_.low_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.low_bandwidth_packet_loss_ = from._impl_.low_bandwidth_packet_loss_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.high_bandwidth_bps_ = from._impl_.high_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.high_bandwidth_packet_loss_ = from._impl_.high_bandwidth_packet_loss_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FecController_Threshold::CopyFrom(const FecController_Threshold& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.config.FecController.Threshold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FecController_Threshold::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FecController_Threshold::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FecController_Threshold::InternalSwap(FecController_Threshold* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FecController_Threshold, _impl_.high_bandwidth_packet_loss_)
      + sizeof(FecController_Threshold::_impl_.high_bandwidth_packet_loss_)
      - PROTOBUF_FIELD_OFFSET(FecController_Threshold, _impl_.low_bandwidth_bps_)>(
          reinterpret_cast<char*>(&_impl_.low_bandwidth_bps_),
          reinterpret_cast<char*>(&other->_impl_.low_bandwidth_bps_));
}

std::string FecController_Threshold::GetTypeName() const {
  return "webrtc.audio_network_adaptor.config.FecController.Threshold";
}

// ===================================================================

class FecController::_Internal {
 public:
  using HasBits = decltype(std::declval<FecController>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FecController, _impl_._has_bits_);
  static const ::webrtc::audio_network_adaptor::config::FecController_Threshold& fec_enabling_threshold(const FecController* msg);
  static void set_has_fec_enabling_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::webrtc::audio_network_adaptor::config::FecController_Threshold& fec_disabling_threshold(const FecController* msg);
  static void set_has_fec_disabling_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_constant_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::webrtc::audio_network_adaptor::config::FecController_Threshold& FecController::_Internal::fec_enabling_threshold(const FecController* msg) {
  return *msg->_impl_.fec_enabling_threshold_;
}
const ::webrtc::audio_network_adaptor::config::FecController_Threshold& FecController::_Internal::fec_disabling_threshold(const FecController* msg) {
  return *msg->_impl_.fec_disabling_threshold_;
}
FecController::FecController(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audio_network_adaptor.config.FecController)
}
inline PROTOBUF_NDEBUG_INLINE FecController::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

FecController::FecController(
    ::google::protobuf::Arena* arena,
    const FecController& from)
    : ::google::protobuf::MessageLite(arena) {
  FecController* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.fec_enabling_threshold_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::webrtc::audio_network_adaptor::config::FecController_Threshold>(arena, *from._impl_.fec_enabling_threshold_)
                : nullptr;
  _impl_.fec_disabling_threshold_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::webrtc::audio_network_adaptor::config::FecController_Threshold>(arena, *from._impl_.fec_disabling_threshold_)
                : nullptr;
  _impl_.time_constant_ms_ = from._impl_.time_constant_ms_;

  // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.config.FecController)
}
inline PROTOBUF_NDEBUG_INLINE FecController::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void FecController::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, fec_enabling_threshold_),
           0,
           offsetof(Impl_, time_constant_ms_) -
               offsetof(Impl_, fec_enabling_threshold_) +
               sizeof(Impl_::time_constant_ms_));
}
FecController::~FecController() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.config.FecController)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void FecController::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.fec_enabling_threshold_;
  delete _impl_.fec_disabling_threshold_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FecController::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.config.FecController)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.fec_enabling_threshold_ != nullptr);
      _impl_.fec_enabling_threshold_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.fec_disabling_threshold_ != nullptr);
      _impl_.fec_disabling_threshold_->Clear();
    }
  }
  _impl_.time_constant_ms_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FecController::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> FecController::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FecController, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_FecController_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .webrtc.audio_network_adaptor.config.FecController.Threshold fec_enabling_threshold = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(FecController, _impl_.fec_enabling_threshold_)}},
    // optional .webrtc.audio_network_adaptor.config.FecController.Threshold fec_disabling_threshold = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(FecController, _impl_.fec_disabling_threshold_)}},
    // optional int32 time_constant_ms = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(FecController, _impl_.time_constant_ms_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .webrtc.audio_network_adaptor.config.FecController.Threshold fec_enabling_threshold = 1;
    {PROTOBUF_FIELD_OFFSET(FecController, _impl_.fec_enabling_threshold_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .webrtc.audio_network_adaptor.config.FecController.Threshold fec_disabling_threshold = 2;
    {PROTOBUF_FIELD_OFFSET(FecController, _impl_.fec_disabling_threshold_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional int32 time_constant_ms = 3;
    {PROTOBUF_FIELD_OFFSET(FecController, _impl_.time_constant_ms_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::webrtc::audio_network_adaptor::config::FecController_Threshold>()},
    {::_pbi::TcParser::GetTable<::webrtc::audio_network_adaptor::config::FecController_Threshold>()},
  }}, {{
  }},
};

::uint8_t* FecController::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audio_network_adaptor.config.FecController)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .webrtc.audio_network_adaptor.config.FecController.Threshold fec_enabling_threshold = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::fec_enabling_threshold(this),
        _Internal::fec_enabling_threshold(this).GetCachedSize(), target, stream);
  }

  // optional .webrtc.audio_network_adaptor.config.FecController.Threshold fec_disabling_threshold = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::fec_disabling_threshold(this),
        _Internal::fec_disabling_threshold(this).GetCachedSize(), target, stream);
  }

  // optional int32 time_constant_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_time_constant_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audio_network_adaptor.config.FecController)
  return target;
}

::size_t FecController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.config.FecController)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .webrtc.audio_network_adaptor.config.FecController.Threshold fec_enabling_threshold = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.fec_enabling_threshold_);
    }

    // optional .webrtc.audio_network_adaptor.config.FecController.Threshold fec_disabling_threshold = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.fec_disabling_threshold_);
    }

    // optional int32 time_constant_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_time_constant_ms());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void FecController::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FecController*>(
      &from));
}

void FecController::MergeFrom(const FecController& from) {
  FecController* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.config.FecController)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_fec_enabling_threshold()->::webrtc::audio_network_adaptor::config::FecController_Threshold::MergeFrom(
          from._internal_fec_enabling_threshold());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_fec_disabling_threshold()->::webrtc::audio_network_adaptor::config::FecController_Threshold::MergeFrom(
          from._internal_fec_disabling_threshold());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.time_constant_ms_ = from._impl_.time_constant_ms_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FecController::CopyFrom(const FecController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.config.FecController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FecController::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FecController::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FecController::InternalSwap(FecController* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FecController, _impl_.time_constant_ms_)
      + sizeof(FecController::_impl_.time_constant_ms_)
      - PROTOBUF_FIELD_OFFSET(FecController, _impl_.fec_enabling_threshold_)>(
          reinterpret_cast<char*>(&_impl_.fec_enabling_threshold_),
          reinterpret_cast<char*>(&other->_impl_.fec_enabling_threshold_));
}

std::string FecController::GetTypeName() const {
  return "webrtc.audio_network_adaptor.config.FecController";
}

// ===================================================================

class FecControllerRplrBased_Threshold::_Internal {
 public:
  using HasBits = decltype(std::declval<FecControllerRplrBased_Threshold>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FecControllerRplrBased_Threshold, _impl_._has_bits_);
  static void set_has_low_bandwidth_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_low_bandwidth_recoverable_packet_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_high_bandwidth_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_high_bandwidth_recoverable_packet_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

FecControllerRplrBased_Threshold::FecControllerRplrBased_Threshold(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold)
}
FecControllerRplrBased_Threshold::FecControllerRplrBased_Threshold(
    ::google::protobuf::Arena* arena, const FecControllerRplrBased_Threshold& from)
    : FecControllerRplrBased_Threshold(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE FecControllerRplrBased_Threshold::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void FecControllerRplrBased_Threshold::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, low_bandwidth_bps_),
           0,
           offsetof(Impl_, high_bandwidth_recoverable_packet_loss_) -
               offsetof(Impl_, low_bandwidth_bps_) +
               sizeof(Impl_::high_bandwidth_recoverable_packet_loss_));
}
FecControllerRplrBased_Threshold::~FecControllerRplrBased_Threshold() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void FecControllerRplrBased_Threshold::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FecControllerRplrBased_Threshold::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.low_bandwidth_bps_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.high_bandwidth_recoverable_packet_loss_) -
        reinterpret_cast<char*>(&_impl_.low_bandwidth_bps_)) + sizeof(_impl_.high_bandwidth_recoverable_packet_loss_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FecControllerRplrBased_Threshold::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> FecControllerRplrBased_Threshold::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FecControllerRplrBased_Threshold, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_FecControllerRplrBased_Threshold_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // optional float high_bandwidth_recoverable_packet_loss = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 3, 0, PROTOBUF_FIELD_OFFSET(FecControllerRplrBased_Threshold, _impl_.high_bandwidth_recoverable_packet_loss_)}},
    // optional int32 low_bandwidth_bps = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(FecControllerRplrBased_Threshold, _impl_.low_bandwidth_bps_)}},
    // optional float low_bandwidth_recoverable_packet_loss = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(FecControllerRplrBased_Threshold, _impl_.low_bandwidth_recoverable_packet_loss_)}},
    // optional int32 high_bandwidth_bps = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(FecControllerRplrBased_Threshold, _impl_.high_bandwidth_bps_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 low_bandwidth_bps = 1;
    {PROTOBUF_FIELD_OFFSET(FecControllerRplrBased_Threshold, _impl_.low_bandwidth_bps_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional float low_bandwidth_recoverable_packet_loss = 2;
    {PROTOBUF_FIELD_OFFSET(FecControllerRplrBased_Threshold, _impl_.low_bandwidth_recoverable_packet_loss_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional int32 high_bandwidth_bps = 3;
    {PROTOBUF_FIELD_OFFSET(FecControllerRplrBased_Threshold, _impl_.high_bandwidth_bps_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional float high_bandwidth_recoverable_packet_loss = 4;
    {PROTOBUF_FIELD_OFFSET(FecControllerRplrBased_Threshold, _impl_.high_bandwidth_recoverable_packet_loss_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* FecControllerRplrBased_Threshold::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 low_bandwidth_bps = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_low_bandwidth_bps(), target);
  }

  // optional float low_bandwidth_recoverable_packet_loss = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_low_bandwidth_recoverable_packet_loss(), target);
  }

  // optional int32 high_bandwidth_bps = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_high_bandwidth_bps(), target);
  }

  // optional float high_bandwidth_recoverable_packet_loss = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_high_bandwidth_recoverable_packet_loss(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold)
  return target;
}

::size_t FecControllerRplrBased_Threshold::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 low_bandwidth_bps = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_low_bandwidth_bps());
    }

    // optional float low_bandwidth_recoverable_packet_loss = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5;
    }

    // optional int32 high_bandwidth_bps = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_high_bandwidth_bps());
    }

    // optional float high_bandwidth_recoverable_packet_loss = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 5;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void FecControllerRplrBased_Threshold::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FecControllerRplrBased_Threshold*>(
      &from));
}

void FecControllerRplrBased_Threshold::MergeFrom(const FecControllerRplrBased_Threshold& from) {
  FecControllerRplrBased_Threshold* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.low_bandwidth_bps_ = from._impl_.low_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.low_bandwidth_recoverable_packet_loss_ = from._impl_.low_bandwidth_recoverable_packet_loss_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.high_bandwidth_bps_ = from._impl_.high_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.high_bandwidth_recoverable_packet_loss_ = from._impl_.high_bandwidth_recoverable_packet_loss_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FecControllerRplrBased_Threshold::CopyFrom(const FecControllerRplrBased_Threshold& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FecControllerRplrBased_Threshold::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FecControllerRplrBased_Threshold::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FecControllerRplrBased_Threshold::InternalSwap(FecControllerRplrBased_Threshold* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FecControllerRplrBased_Threshold, _impl_.high_bandwidth_recoverable_packet_loss_)
      + sizeof(FecControllerRplrBased_Threshold::_impl_.high_bandwidth_recoverable_packet_loss_)
      - PROTOBUF_FIELD_OFFSET(FecControllerRplrBased_Threshold, _impl_.low_bandwidth_bps_)>(
          reinterpret_cast<char*>(&_impl_.low_bandwidth_bps_),
          reinterpret_cast<char*>(&other->_impl_.low_bandwidth_bps_));
}

std::string FecControllerRplrBased_Threshold::GetTypeName() const {
  return "webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold";
}

// ===================================================================

class FecControllerRplrBased::_Internal {
 public:
  using HasBits = decltype(std::declval<FecControllerRplrBased>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FecControllerRplrBased, _impl_._has_bits_);
  static const ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold& fec_enabling_threshold(const FecControllerRplrBased* msg);
  static void set_has_fec_enabling_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold& fec_disabling_threshold(const FecControllerRplrBased* msg);
  static void set_has_fec_disabling_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold& FecControllerRplrBased::_Internal::fec_enabling_threshold(const FecControllerRplrBased* msg) {
  return *msg->_impl_.fec_enabling_threshold_;
}
const ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold& FecControllerRplrBased::_Internal::fec_disabling_threshold(const FecControllerRplrBased* msg) {
  return *msg->_impl_.fec_disabling_threshold_;
}
FecControllerRplrBased::FecControllerRplrBased(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audio_network_adaptor.config.FecControllerRplrBased)
}
inline PROTOBUF_NDEBUG_INLINE FecControllerRplrBased::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

FecControllerRplrBased::FecControllerRplrBased(
    ::google::protobuf::Arena* arena,
    const FecControllerRplrBased& from)
    : ::google::protobuf::MessageLite(arena) {
  FecControllerRplrBased* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.fec_enabling_threshold_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold>(arena, *from._impl_.fec_enabling_threshold_)
                : nullptr;
  _impl_.fec_disabling_threshold_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold>(arena, *from._impl_.fec_disabling_threshold_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.config.FecControllerRplrBased)
}
inline PROTOBUF_NDEBUG_INLINE FecControllerRplrBased::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void FecControllerRplrBased::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, fec_enabling_threshold_),
           0,
           offsetof(Impl_, fec_disabling_threshold_) -
               offsetof(Impl_, fec_enabling_threshold_) +
               sizeof(Impl_::fec_disabling_threshold_));
}
FecControllerRplrBased::~FecControllerRplrBased() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.config.FecControllerRplrBased)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void FecControllerRplrBased::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.fec_enabling_threshold_;
  delete _impl_.fec_disabling_threshold_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FecControllerRplrBased::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.config.FecControllerRplrBased)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.fec_enabling_threshold_ != nullptr);
      _impl_.fec_enabling_threshold_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.fec_disabling_threshold_ != nullptr);
      _impl_.fec_disabling_threshold_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FecControllerRplrBased::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> FecControllerRplrBased::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FecControllerRplrBased, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_FecControllerRplrBased_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // optional .webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold fec_disabling_threshold = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(FecControllerRplrBased, _impl_.fec_disabling_threshold_)}},
    // optional .webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold fec_enabling_threshold = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(FecControllerRplrBased, _impl_.fec_enabling_threshold_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold fec_enabling_threshold = 1;
    {PROTOBUF_FIELD_OFFSET(FecControllerRplrBased, _impl_.fec_enabling_threshold_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold fec_disabling_threshold = 2;
    {PROTOBUF_FIELD_OFFSET(FecControllerRplrBased, _impl_.fec_disabling_threshold_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold>()},
    {::_pbi::TcParser::GetTable<::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold>()},
  }}, {{
  }},
};

::uint8_t* FecControllerRplrBased::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audio_network_adaptor.config.FecControllerRplrBased)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold fec_enabling_threshold = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::fec_enabling_threshold(this),
        _Internal::fec_enabling_threshold(this).GetCachedSize(), target, stream);
  }

  // optional .webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold fec_disabling_threshold = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::fec_disabling_threshold(this),
        _Internal::fec_disabling_threshold(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audio_network_adaptor.config.FecControllerRplrBased)
  return target;
}

::size_t FecControllerRplrBased::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.config.FecControllerRplrBased)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold fec_enabling_threshold = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.fec_enabling_threshold_);
    }

    // optional .webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold fec_disabling_threshold = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.fec_disabling_threshold_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void FecControllerRplrBased::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FecControllerRplrBased*>(
      &from));
}

void FecControllerRplrBased::MergeFrom(const FecControllerRplrBased& from) {
  FecControllerRplrBased* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.config.FecControllerRplrBased)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_fec_enabling_threshold()->::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold::MergeFrom(
          from._internal_fec_enabling_threshold());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_fec_disabling_threshold()->::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold::MergeFrom(
          from._internal_fec_disabling_threshold());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FecControllerRplrBased::CopyFrom(const FecControllerRplrBased& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.config.FecControllerRplrBased)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FecControllerRplrBased::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FecControllerRplrBased::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FecControllerRplrBased::InternalSwap(FecControllerRplrBased* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FecControllerRplrBased, _impl_.fec_disabling_threshold_)
      + sizeof(FecControllerRplrBased::_impl_.fec_disabling_threshold_)
      - PROTOBUF_FIELD_OFFSET(FecControllerRplrBased, _impl_.fec_enabling_threshold_)>(
          reinterpret_cast<char*>(&_impl_.fec_enabling_threshold_),
          reinterpret_cast<char*>(&other->_impl_.fec_enabling_threshold_));
}

std::string FecControllerRplrBased::GetTypeName() const {
  return "webrtc.audio_network_adaptor.config.FecControllerRplrBased";
}

// ===================================================================

class FrameLengthController::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameLengthController>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FrameLengthController, _impl_._has_bits_);
  static void set_has_fl_increasing_packet_loss_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fl_decreasing_packet_loss_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fl_20ms_to_60ms_bandwidth_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fl_60ms_to_20ms_bandwidth_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_fl_60ms_to_120ms_bandwidth_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_fl_120ms_to_60ms_bandwidth_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fl_increase_overhead_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_fl_decrease_overhead_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_fl_20ms_to_40ms_bandwidth_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_fl_40ms_to_20ms_bandwidth_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_fl_40ms_to_60ms_bandwidth_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_fl_60ms_to_40ms_bandwidth_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

FrameLengthController::FrameLengthController(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audio_network_adaptor.config.FrameLengthController)
}
FrameLengthController::FrameLengthController(
    ::google::protobuf::Arena* arena, const FrameLengthController& from)
    : FrameLengthController(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE FrameLengthController::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void FrameLengthController::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, fl_increasing_packet_loss_fraction_),
           0,
           offsetof(Impl_, fl_60ms_to_40ms_bandwidth_bps_) -
               offsetof(Impl_, fl_increasing_packet_loss_fraction_) +
               sizeof(Impl_::fl_60ms_to_40ms_bandwidth_bps_));
}
FrameLengthController::~FrameLengthController() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.config.FrameLengthController)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void FrameLengthController::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FrameLengthController::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.config.FrameLengthController)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.fl_increasing_packet_loss_fraction_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.fl_decrease_overhead_offset_) -
        reinterpret_cast<char*>(&_impl_.fl_increasing_packet_loss_fraction_)) + sizeof(_impl_.fl_decrease_overhead_offset_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.fl_20ms_to_40ms_bandwidth_bps_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.fl_60ms_to_40ms_bandwidth_bps_) -
        reinterpret_cast<char*>(&_impl_.fl_20ms_to_40ms_bandwidth_bps_)) + sizeof(_impl_.fl_60ms_to_40ms_bandwidth_bps_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FrameLengthController::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 0, 0, 2> FrameLengthController::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FrameLengthController, _impl_._has_bits_),
    0, // no _extensions_
    12, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_FrameLengthController_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional float fl_increasing_packet_loss_fraction = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(FrameLengthController, _impl_.fl_increasing_packet_loss_fraction_)}},
    // optional float fl_decreasing_packet_loss_fraction = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(FrameLengthController, _impl_.fl_decreasing_packet_loss_fraction_)}},
    // optional int32 fl_20ms_to_60ms_bandwidth_bps = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(FrameLengthController, _impl_.fl_20ms_to_60ms_bandwidth_bps_)}},
    // optional int32 fl_60ms_to_20ms_bandwidth_bps = 4;
    {::_pbi::TcParser::FastV32S1,
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(FrameLengthController, _impl_.fl_60ms_to_20ms_bandwidth_bps_)}},
    // optional int32 fl_60ms_to_120ms_bandwidth_bps = 5;
    {::_pbi::TcParser::FastV32S1,
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(FrameLengthController, _impl_.fl_60ms_to_120ms_bandwidth_bps_)}},
    // optional int32 fl_120ms_to_60ms_bandwidth_bps = 6;
    {::_pbi::TcParser::FastV32S1,
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(FrameLengthController, _impl_.fl_120ms_to_60ms_bandwidth_bps_)}},
    // optional int32 fl_increase_overhead_offset = 7;
    {::_pbi::TcParser::FastV32S1,
     {56, 6, 0, PROTOBUF_FIELD_OFFSET(FrameLengthController, _impl_.fl_increase_overhead_offset_)}},
    // optional int32 fl_decrease_overhead_offset = 8;
    {::_pbi::TcParser::FastV32S1,
     {64, 7, 0, PROTOBUF_FIELD_OFFSET(FrameLengthController, _impl_.fl_decrease_overhead_offset_)}},
    // optional int32 fl_20ms_to_40ms_bandwidth_bps = 9;
    {::_pbi::TcParser::FastV32S1,
     {72, 8, 0, PROTOBUF_FIELD_OFFSET(FrameLengthController, _impl_.fl_20ms_to_40ms_bandwidth_bps_)}},
    // optional int32 fl_40ms_to_20ms_bandwidth_bps = 10;
    {::_pbi::TcParser::FastV32S1,
     {80, 9, 0, PROTOBUF_FIELD_OFFSET(FrameLengthController, _impl_.fl_40ms_to_20ms_bandwidth_bps_)}},
    // optional int32 fl_40ms_to_60ms_bandwidth_bps = 11;
    {::_pbi::TcParser::FastV32S1,
     {88, 10, 0, PROTOBUF_FIELD_OFFSET(FrameLengthController, _impl_.fl_40ms_to_60ms_bandwidth_bps_)}},
    // optional int32 fl_60ms_to_40ms_bandwidth_bps = 12;
    {::_pbi::TcParser::FastV32S1,
     {96, 11, 0, PROTOBUF_FIELD_OFFSET(FrameLengthController, _impl_.fl_60ms_to_40ms_bandwidth_bps_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional float fl_increasing_packet_loss_fraction = 1;
    {PROTOBUF_FIELD_OFFSET(FrameLengthController, _impl_.fl_increasing_packet_loss_fraction_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float fl_decreasing_packet_loss_fraction = 2;
    {PROTOBUF_FIELD_OFFSET(FrameLengthController, _impl_.fl_decreasing_packet_loss_fraction_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional int32 fl_20ms_to_60ms_bandwidth_bps = 3;
    {PROTOBUF_FIELD_OFFSET(FrameLengthController, _impl_.fl_20ms_to_60ms_bandwidth_bps_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 fl_60ms_to_20ms_bandwidth_bps = 4;
    {PROTOBUF_FIELD_OFFSET(FrameLengthController, _impl_.fl_60ms_to_20ms_bandwidth_bps_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 fl_60ms_to_120ms_bandwidth_bps = 5;
    {PROTOBUF_FIELD_OFFSET(FrameLengthController, _impl_.fl_60ms_to_120ms_bandwidth_bps_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 fl_120ms_to_60ms_bandwidth_bps = 6;
    {PROTOBUF_FIELD_OFFSET(FrameLengthController, _impl_.fl_120ms_to_60ms_bandwidth_bps_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 fl_increase_overhead_offset = 7;
    {PROTOBUF_FIELD_OFFSET(FrameLengthController, _impl_.fl_increase_overhead_offset_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 fl_decrease_overhead_offset = 8;
    {PROTOBUF_FIELD_OFFSET(FrameLengthController, _impl_.fl_decrease_overhead_offset_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 fl_20ms_to_40ms_bandwidth_bps = 9;
    {PROTOBUF_FIELD_OFFSET(FrameLengthController, _impl_.fl_20ms_to_40ms_bandwidth_bps_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 fl_40ms_to_20ms_bandwidth_bps = 10;
    {PROTOBUF_FIELD_OFFSET(FrameLengthController, _impl_.fl_40ms_to_20ms_bandwidth_bps_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 fl_40ms_to_60ms_bandwidth_bps = 11;
    {PROTOBUF_FIELD_OFFSET(FrameLengthController, _impl_.fl_40ms_to_60ms_bandwidth_bps_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 fl_60ms_to_40ms_bandwidth_bps = 12;
    {PROTOBUF_FIELD_OFFSET(FrameLengthController, _impl_.fl_60ms_to_40ms_bandwidth_bps_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* FrameLengthController::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audio_network_adaptor.config.FrameLengthController)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float fl_increasing_packet_loss_fraction = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_fl_increasing_packet_loss_fraction(), target);
  }

  // optional float fl_decreasing_packet_loss_fraction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_fl_decreasing_packet_loss_fraction(), target);
  }

  // optional int32 fl_20ms_to_60ms_bandwidth_bps = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_fl_20ms_to_60ms_bandwidth_bps(), target);
  }

  // optional int32 fl_60ms_to_20ms_bandwidth_bps = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_fl_60ms_to_20ms_bandwidth_bps(), target);
  }

  // optional int32 fl_60ms_to_120ms_bandwidth_bps = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_fl_60ms_to_120ms_bandwidth_bps(), target);
  }

  // optional int32 fl_120ms_to_60ms_bandwidth_bps = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_fl_120ms_to_60ms_bandwidth_bps(), target);
  }

  // optional int32 fl_increase_overhead_offset = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_fl_increase_overhead_offset(), target);
  }

  // optional int32 fl_decrease_overhead_offset = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<8>(
            stream, this->_internal_fl_decrease_overhead_offset(), target);
  }

  // optional int32 fl_20ms_to_40ms_bandwidth_bps = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<9>(
            stream, this->_internal_fl_20ms_to_40ms_bandwidth_bps(), target);
  }

  // optional int32 fl_40ms_to_20ms_bandwidth_bps = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<10>(
            stream, this->_internal_fl_40ms_to_20ms_bandwidth_bps(), target);
  }

  // optional int32 fl_40ms_to_60ms_bandwidth_bps = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<11>(
            stream, this->_internal_fl_40ms_to_60ms_bandwidth_bps(), target);
  }

  // optional int32 fl_60ms_to_40ms_bandwidth_bps = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<12>(
            stream, this->_internal_fl_60ms_to_40ms_bandwidth_bps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audio_network_adaptor.config.FrameLengthController)
  return target;
}

::size_t FrameLengthController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.config.FrameLengthController)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float fl_increasing_packet_loss_fraction = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 5;
    }

    // optional float fl_decreasing_packet_loss_fraction = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5;
    }

    // optional int32 fl_20ms_to_60ms_bandwidth_bps = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_fl_20ms_to_60ms_bandwidth_bps());
    }

    // optional int32 fl_60ms_to_20ms_bandwidth_bps = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_fl_60ms_to_20ms_bandwidth_bps());
    }

    // optional int32 fl_60ms_to_120ms_bandwidth_bps = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_fl_60ms_to_120ms_bandwidth_bps());
    }

    // optional int32 fl_120ms_to_60ms_bandwidth_bps = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_fl_120ms_to_60ms_bandwidth_bps());
    }

    // optional int32 fl_increase_overhead_offset = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_fl_increase_overhead_offset());
    }

    // optional int32 fl_decrease_overhead_offset = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_fl_decrease_overhead_offset());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional int32 fl_20ms_to_40ms_bandwidth_bps = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_fl_20ms_to_40ms_bandwidth_bps());
    }

    // optional int32 fl_40ms_to_20ms_bandwidth_bps = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_fl_40ms_to_20ms_bandwidth_bps());
    }

    // optional int32 fl_40ms_to_60ms_bandwidth_bps = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_fl_40ms_to_60ms_bandwidth_bps());
    }

    // optional int32 fl_60ms_to_40ms_bandwidth_bps = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_fl_60ms_to_40ms_bandwidth_bps());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void FrameLengthController::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FrameLengthController*>(
      &from));
}

void FrameLengthController::MergeFrom(const FrameLengthController& from) {
  FrameLengthController* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.config.FrameLengthController)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.fl_increasing_packet_loss_fraction_ = from._impl_.fl_increasing_packet_loss_fraction_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.fl_decreasing_packet_loss_fraction_ = from._impl_.fl_decreasing_packet_loss_fraction_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.fl_20ms_to_60ms_bandwidth_bps_ = from._impl_.fl_20ms_to_60ms_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.fl_60ms_to_20ms_bandwidth_bps_ = from._impl_.fl_60ms_to_20ms_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.fl_60ms_to_120ms_bandwidth_bps_ = from._impl_.fl_60ms_to_120ms_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.fl_120ms_to_60ms_bandwidth_bps_ = from._impl_.fl_120ms_to_60ms_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.fl_increase_overhead_offset_ = from._impl_.fl_increase_overhead_offset_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.fl_decrease_overhead_offset_ = from._impl_.fl_decrease_overhead_offset_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.fl_20ms_to_40ms_bandwidth_bps_ = from._impl_.fl_20ms_to_40ms_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.fl_40ms_to_20ms_bandwidth_bps_ = from._impl_.fl_40ms_to_20ms_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.fl_40ms_to_60ms_bandwidth_bps_ = from._impl_.fl_40ms_to_60ms_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.fl_60ms_to_40ms_bandwidth_bps_ = from._impl_.fl_60ms_to_40ms_bandwidth_bps_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FrameLengthController::CopyFrom(const FrameLengthController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.config.FrameLengthController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FrameLengthController::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FrameLengthController::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FrameLengthController::InternalSwap(FrameLengthController* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameLengthController, _impl_.fl_60ms_to_40ms_bandwidth_bps_)
      + sizeof(FrameLengthController::_impl_.fl_60ms_to_40ms_bandwidth_bps_)
      - PROTOBUF_FIELD_OFFSET(FrameLengthController, _impl_.fl_increasing_packet_loss_fraction_)>(
          reinterpret_cast<char*>(&_impl_.fl_increasing_packet_loss_fraction_),
          reinterpret_cast<char*>(&other->_impl_.fl_increasing_packet_loss_fraction_));
}

std::string FrameLengthController::GetTypeName() const {
  return "webrtc.audio_network_adaptor.config.FrameLengthController";
}

// ===================================================================

class FrameLengthControllerV2::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameLengthControllerV2>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FrameLengthControllerV2, _impl_._has_bits_);
  static void set_has_min_payload_bitrate_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_use_slow_adaptation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FrameLengthControllerV2::FrameLengthControllerV2(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audio_network_adaptor.config.FrameLengthControllerV2)
}
FrameLengthControllerV2::FrameLengthControllerV2(
    ::google::protobuf::Arena* arena, const FrameLengthControllerV2& from)
    : FrameLengthControllerV2(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE FrameLengthControllerV2::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void FrameLengthControllerV2::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, min_payload_bitrate_bps_),
           0,
           offsetof(Impl_, use_slow_adaptation_) -
               offsetof(Impl_, min_payload_bitrate_bps_) +
               sizeof(Impl_::use_slow_adaptation_));
}
FrameLengthControllerV2::~FrameLengthControllerV2() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.config.FrameLengthControllerV2)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void FrameLengthControllerV2::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FrameLengthControllerV2::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.config.FrameLengthControllerV2)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.min_payload_bitrate_bps_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.use_slow_adaptation_) -
        reinterpret_cast<char*>(&_impl_.min_payload_bitrate_bps_)) + sizeof(_impl_.use_slow_adaptation_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FrameLengthControllerV2::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> FrameLengthControllerV2::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FrameLengthControllerV2, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_FrameLengthControllerV2_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // optional bool use_slow_adaptation = 2;
    {::_pbi::TcParser::FastV8S1,
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(FrameLengthControllerV2, _impl_.use_slow_adaptation_)}},
    // optional int32 min_payload_bitrate_bps = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(FrameLengthControllerV2, _impl_.min_payload_bitrate_bps_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 min_payload_bitrate_bps = 1;
    {PROTOBUF_FIELD_OFFSET(FrameLengthControllerV2, _impl_.min_payload_bitrate_bps_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional bool use_slow_adaptation = 2;
    {PROTOBUF_FIELD_OFFSET(FrameLengthControllerV2, _impl_.use_slow_adaptation_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* FrameLengthControllerV2::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audio_network_adaptor.config.FrameLengthControllerV2)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 min_payload_bitrate_bps = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_min_payload_bitrate_bps(), target);
  }

  // optional bool use_slow_adaptation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_use_slow_adaptation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audio_network_adaptor.config.FrameLengthControllerV2)
  return target;
}

::size_t FrameLengthControllerV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.config.FrameLengthControllerV2)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 min_payload_bitrate_bps = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_min_payload_bitrate_bps());
    }

    // optional bool use_slow_adaptation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void FrameLengthControllerV2::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FrameLengthControllerV2*>(
      &from));
}

void FrameLengthControllerV2::MergeFrom(const FrameLengthControllerV2& from) {
  FrameLengthControllerV2* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.config.FrameLengthControllerV2)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.min_payload_bitrate_bps_ = from._impl_.min_payload_bitrate_bps_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.use_slow_adaptation_ = from._impl_.use_slow_adaptation_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FrameLengthControllerV2::CopyFrom(const FrameLengthControllerV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.config.FrameLengthControllerV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FrameLengthControllerV2::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FrameLengthControllerV2::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FrameLengthControllerV2::InternalSwap(FrameLengthControllerV2* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameLengthControllerV2, _impl_.use_slow_adaptation_)
      + sizeof(FrameLengthControllerV2::_impl_.use_slow_adaptation_)
      - PROTOBUF_FIELD_OFFSET(FrameLengthControllerV2, _impl_.min_payload_bitrate_bps_)>(
          reinterpret_cast<char*>(&_impl_.min_payload_bitrate_bps_),
          reinterpret_cast<char*>(&other->_impl_.min_payload_bitrate_bps_));
}

std::string FrameLengthControllerV2::GetTypeName() const {
  return "webrtc.audio_network_adaptor.config.FrameLengthControllerV2";
}

// ===================================================================

class ChannelController::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelController>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ChannelController, _impl_._has_bits_);
  static void set_has_channel_1_to_2_bandwidth_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_2_to_1_bandwidth_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChannelController::ChannelController(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audio_network_adaptor.config.ChannelController)
}
ChannelController::ChannelController(
    ::google::protobuf::Arena* arena, const ChannelController& from)
    : ChannelController(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE ChannelController::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ChannelController::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, channel_1_to_2_bandwidth_bps_),
           0,
           offsetof(Impl_, channel_2_to_1_bandwidth_bps_) -
               offsetof(Impl_, channel_1_to_2_bandwidth_bps_) +
               sizeof(Impl_::channel_2_to_1_bandwidth_bps_));
}
ChannelController::~ChannelController() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.config.ChannelController)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void ChannelController::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ChannelController::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.config.ChannelController)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.channel_1_to_2_bandwidth_bps_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.channel_2_to_1_bandwidth_bps_) -
        reinterpret_cast<char*>(&_impl_.channel_1_to_2_bandwidth_bps_)) + sizeof(_impl_.channel_2_to_1_bandwidth_bps_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChannelController::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> ChannelController::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ChannelController, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ChannelController_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // optional int32 channel_2_to_1_bandwidth_bps = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(ChannelController, _impl_.channel_2_to_1_bandwidth_bps_)}},
    // optional int32 channel_1_to_2_bandwidth_bps = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(ChannelController, _impl_.channel_1_to_2_bandwidth_bps_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 channel_1_to_2_bandwidth_bps = 1;
    {PROTOBUF_FIELD_OFFSET(ChannelController, _impl_.channel_1_to_2_bandwidth_bps_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 channel_2_to_1_bandwidth_bps = 2;
    {PROTOBUF_FIELD_OFFSET(ChannelController, _impl_.channel_2_to_1_bandwidth_bps_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* ChannelController::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audio_network_adaptor.config.ChannelController)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 channel_1_to_2_bandwidth_bps = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_channel_1_to_2_bandwidth_bps(), target);
  }

  // optional int32 channel_2_to_1_bandwidth_bps = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_channel_2_to_1_bandwidth_bps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audio_network_adaptor.config.ChannelController)
  return target;
}

::size_t ChannelController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.config.ChannelController)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 channel_1_to_2_bandwidth_bps = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_channel_1_to_2_bandwidth_bps());
    }

    // optional int32 channel_2_to_1_bandwidth_bps = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_channel_2_to_1_bandwidth_bps());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void ChannelController::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChannelController*>(
      &from));
}

void ChannelController::MergeFrom(const ChannelController& from) {
  ChannelController* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.config.ChannelController)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.channel_1_to_2_bandwidth_bps_ = from._impl_.channel_1_to_2_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.channel_2_to_1_bandwidth_bps_ = from._impl_.channel_2_to_1_bandwidth_bps_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChannelController::CopyFrom(const ChannelController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.config.ChannelController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ChannelController::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ChannelController::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ChannelController::InternalSwap(ChannelController* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelController, _impl_.channel_2_to_1_bandwidth_bps_)
      + sizeof(ChannelController::_impl_.channel_2_to_1_bandwidth_bps_)
      - PROTOBUF_FIELD_OFFSET(ChannelController, _impl_.channel_1_to_2_bandwidth_bps_)>(
          reinterpret_cast<char*>(&_impl_.channel_1_to_2_bandwidth_bps_),
          reinterpret_cast<char*>(&other->_impl_.channel_1_to_2_bandwidth_bps_));
}

std::string ChannelController::GetTypeName() const {
  return "webrtc.audio_network_adaptor.config.ChannelController";
}

// ===================================================================

class DtxController::_Internal {
 public:
  using HasBits = decltype(std::declval<DtxController>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DtxController, _impl_._has_bits_);
  static void set_has_dtx_enabling_bandwidth_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dtx_disabling_bandwidth_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DtxController::DtxController(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audio_network_adaptor.config.DtxController)
}
DtxController::DtxController(
    ::google::protobuf::Arena* arena, const DtxController& from)
    : DtxController(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE DtxController::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void DtxController::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, dtx_enabling_bandwidth_bps_),
           0,
           offsetof(Impl_, dtx_disabling_bandwidth_bps_) -
               offsetof(Impl_, dtx_enabling_bandwidth_bps_) +
               sizeof(Impl_::dtx_disabling_bandwidth_bps_));
}
DtxController::~DtxController() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.config.DtxController)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void DtxController::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void DtxController::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.config.DtxController)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.dtx_enabling_bandwidth_bps_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.dtx_disabling_bandwidth_bps_) -
        reinterpret_cast<char*>(&_impl_.dtx_enabling_bandwidth_bps_)) + sizeof(_impl_.dtx_disabling_bandwidth_bps_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DtxController::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> DtxController::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DtxController, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_DtxController_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // optional int32 dtx_disabling_bandwidth_bps = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(DtxController, _impl_.dtx_disabling_bandwidth_bps_)}},
    // optional int32 dtx_enabling_bandwidth_bps = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(DtxController, _impl_.dtx_enabling_bandwidth_bps_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 dtx_enabling_bandwidth_bps = 1;
    {PROTOBUF_FIELD_OFFSET(DtxController, _impl_.dtx_enabling_bandwidth_bps_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 dtx_disabling_bandwidth_bps = 2;
    {PROTOBUF_FIELD_OFFSET(DtxController, _impl_.dtx_disabling_bandwidth_bps_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* DtxController::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audio_network_adaptor.config.DtxController)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 dtx_enabling_bandwidth_bps = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_dtx_enabling_bandwidth_bps(), target);
  }

  // optional int32 dtx_disabling_bandwidth_bps = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_dtx_disabling_bandwidth_bps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audio_network_adaptor.config.DtxController)
  return target;
}

::size_t DtxController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.config.DtxController)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 dtx_enabling_bandwidth_bps = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_dtx_enabling_bandwidth_bps());
    }

    // optional int32 dtx_disabling_bandwidth_bps = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_dtx_disabling_bandwidth_bps());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void DtxController::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DtxController*>(
      &from));
}

void DtxController::MergeFrom(const DtxController& from) {
  DtxController* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.config.DtxController)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.dtx_enabling_bandwidth_bps_ = from._impl_.dtx_enabling_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.dtx_disabling_bandwidth_bps_ = from._impl_.dtx_disabling_bandwidth_bps_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DtxController::CopyFrom(const DtxController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.config.DtxController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DtxController::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* DtxController::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void DtxController::InternalSwap(DtxController* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DtxController, _impl_.dtx_disabling_bandwidth_bps_)
      + sizeof(DtxController::_impl_.dtx_disabling_bandwidth_bps_)
      - PROTOBUF_FIELD_OFFSET(DtxController, _impl_.dtx_enabling_bandwidth_bps_)>(
          reinterpret_cast<char*>(&_impl_.dtx_enabling_bandwidth_bps_),
          reinterpret_cast<char*>(&other->_impl_.dtx_enabling_bandwidth_bps_));
}

std::string DtxController::GetTypeName() const {
  return "webrtc.audio_network_adaptor.config.DtxController";
}

// ===================================================================

class BitrateController::_Internal {
 public:
  using HasBits = decltype(std::declval<BitrateController>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BitrateController, _impl_._has_bits_);
  static void set_has_fl_increase_overhead_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fl_decrease_overhead_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BitrateController::BitrateController(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audio_network_adaptor.config.BitrateController)
}
BitrateController::BitrateController(
    ::google::protobuf::Arena* arena, const BitrateController& from)
    : BitrateController(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE BitrateController::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void BitrateController::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, fl_increase_overhead_offset_),
           0,
           offsetof(Impl_, fl_decrease_overhead_offset_) -
               offsetof(Impl_, fl_increase_overhead_offset_) +
               sizeof(Impl_::fl_decrease_overhead_offset_));
}
BitrateController::~BitrateController() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.config.BitrateController)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void BitrateController::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void BitrateController::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.config.BitrateController)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.fl_increase_overhead_offset_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.fl_decrease_overhead_offset_) -
        reinterpret_cast<char*>(&_impl_.fl_increase_overhead_offset_)) + sizeof(_impl_.fl_decrease_overhead_offset_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BitrateController::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> BitrateController::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BitrateController, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_BitrateController_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // optional int32 fl_decrease_overhead_offset = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(BitrateController, _impl_.fl_decrease_overhead_offset_)}},
    // optional int32 fl_increase_overhead_offset = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(BitrateController, _impl_.fl_increase_overhead_offset_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 fl_increase_overhead_offset = 1;
    {PROTOBUF_FIELD_OFFSET(BitrateController, _impl_.fl_increase_overhead_offset_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 fl_decrease_overhead_offset = 2;
    {PROTOBUF_FIELD_OFFSET(BitrateController, _impl_.fl_decrease_overhead_offset_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* BitrateController::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audio_network_adaptor.config.BitrateController)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 fl_increase_overhead_offset = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_fl_increase_overhead_offset(), target);
  }

  // optional int32 fl_decrease_overhead_offset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_fl_decrease_overhead_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audio_network_adaptor.config.BitrateController)
  return target;
}

::size_t BitrateController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.config.BitrateController)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 fl_increase_overhead_offset = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_fl_increase_overhead_offset());
    }

    // optional int32 fl_decrease_overhead_offset = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_fl_decrease_overhead_offset());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void BitrateController::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BitrateController*>(
      &from));
}

void BitrateController::MergeFrom(const BitrateController& from) {
  BitrateController* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.config.BitrateController)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.fl_increase_overhead_offset_ = from._impl_.fl_increase_overhead_offset_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.fl_decrease_overhead_offset_ = from._impl_.fl_decrease_overhead_offset_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BitrateController::CopyFrom(const BitrateController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.config.BitrateController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BitrateController::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* BitrateController::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void BitrateController::InternalSwap(BitrateController* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BitrateController, _impl_.fl_decrease_overhead_offset_)
      + sizeof(BitrateController::_impl_.fl_decrease_overhead_offset_)
      - PROTOBUF_FIELD_OFFSET(BitrateController, _impl_.fl_increase_overhead_offset_)>(
          reinterpret_cast<char*>(&_impl_.fl_increase_overhead_offset_),
          reinterpret_cast<char*>(&other->_impl_.fl_increase_overhead_offset_));
}

std::string BitrateController::GetTypeName() const {
  return "webrtc.audio_network_adaptor.config.BitrateController";
}

// ===================================================================

class Controller_ScoringPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<Controller_ScoringPoint>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Controller_ScoringPoint, _impl_._has_bits_);
  static void set_has_uplink_bandwidth_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uplink_packet_loss_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Controller_ScoringPoint::Controller_ScoringPoint(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audio_network_adaptor.config.Controller.ScoringPoint)
}
Controller_ScoringPoint::Controller_ScoringPoint(
    ::google::protobuf::Arena* arena, const Controller_ScoringPoint& from)
    : Controller_ScoringPoint(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Controller_ScoringPoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Controller_ScoringPoint::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, uplink_bandwidth_bps_),
           0,
           offsetof(Impl_, uplink_packet_loss_fraction_) -
               offsetof(Impl_, uplink_bandwidth_bps_) +
               sizeof(Impl_::uplink_packet_loss_fraction_));
}
Controller_ScoringPoint::~Controller_ScoringPoint() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.config.Controller.ScoringPoint)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Controller_ScoringPoint::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Controller_ScoringPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.config.Controller.ScoringPoint)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.uplink_bandwidth_bps_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.uplink_packet_loss_fraction_) -
        reinterpret_cast<char*>(&_impl_.uplink_bandwidth_bps_)) + sizeof(_impl_.uplink_packet_loss_fraction_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Controller_ScoringPoint::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Controller_ScoringPoint::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Controller_ScoringPoint, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Controller_ScoringPoint_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // optional float uplink_packet_loss_fraction = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(Controller_ScoringPoint, _impl_.uplink_packet_loss_fraction_)}},
    // optional int32 uplink_bandwidth_bps = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(Controller_ScoringPoint, _impl_.uplink_bandwidth_bps_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 uplink_bandwidth_bps = 1;
    {PROTOBUF_FIELD_OFFSET(Controller_ScoringPoint, _impl_.uplink_bandwidth_bps_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional float uplink_packet_loss_fraction = 2;
    {PROTOBUF_FIELD_OFFSET(Controller_ScoringPoint, _impl_.uplink_packet_loss_fraction_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Controller_ScoringPoint::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audio_network_adaptor.config.Controller.ScoringPoint)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 uplink_bandwidth_bps = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_uplink_bandwidth_bps(), target);
  }

  // optional float uplink_packet_loss_fraction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_uplink_packet_loss_fraction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audio_network_adaptor.config.Controller.ScoringPoint)
  return target;
}

::size_t Controller_ScoringPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.config.Controller.ScoringPoint)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 uplink_bandwidth_bps = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_uplink_bandwidth_bps());
    }

    // optional float uplink_packet_loss_fraction = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void Controller_ScoringPoint::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Controller_ScoringPoint*>(
      &from));
}

void Controller_ScoringPoint::MergeFrom(const Controller_ScoringPoint& from) {
  Controller_ScoringPoint* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.config.Controller.ScoringPoint)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.uplink_bandwidth_bps_ = from._impl_.uplink_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.uplink_packet_loss_fraction_ = from._impl_.uplink_packet_loss_fraction_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Controller_ScoringPoint::CopyFrom(const Controller_ScoringPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.config.Controller.ScoringPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Controller_ScoringPoint::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Controller_ScoringPoint::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Controller_ScoringPoint::InternalSwap(Controller_ScoringPoint* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Controller_ScoringPoint, _impl_.uplink_packet_loss_fraction_)
      + sizeof(Controller_ScoringPoint::_impl_.uplink_packet_loss_fraction_)
      - PROTOBUF_FIELD_OFFSET(Controller_ScoringPoint, _impl_.uplink_bandwidth_bps_)>(
          reinterpret_cast<char*>(&_impl_.uplink_bandwidth_bps_),
          reinterpret_cast<char*>(&other->_impl_.uplink_bandwidth_bps_));
}

std::string Controller_ScoringPoint::GetTypeName() const {
  return "webrtc.audio_network_adaptor.config.Controller.ScoringPoint";
}

// ===================================================================

class Controller::_Internal {
 public:
  using HasBits = decltype(std::declval<Controller>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Controller, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::webrtc::audio_network_adaptor::config::Controller, _impl_._oneof_case_);
  static const ::webrtc::audio_network_adaptor::config::Controller_ScoringPoint& scoring_point(const Controller* msg);
  static void set_has_scoring_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::webrtc::audio_network_adaptor::config::FecController& fec_controller(const Controller* msg);
  static const ::webrtc::audio_network_adaptor::config::FrameLengthController& frame_length_controller(const Controller* msg);
  static const ::webrtc::audio_network_adaptor::config::ChannelController& channel_controller(const Controller* msg);
  static const ::webrtc::audio_network_adaptor::config::DtxController& dtx_controller(const Controller* msg);
  static const ::webrtc::audio_network_adaptor::config::BitrateController& bitrate_controller(const Controller* msg);
  static const ::webrtc::audio_network_adaptor::config::FecControllerRplrBased& fec_controller_rplr_based(const Controller* msg);
  static const ::webrtc::audio_network_adaptor::config::FrameLengthControllerV2& frame_length_controller_v2(const Controller* msg);
};

const ::webrtc::audio_network_adaptor::config::Controller_ScoringPoint& Controller::_Internal::scoring_point(const Controller* msg) {
  return *msg->_impl_.scoring_point_;
}
const ::webrtc::audio_network_adaptor::config::FecController& Controller::_Internal::fec_controller(const Controller* msg) {
  return *msg->_impl_.controller_.fec_controller_;
}
const ::webrtc::audio_network_adaptor::config::FrameLengthController& Controller::_Internal::frame_length_controller(const Controller* msg) {
  return *msg->_impl_.controller_.frame_length_controller_;
}
const ::webrtc::audio_network_adaptor::config::ChannelController& Controller::_Internal::channel_controller(const Controller* msg) {
  return *msg->_impl_.controller_.channel_controller_;
}
const ::webrtc::audio_network_adaptor::config::DtxController& Controller::_Internal::dtx_controller(const Controller* msg) {
  return *msg->_impl_.controller_.dtx_controller_;
}
const ::webrtc::audio_network_adaptor::config::BitrateController& Controller::_Internal::bitrate_controller(const Controller* msg) {
  return *msg->_impl_.controller_.bitrate_controller_;
}
const ::webrtc::audio_network_adaptor::config::FecControllerRplrBased& Controller::_Internal::fec_controller_rplr_based(const Controller* msg) {
  return *msg->_impl_.controller_.fec_controller_rplr_based_;
}
const ::webrtc::audio_network_adaptor::config::FrameLengthControllerV2& Controller::_Internal::frame_length_controller_v2(const Controller* msg) {
  return *msg->_impl_.controller_.frame_length_controller_v2_;
}
void Controller::set_allocated_fec_controller(::webrtc::audio_network_adaptor::config::FecController* fec_controller) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_controller();
  if (fec_controller) {
    ::google::protobuf::Arena* submessage_arena = fec_controller->GetArena();
    if (message_arena != submessage_arena) {
      fec_controller = ::google::protobuf::internal::GetOwnedMessage(message_arena, fec_controller, submessage_arena);
    }
    set_has_fec_controller();
    _impl_.controller_.fec_controller_ = fec_controller;
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.audio_network_adaptor.config.Controller.fec_controller)
}
void Controller::set_allocated_frame_length_controller(::webrtc::audio_network_adaptor::config::FrameLengthController* frame_length_controller) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_controller();
  if (frame_length_controller) {
    ::google::protobuf::Arena* submessage_arena = frame_length_controller->GetArena();
    if (message_arena != submessage_arena) {
      frame_length_controller = ::google::protobuf::internal::GetOwnedMessage(message_arena, frame_length_controller, submessage_arena);
    }
    set_has_frame_length_controller();
    _impl_.controller_.frame_length_controller_ = frame_length_controller;
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.audio_network_adaptor.config.Controller.frame_length_controller)
}
void Controller::set_allocated_channel_controller(::webrtc::audio_network_adaptor::config::ChannelController* channel_controller) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_controller();
  if (channel_controller) {
    ::google::protobuf::Arena* submessage_arena = channel_controller->GetArena();
    if (message_arena != submessage_arena) {
      channel_controller = ::google::protobuf::internal::GetOwnedMessage(message_arena, channel_controller, submessage_arena);
    }
    set_has_channel_controller();
    _impl_.controller_.channel_controller_ = channel_controller;
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.audio_network_adaptor.config.Controller.channel_controller)
}
void Controller::set_allocated_dtx_controller(::webrtc::audio_network_adaptor::config::DtxController* dtx_controller) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_controller();
  if (dtx_controller) {
    ::google::protobuf::Arena* submessage_arena = dtx_controller->GetArena();
    if (message_arena != submessage_arena) {
      dtx_controller = ::google::protobuf::internal::GetOwnedMessage(message_arena, dtx_controller, submessage_arena);
    }
    set_has_dtx_controller();
    _impl_.controller_.dtx_controller_ = dtx_controller;
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.audio_network_adaptor.config.Controller.dtx_controller)
}
void Controller::set_allocated_bitrate_controller(::webrtc::audio_network_adaptor::config::BitrateController* bitrate_controller) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_controller();
  if (bitrate_controller) {
    ::google::protobuf::Arena* submessage_arena = bitrate_controller->GetArena();
    if (message_arena != submessage_arena) {
      bitrate_controller = ::google::protobuf::internal::GetOwnedMessage(message_arena, bitrate_controller, submessage_arena);
    }
    set_has_bitrate_controller();
    _impl_.controller_.bitrate_controller_ = bitrate_controller;
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.audio_network_adaptor.config.Controller.bitrate_controller)
}
void Controller::set_allocated_fec_controller_rplr_based(::webrtc::audio_network_adaptor::config::FecControllerRplrBased* fec_controller_rplr_based) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_controller();
  if (fec_controller_rplr_based) {
    ::google::protobuf::Arena* submessage_arena = fec_controller_rplr_based->GetArena();
    if (message_arena != submessage_arena) {
      fec_controller_rplr_based = ::google::protobuf::internal::GetOwnedMessage(message_arena, fec_controller_rplr_based, submessage_arena);
    }
    set_has_fec_controller_rplr_based();
    _impl_.controller_.fec_controller_rplr_based_ = fec_controller_rplr_based;
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.audio_network_adaptor.config.Controller.fec_controller_rplr_based)
}
void Controller::set_allocated_frame_length_controller_v2(::webrtc::audio_network_adaptor::config::FrameLengthControllerV2* frame_length_controller_v2) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_controller();
  if (frame_length_controller_v2) {
    ::google::protobuf::Arena* submessage_arena = frame_length_controller_v2->GetArena();
    if (message_arena != submessage_arena) {
      frame_length_controller_v2 = ::google::protobuf::internal::GetOwnedMessage(message_arena, frame_length_controller_v2, submessage_arena);
    }
    set_has_frame_length_controller_v2();
    _impl_.controller_.frame_length_controller_v2_ = frame_length_controller_v2;
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.audio_network_adaptor.config.Controller.frame_length_controller_v2)
}
Controller::Controller(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audio_network_adaptor.config.Controller)
}
inline PROTOBUF_NDEBUG_INLINE Controller::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        controller_{},
        _oneof_case_{from._oneof_case_[0]} {}

Controller::Controller(
    ::google::protobuf::Arena* arena,
    const Controller& from)
    : ::google::protobuf::MessageLite(arena) {
  Controller* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.scoring_point_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::webrtc::audio_network_adaptor::config::Controller_ScoringPoint>(arena, *from._impl_.scoring_point_)
                : nullptr;
  switch (controller_case()) {
    case CONTROLLER_NOT_SET:
      break;
      case kFecController:
        _impl_.controller_.fec_controller_ = CreateMaybeMessage<::webrtc::audio_network_adaptor::config::FecController>(arena, *from._impl_.controller_.fec_controller_);
        break;
      case kFrameLengthController:
        _impl_.controller_.frame_length_controller_ = CreateMaybeMessage<::webrtc::audio_network_adaptor::config::FrameLengthController>(arena, *from._impl_.controller_.frame_length_controller_);
        break;
      case kChannelController:
        _impl_.controller_.channel_controller_ = CreateMaybeMessage<::webrtc::audio_network_adaptor::config::ChannelController>(arena, *from._impl_.controller_.channel_controller_);
        break;
      case kDtxController:
        _impl_.controller_.dtx_controller_ = CreateMaybeMessage<::webrtc::audio_network_adaptor::config::DtxController>(arena, *from._impl_.controller_.dtx_controller_);
        break;
      case kBitrateController:
        _impl_.controller_.bitrate_controller_ = CreateMaybeMessage<::webrtc::audio_network_adaptor::config::BitrateController>(arena, *from._impl_.controller_.bitrate_controller_);
        break;
      case kFecControllerRplrBased:
        _impl_.controller_.fec_controller_rplr_based_ = CreateMaybeMessage<::webrtc::audio_network_adaptor::config::FecControllerRplrBased>(arena, *from._impl_.controller_.fec_controller_rplr_based_);
        break;
      case kFrameLengthControllerV2:
        _impl_.controller_.frame_length_controller_v2_ = CreateMaybeMessage<::webrtc::audio_network_adaptor::config::FrameLengthControllerV2>(arena, *from._impl_.controller_.frame_length_controller_v2_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.config.Controller)
}
inline PROTOBUF_NDEBUG_INLINE Controller::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        controller_{},
        _oneof_case_{} {}

inline void Controller::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.scoring_point_ = {};
}
Controller::~Controller() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.config.Controller)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Controller::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.scoring_point_;
  if (has_controller()) {
    clear_controller();
  }
  _impl_.~Impl_();
}

void Controller::clear_controller() {
// @@protoc_insertion_point(one_of_clear_start:webrtc.audio_network_adaptor.config.Controller)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (controller_case()) {
    case kFecController: {
      if (GetArena() == nullptr) {
        delete _impl_.controller_.fec_controller_;
      }
      break;
    }
    case kFrameLengthController: {
      if (GetArena() == nullptr) {
        delete _impl_.controller_.frame_length_controller_;
      }
      break;
    }
    case kChannelController: {
      if (GetArena() == nullptr) {
        delete _impl_.controller_.channel_controller_;
      }
      break;
    }
    case kDtxController: {
      if (GetArena() == nullptr) {
        delete _impl_.controller_.dtx_controller_;
      }
      break;
    }
    case kBitrateController: {
      if (GetArena() == nullptr) {
        delete _impl_.controller_.bitrate_controller_;
      }
      break;
    }
    case kFecControllerRplrBased: {
      if (GetArena() == nullptr) {
        delete _impl_.controller_.fec_controller_rplr_based_;
      }
      break;
    }
    case kFrameLengthControllerV2: {
      if (GetArena() == nullptr) {
        delete _impl_.controller_.frame_length_controller_v2_;
      }
      break;
    }
    case CONTROLLER_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = CONTROLLER_NOT_SET;
}


PROTOBUF_NOINLINE void Controller::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.config.Controller)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.scoring_point_ != nullptr);
    _impl_.scoring_point_->Clear();
  }
  clear_controller();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Controller::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 8, 8, 0, 2> Controller::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Controller, _impl_._has_bits_),
    0, // no _extensions_
    27, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4161798142,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    8,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Controller_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // optional .webrtc.audio_network_adaptor.config.Controller.ScoringPoint scoring_point = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Controller, _impl_.scoring_point_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .webrtc.audio_network_adaptor.config.Controller.ScoringPoint scoring_point = 1;
    {PROTOBUF_FIELD_OFFSET(Controller, _impl_.scoring_point_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .webrtc.audio_network_adaptor.config.FecController fec_controller = 21;
    {PROTOBUF_FIELD_OFFSET(Controller, _impl_.controller_.fec_controller_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .webrtc.audio_network_adaptor.config.FrameLengthController frame_length_controller = 22;
    {PROTOBUF_FIELD_OFFSET(Controller, _impl_.controller_.frame_length_controller_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .webrtc.audio_network_adaptor.config.ChannelController channel_controller = 23;
    {PROTOBUF_FIELD_OFFSET(Controller, _impl_.controller_.channel_controller_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .webrtc.audio_network_adaptor.config.DtxController dtx_controller = 24;
    {PROTOBUF_FIELD_OFFSET(Controller, _impl_.controller_.dtx_controller_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .webrtc.audio_network_adaptor.config.BitrateController bitrate_controller = 25;
    {PROTOBUF_FIELD_OFFSET(Controller, _impl_.controller_.bitrate_controller_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .webrtc.audio_network_adaptor.config.FecControllerRplrBased fec_controller_rplr_based = 26;
    {PROTOBUF_FIELD_OFFSET(Controller, _impl_.controller_.fec_controller_rplr_based_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .webrtc.audio_network_adaptor.config.FrameLengthControllerV2 frame_length_controller_v2 = 27;
    {PROTOBUF_FIELD_OFFSET(Controller, _impl_.controller_.frame_length_controller_v2_), _Internal::kOneofCaseOffset + 0, 7,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::webrtc::audio_network_adaptor::config::Controller_ScoringPoint>()},
    {::_pbi::TcParser::GetTable<::webrtc::audio_network_adaptor::config::FecController>()},
    {::_pbi::TcParser::GetTable<::webrtc::audio_network_adaptor::config::FrameLengthController>()},
    {::_pbi::TcParser::GetTable<::webrtc::audio_network_adaptor::config::ChannelController>()},
    {::_pbi::TcParser::GetTable<::webrtc::audio_network_adaptor::config::DtxController>()},
    {::_pbi::TcParser::GetTable<::webrtc::audio_network_adaptor::config::BitrateController>()},
    {::_pbi::TcParser::GetTable<::webrtc::audio_network_adaptor::config::FecControllerRplrBased>()},
    {::_pbi::TcParser::GetTable<::webrtc::audio_network_adaptor::config::FrameLengthControllerV2>()},
  }}, {{
  }},
};

::uint8_t* Controller::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audio_network_adaptor.config.Controller)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .webrtc.audio_network_adaptor.config.Controller.ScoringPoint scoring_point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::scoring_point(this),
        _Internal::scoring_point(this).GetCachedSize(), target, stream);
  }

  switch (controller_case()) {
    case kFecController: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          21, _Internal::fec_controller(this),
          _Internal::fec_controller(this).GetCachedSize(), target, stream);
      break;
    }
    case kFrameLengthController: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          22, _Internal::frame_length_controller(this),
          _Internal::frame_length_controller(this).GetCachedSize(), target, stream);
      break;
    }
    case kChannelController: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          23, _Internal::channel_controller(this),
          _Internal::channel_controller(this).GetCachedSize(), target, stream);
      break;
    }
    case kDtxController: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          24, _Internal::dtx_controller(this),
          _Internal::dtx_controller(this).GetCachedSize(), target, stream);
      break;
    }
    case kBitrateController: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          25, _Internal::bitrate_controller(this),
          _Internal::bitrate_controller(this).GetCachedSize(), target, stream);
      break;
    }
    case kFecControllerRplrBased: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          26, _Internal::fec_controller_rplr_based(this),
          _Internal::fec_controller_rplr_based(this).GetCachedSize(), target, stream);
      break;
    }
    case kFrameLengthControllerV2: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          27, _Internal::frame_length_controller_v2(this),
          _Internal::frame_length_controller_v2(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audio_network_adaptor.config.Controller)
  return target;
}

::size_t Controller::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.config.Controller)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .webrtc.audio_network_adaptor.config.Controller.ScoringPoint scoring_point = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.scoring_point_);
  }

  switch (controller_case()) {
    // .webrtc.audio_network_adaptor.config.FecController fec_controller = 21;
    case kFecController: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.controller_.fec_controller_);
      break;
    }
    // .webrtc.audio_network_adaptor.config.FrameLengthController frame_length_controller = 22;
    case kFrameLengthController: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.controller_.frame_length_controller_);
      break;
    }
    // .webrtc.audio_network_adaptor.config.ChannelController channel_controller = 23;
    case kChannelController: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.controller_.channel_controller_);
      break;
    }
    // .webrtc.audio_network_adaptor.config.DtxController dtx_controller = 24;
    case kDtxController: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.controller_.dtx_controller_);
      break;
    }
    // .webrtc.audio_network_adaptor.config.BitrateController bitrate_controller = 25;
    case kBitrateController: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.controller_.bitrate_controller_);
      break;
    }
    // .webrtc.audio_network_adaptor.config.FecControllerRplrBased fec_controller_rplr_based = 26;
    case kFecControllerRplrBased: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.controller_.fec_controller_rplr_based_);
      break;
    }
    // .webrtc.audio_network_adaptor.config.FrameLengthControllerV2 frame_length_controller_v2 = 27;
    case kFrameLengthControllerV2: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.controller_.frame_length_controller_v2_);
      break;
    }
    case CONTROLLER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void Controller::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Controller*>(
      &from));
}

void Controller::MergeFrom(const Controller& from) {
  Controller* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.config.Controller)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_scoring_point()->::webrtc::audio_network_adaptor::config::Controller_ScoringPoint::MergeFrom(
        from._internal_scoring_point());
  }
  switch (from.controller_case()) {
    case kFecController: {
      _this->_internal_mutable_fec_controller()->::webrtc::audio_network_adaptor::config::FecController::MergeFrom(
          from._internal_fec_controller());
      break;
    }
    case kFrameLengthController: {
      _this->_internal_mutable_frame_length_controller()->::webrtc::audio_network_adaptor::config::FrameLengthController::MergeFrom(
          from._internal_frame_length_controller());
      break;
    }
    case kChannelController: {
      _this->_internal_mutable_channel_controller()->::webrtc::audio_network_adaptor::config::ChannelController::MergeFrom(
          from._internal_channel_controller());
      break;
    }
    case kDtxController: {
      _this->_internal_mutable_dtx_controller()->::webrtc::audio_network_adaptor::config::DtxController::MergeFrom(
          from._internal_dtx_controller());
      break;
    }
    case kBitrateController: {
      _this->_internal_mutable_bitrate_controller()->::webrtc::audio_network_adaptor::config::BitrateController::MergeFrom(
          from._internal_bitrate_controller());
      break;
    }
    case kFecControllerRplrBased: {
      _this->_internal_mutable_fec_controller_rplr_based()->::webrtc::audio_network_adaptor::config::FecControllerRplrBased::MergeFrom(
          from._internal_fec_controller_rplr_based());
      break;
    }
    case kFrameLengthControllerV2: {
      _this->_internal_mutable_frame_length_controller_v2()->::webrtc::audio_network_adaptor::config::FrameLengthControllerV2::MergeFrom(
          from._internal_frame_length_controller_v2());
      break;
    }
    case CONTROLLER_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Controller::CopyFrom(const Controller& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.config.Controller)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Controller::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Controller::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Controller::InternalSwap(Controller* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.scoring_point_, other->_impl_.scoring_point_);
  swap(_impl_.controller_, other->_impl_.controller_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

std::string Controller::GetTypeName() const {
  return "webrtc.audio_network_adaptor.config.Controller";
}

// ===================================================================

class ControllerManager::_Internal {
 public:
  using HasBits = decltype(std::declval<ControllerManager>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ControllerManager, _impl_._has_bits_);
  static void set_has_min_reordering_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_reordering_squared_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ControllerManager::ControllerManager(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audio_network_adaptor.config.ControllerManager)
}
inline PROTOBUF_NDEBUG_INLINE ControllerManager::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        controllers_{visibility, arena, from.controllers_} {}

ControllerManager::ControllerManager(
    ::google::protobuf::Arena* arena,
    const ControllerManager& from)
    : ::google::protobuf::MessageLite(arena) {
  ControllerManager* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, min_reordering_time_ms_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, min_reordering_time_ms_),
           offsetof(Impl_, min_reordering_squared_distance_) -
               offsetof(Impl_, min_reordering_time_ms_) +
               sizeof(Impl_::min_reordering_squared_distance_));

  // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.config.ControllerManager)
}
inline PROTOBUF_NDEBUG_INLINE ControllerManager::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        controllers_{visibility, arena} {}

inline void ControllerManager::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, min_reordering_time_ms_),
           0,
           offsetof(Impl_, min_reordering_squared_distance_) -
               offsetof(Impl_, min_reordering_time_ms_) +
               sizeof(Impl_::min_reordering_squared_distance_));
}
ControllerManager::~ControllerManager() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.config.ControllerManager)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void ControllerManager::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ControllerManager::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.config.ControllerManager)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.controllers_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.min_reordering_time_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.min_reordering_squared_distance_) -
        reinterpret_cast<char*>(&_impl_.min_reordering_time_ms_)) + sizeof(_impl_.min_reordering_squared_distance_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ControllerManager::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> ControllerManager::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ControllerManager, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ControllerManager_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .webrtc.audio_network_adaptor.config.Controller controllers = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ControllerManager, _impl_.controllers_)}},
    // optional int32 min_reordering_time_ms = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 0, 0, PROTOBUF_FIELD_OFFSET(ControllerManager, _impl_.min_reordering_time_ms_)}},
    // optional float min_reordering_squared_distance = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 1, 0, PROTOBUF_FIELD_OFFSET(ControllerManager, _impl_.min_reordering_squared_distance_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .webrtc.audio_network_adaptor.config.Controller controllers = 1;
    {PROTOBUF_FIELD_OFFSET(ControllerManager, _impl_.controllers_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional int32 min_reordering_time_ms = 2;
    {PROTOBUF_FIELD_OFFSET(ControllerManager, _impl_.min_reordering_time_ms_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional float min_reordering_squared_distance = 3;
    {PROTOBUF_FIELD_OFFSET(ControllerManager, _impl_.min_reordering_squared_distance_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::webrtc::audio_network_adaptor::config::Controller>()},
  }}, {{
  }},
};

::uint8_t* ControllerManager::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audio_network_adaptor.config.ControllerManager)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .webrtc.audio_network_adaptor.config.Controller controllers = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_controllers_size()); i < n; i++) {
    const auto& repfield = this->_internal_controllers().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 min_reordering_time_ms = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_min_reordering_time_ms(), target);
  }

  // optional float min_reordering_squared_distance = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_min_reordering_squared_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audio_network_adaptor.config.ControllerManager)
  return target;
}

::size_t ControllerManager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.config.ControllerManager)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .webrtc.audio_network_adaptor.config.Controller controllers = 1;
  total_size += 1UL * this->_internal_controllers_size();
  for (const auto& msg : this->_internal_controllers()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 min_reordering_time_ms = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_min_reordering_time_ms());
    }

    // optional float min_reordering_squared_distance = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void ControllerManager::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ControllerManager*>(
      &from));
}

void ControllerManager::MergeFrom(const ControllerManager& from) {
  ControllerManager* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.config.ControllerManager)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_controllers()->MergeFrom(
      from._internal_controllers());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.min_reordering_time_ms_ = from._impl_.min_reordering_time_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.min_reordering_squared_distance_ = from._impl_.min_reordering_squared_distance_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ControllerManager::CopyFrom(const ControllerManager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.config.ControllerManager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ControllerManager::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ControllerManager::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ControllerManager::InternalSwap(ControllerManager* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.controllers_.InternalSwap(&other->_impl_.controllers_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControllerManager, _impl_.min_reordering_squared_distance_)
      + sizeof(ControllerManager::_impl_.min_reordering_squared_distance_)
      - PROTOBUF_FIELD_OFFSET(ControllerManager, _impl_.min_reordering_time_ms_)>(
          reinterpret_cast<char*>(&_impl_.min_reordering_time_ms_),
          reinterpret_cast<char*>(&other->_impl_.min_reordering_time_ms_));
}

std::string ControllerManager::GetTypeName() const {
  return "webrtc.audio_network_adaptor.config.ControllerManager";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace config
}  // namespace audio_network_adaptor
}  // namespace webrtc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
