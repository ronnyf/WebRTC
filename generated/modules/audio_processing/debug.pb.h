// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: debug.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_debug_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_debug_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_util.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_debug_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_debug_2eproto {
  static const ::uint32_t offsets[];
};
namespace webrtc {
namespace audioproc {
class Config;
struct ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class Event;
struct EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Init;
struct InitDefaultTypeInternal;
extern InitDefaultTypeInternal _Init_default_instance_;
class PlayoutAudioDeviceInfo;
struct PlayoutAudioDeviceInfoDefaultTypeInternal;
extern PlayoutAudioDeviceInfoDefaultTypeInternal _PlayoutAudioDeviceInfo_default_instance_;
class ReverseStream;
struct ReverseStreamDefaultTypeInternal;
extern ReverseStreamDefaultTypeInternal _ReverseStream_default_instance_;
class RuntimeSetting;
struct RuntimeSettingDefaultTypeInternal;
extern RuntimeSettingDefaultTypeInternal _RuntimeSetting_default_instance_;
class Stream;
struct StreamDefaultTypeInternal;
extern StreamDefaultTypeInternal _Stream_default_instance_;
}  // namespace audioproc
}  // namespace webrtc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace webrtc {
namespace audioproc {
enum Event_Type : int {
  Event_Type_INIT = 0,
  Event_Type_REVERSE_STREAM = 1,
  Event_Type_STREAM = 2,
  Event_Type_CONFIG = 3,
  Event_Type_UNKNOWN_EVENT = 4,
  Event_Type_RUNTIME_SETTING = 5,
};

bool Event_Type_IsValid(int value);
extern const uint32_t Event_Type_internal_data_[];
constexpr Event_Type Event_Type_Type_MIN = static_cast<Event_Type>(0);
constexpr Event_Type Event_Type_Type_MAX = static_cast<Event_Type>(5);
constexpr int Event_Type_Type_ARRAYSIZE = 5 + 1;
const std::string& Event_Type_Name(Event_Type value);
template <typename T>
const std::string& Event_Type_Name(T value) {
  static_assert(std::is_same<T, Event_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return Event_Type_Name(static_cast<Event_Type>(value));
}
const std::string& Event_Type_Name(Event_Type value);
bool Event_Type_Parse(absl::string_view name, Event_Type* value);

// ===================================================================


// -------------------------------------------------------------------

class Stream final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.audioproc.Stream) */ {
 public:
  inline Stream() : Stream(nullptr) {}
  ~Stream() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Stream(::google::protobuf::internal::ConstantInitialized);

  inline Stream(const Stream& from)
      : Stream(nullptr, from) {}
  Stream(Stream&& from) noexcept
    : Stream() {
    *this = ::std::move(from);
  }

  inline Stream& operator=(const Stream& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stream& operator=(Stream&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Stream& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stream* internal_default_instance() {
    return reinterpret_cast<const Stream*>(
               &_Stream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Stream& a, Stream& b) {
    a.Swap(&b);
  }
  inline void Swap(Stream* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stream* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stream* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stream>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const Stream& from);
  void MergeFrom(const Stream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Stream* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "webrtc.audioproc.Stream";
  }
  protected:
  explicit Stream(::google::protobuf::Arena* arena);
  Stream(::google::protobuf::Arena* arena, const Stream& from);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputChannelFieldNumber = 7,
    kOutputChannelFieldNumber = 8,
    kInputDataFieldNumber = 1,
    kOutputDataFieldNumber = 2,
    kDelayFieldNumber = 3,
    kDriftFieldNumber = 4,
    kAppliedInputVolumeFieldNumber = 5,
    kKeypressFieldNumber = 6,
  };
  // repeated bytes input_channel = 7;
  int input_channel_size() const;
  private:
  int _internal_input_channel_size() const;

  public:
  void clear_input_channel() ;
  const std::string& input_channel(int index) const;
  std::string* mutable_input_channel(int index);
  void set_input_channel(int index, const std::string& value);
  void set_input_channel(int index, std::string&& value);
  void set_input_channel(int index, const char* value);
  void set_input_channel(int index, const void* value, std::size_t size);
  void set_input_channel(int index, absl::string_view value);
  std::string* add_input_channel();
  void add_input_channel(const std::string& value);
  void add_input_channel(std::string&& value);
  void add_input_channel(const char* value);
  void add_input_channel(const void* value, std::size_t size);
  void add_input_channel(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& input_channel() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_input_channel();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_input_channel() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_input_channel();

  public:
  // repeated bytes output_channel = 8;
  int output_channel_size() const;
  private:
  int _internal_output_channel_size() const;

  public:
  void clear_output_channel() ;
  const std::string& output_channel(int index) const;
  std::string* mutable_output_channel(int index);
  void set_output_channel(int index, const std::string& value);
  void set_output_channel(int index, std::string&& value);
  void set_output_channel(int index, const char* value);
  void set_output_channel(int index, const void* value, std::size_t size);
  void set_output_channel(int index, absl::string_view value);
  std::string* add_output_channel();
  void add_output_channel(const std::string& value);
  void add_output_channel(std::string&& value);
  void add_output_channel(const char* value);
  void add_output_channel(const void* value, std::size_t size);
  void add_output_channel(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& output_channel() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_output_channel();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_output_channel() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_output_channel();

  public:
  // optional bytes input_data = 1;
  bool has_input_data() const;
  void clear_input_data() ;
  const std::string& input_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_input_data(Arg_&& arg, Args_... args);
  std::string* mutable_input_data();
  PROTOBUF_NODISCARD std::string* release_input_data();
  void set_allocated_input_data(std::string* value);

  private:
  const std::string& _internal_input_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_data(
      const std::string& value);
  std::string* _internal_mutable_input_data();

  public:
  // optional bytes output_data = 2;
  bool has_output_data() const;
  void clear_output_data() ;
  const std::string& output_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_output_data(Arg_&& arg, Args_... args);
  std::string* mutable_output_data();
  PROTOBUF_NODISCARD std::string* release_output_data();
  void set_allocated_output_data(std::string* value);

  private:
  const std::string& _internal_output_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_data(
      const std::string& value);
  std::string* _internal_mutable_output_data();

  public:
  // optional int32 delay = 3;
  bool has_delay() const;
  void clear_delay() ;
  ::int32_t delay() const;
  void set_delay(::int32_t value);

  private:
  ::int32_t _internal_delay() const;
  void _internal_set_delay(::int32_t value);

  public:
  // optional sint32 drift = 4;
  bool has_drift() const;
  void clear_drift() ;
  ::int32_t drift() const;
  void set_drift(::int32_t value);

  private:
  ::int32_t _internal_drift() const;
  void _internal_set_drift(::int32_t value);

  public:
  // optional int32 applied_input_volume = 5;
  bool has_applied_input_volume() const;
  void clear_applied_input_volume() ;
  ::int32_t applied_input_volume() const;
  void set_applied_input_volume(::int32_t value);

  private:
  ::int32_t _internal_applied_input_volume() const;
  void _internal_set_applied_input_volume(::int32_t value);

  public:
  // optional bool keypress = 6;
  bool has_keypress() const;
  void clear_keypress() ;
  bool keypress() const;
  void set_keypress(bool value);

  private:
  bool _internal_keypress() const;
  void _internal_set_keypress(bool value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.audioproc.Stream)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> input_channel_;
    ::google::protobuf::RepeatedPtrField<std::string> output_channel_;
    ::google::protobuf::internal::ArenaStringPtr input_data_;
    ::google::protobuf::internal::ArenaStringPtr output_data_;
    ::int32_t delay_;
    ::int32_t drift_;
    ::int32_t applied_input_volume_;
    bool keypress_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_2eproto;
};// -------------------------------------------------------------------

class ReverseStream final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.audioproc.ReverseStream) */ {
 public:
  inline ReverseStream() : ReverseStream(nullptr) {}
  ~ReverseStream() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ReverseStream(::google::protobuf::internal::ConstantInitialized);

  inline ReverseStream(const ReverseStream& from)
      : ReverseStream(nullptr, from) {}
  ReverseStream(ReverseStream&& from) noexcept
    : ReverseStream() {
    *this = ::std::move(from);
  }

  inline ReverseStream& operator=(const ReverseStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReverseStream& operator=(ReverseStream&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ReverseStream& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReverseStream* internal_default_instance() {
    return reinterpret_cast<const ReverseStream*>(
               &_ReverseStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReverseStream& a, ReverseStream& b) {
    a.Swap(&b);
  }
  inline void Swap(ReverseStream* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReverseStream* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReverseStream* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReverseStream>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const ReverseStream& from);
  void MergeFrom(const ReverseStream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ReverseStream* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "webrtc.audioproc.ReverseStream";
  }
  protected:
  explicit ReverseStream(::google::protobuf::Arena* arena);
  ReverseStream(::google::protobuf::Arena* arena, const ReverseStream& from);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelFieldNumber = 2,
    kDataFieldNumber = 1,
  };
  // repeated bytes channel = 2;
  int channel_size() const;
  private:
  int _internal_channel_size() const;

  public:
  void clear_channel() ;
  const std::string& channel(int index) const;
  std::string* mutable_channel(int index);
  void set_channel(int index, const std::string& value);
  void set_channel(int index, std::string&& value);
  void set_channel(int index, const char* value);
  void set_channel(int index, const void* value, std::size_t size);
  void set_channel(int index, absl::string_view value);
  std::string* add_channel();
  void add_channel(const std::string& value);
  void add_channel(std::string&& value);
  void add_channel(const char* value);
  void add_channel(const void* value, std::size_t size);
  void add_channel(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& channel() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_channel();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_channel() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_channel();

  public:
  // optional bytes data = 1;
  bool has_data() const;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:webrtc.audioproc.ReverseStream)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> channel_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_2eproto;
};// -------------------------------------------------------------------

class PlayoutAudioDeviceInfo final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.audioproc.PlayoutAudioDeviceInfo) */ {
 public:
  inline PlayoutAudioDeviceInfo() : PlayoutAudioDeviceInfo(nullptr) {}
  ~PlayoutAudioDeviceInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PlayoutAudioDeviceInfo(::google::protobuf::internal::ConstantInitialized);

  inline PlayoutAudioDeviceInfo(const PlayoutAudioDeviceInfo& from)
      : PlayoutAudioDeviceInfo(nullptr, from) {}
  PlayoutAudioDeviceInfo(PlayoutAudioDeviceInfo&& from) noexcept
    : PlayoutAudioDeviceInfo() {
    *this = ::std::move(from);
  }

  inline PlayoutAudioDeviceInfo& operator=(const PlayoutAudioDeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayoutAudioDeviceInfo& operator=(PlayoutAudioDeviceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PlayoutAudioDeviceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayoutAudioDeviceInfo* internal_default_instance() {
    return reinterpret_cast<const PlayoutAudioDeviceInfo*>(
               &_PlayoutAudioDeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PlayoutAudioDeviceInfo& a, PlayoutAudioDeviceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayoutAudioDeviceInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayoutAudioDeviceInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayoutAudioDeviceInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayoutAudioDeviceInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const PlayoutAudioDeviceInfo& from);
  void MergeFrom(const PlayoutAudioDeviceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PlayoutAudioDeviceInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "webrtc.audioproc.PlayoutAudioDeviceInfo";
  }
  protected:
  explicit PlayoutAudioDeviceInfo(::google::protobuf::Arena* arena);
  PlayoutAudioDeviceInfo(::google::protobuf::Arena* arena, const PlayoutAudioDeviceInfo& from);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kMaxVolumeFieldNumber = 2,
  };
  // optional int32 id = 1;
  bool has_id() const;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // optional int32 max_volume = 2;
  bool has_max_volume() const;
  void clear_max_volume() ;
  ::int32_t max_volume() const;
  void set_max_volume(::int32_t value);

  private:
  ::int32_t _internal_max_volume() const;
  void _internal_set_max_volume(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.audioproc.PlayoutAudioDeviceInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t id_;
    ::int32_t max_volume_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_2eproto;
};// -------------------------------------------------------------------

class Init final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.audioproc.Init) */ {
 public:
  inline Init() : Init(nullptr) {}
  ~Init() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Init(::google::protobuf::internal::ConstantInitialized);

  inline Init(const Init& from)
      : Init(nullptr, from) {}
  Init(Init&& from) noexcept
    : Init() {
    *this = ::std::move(from);
  }

  inline Init& operator=(const Init& from) {
    CopyFrom(from);
    return *this;
  }
  inline Init& operator=(Init&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Init& default_instance() {
    return *internal_default_instance();
  }
  static inline const Init* internal_default_instance() {
    return reinterpret_cast<const Init*>(
               &_Init_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Init& a, Init& b) {
    a.Swap(&b);
  }
  inline void Swap(Init* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Init* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Init* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Init>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const Init& from);
  void MergeFrom(const Init& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Init* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "webrtc.audioproc.Init";
  }
  protected:
  explicit Init(::google::protobuf::Arena* arena);
  Init(::google::protobuf::Arena* arena, const Init& from);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSampleRateFieldNumber = 1,
    kDeviceSampleRateFieldNumber = 2,
    kNumInputChannelsFieldNumber = 3,
    kNumOutputChannelsFieldNumber = 4,
    kNumReverseChannelsFieldNumber = 5,
    kReverseSampleRateFieldNumber = 6,
    kOutputSampleRateFieldNumber = 7,
    kReverseOutputSampleRateFieldNumber = 8,
    kTimestampMsFieldNumber = 10,
    kNumReverseOutputChannelsFieldNumber = 9,
  };
  // optional int32 sample_rate = 1;
  bool has_sample_rate() const;
  void clear_sample_rate() ;
  ::int32_t sample_rate() const;
  void set_sample_rate(::int32_t value);

  private:
  ::int32_t _internal_sample_rate() const;
  void _internal_set_sample_rate(::int32_t value);

  public:
  // optional int32 device_sample_rate = 2 [deprecated = true];
  [[deprecated]]  bool has_device_sample_rate() const;
  [[deprecated]]  void clear_device_sample_rate() ;
  [[deprecated]] ::int32_t device_sample_rate() const;
  [[deprecated]] void set_device_sample_rate(::int32_t value);

  private:
  ::int32_t _internal_device_sample_rate() const;
  void _internal_set_device_sample_rate(::int32_t value);

  public:
  // optional int32 num_input_channels = 3;
  bool has_num_input_channels() const;
  void clear_num_input_channels() ;
  ::int32_t num_input_channels() const;
  void set_num_input_channels(::int32_t value);

  private:
  ::int32_t _internal_num_input_channels() const;
  void _internal_set_num_input_channels(::int32_t value);

  public:
  // optional int32 num_output_channels = 4;
  bool has_num_output_channels() const;
  void clear_num_output_channels() ;
  ::int32_t num_output_channels() const;
  void set_num_output_channels(::int32_t value);

  private:
  ::int32_t _internal_num_output_channels() const;
  void _internal_set_num_output_channels(::int32_t value);

  public:
  // optional int32 num_reverse_channels = 5;
  bool has_num_reverse_channels() const;
  void clear_num_reverse_channels() ;
  ::int32_t num_reverse_channels() const;
  void set_num_reverse_channels(::int32_t value);

  private:
  ::int32_t _internal_num_reverse_channels() const;
  void _internal_set_num_reverse_channels(::int32_t value);

  public:
  // optional int32 reverse_sample_rate = 6;
  bool has_reverse_sample_rate() const;
  void clear_reverse_sample_rate() ;
  ::int32_t reverse_sample_rate() const;
  void set_reverse_sample_rate(::int32_t value);

  private:
  ::int32_t _internal_reverse_sample_rate() const;
  void _internal_set_reverse_sample_rate(::int32_t value);

  public:
  // optional int32 output_sample_rate = 7;
  bool has_output_sample_rate() const;
  void clear_output_sample_rate() ;
  ::int32_t output_sample_rate() const;
  void set_output_sample_rate(::int32_t value);

  private:
  ::int32_t _internal_output_sample_rate() const;
  void _internal_set_output_sample_rate(::int32_t value);

  public:
  // optional int32 reverse_output_sample_rate = 8;
  bool has_reverse_output_sample_rate() const;
  void clear_reverse_output_sample_rate() ;
  ::int32_t reverse_output_sample_rate() const;
  void set_reverse_output_sample_rate(::int32_t value);

  private:
  ::int32_t _internal_reverse_output_sample_rate() const;
  void _internal_set_reverse_output_sample_rate(::int32_t value);

  public:
  // optional int64 timestamp_ms = 10;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms() ;
  ::int64_t timestamp_ms() const;
  void set_timestamp_ms(::int64_t value);

  private:
  ::int64_t _internal_timestamp_ms() const;
  void _internal_set_timestamp_ms(::int64_t value);

  public:
  // optional int32 num_reverse_output_channels = 9;
  bool has_num_reverse_output_channels() const;
  void clear_num_reverse_output_channels() ;
  ::int32_t num_reverse_output_channels() const;
  void set_num_reverse_output_channels(::int32_t value);

  private:
  ::int32_t _internal_num_reverse_output_channels() const;
  void _internal_set_num_reverse_output_channels(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.audioproc.Init)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t sample_rate_;
    ::int32_t device_sample_rate_;
    ::int32_t num_input_channels_;
    ::int32_t num_output_channels_;
    ::int32_t num_reverse_channels_;
    ::int32_t reverse_sample_rate_;
    ::int32_t output_sample_rate_;
    ::int32_t reverse_output_sample_rate_;
    ::int64_t timestamp_ms_;
    ::int32_t num_reverse_output_channels_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_2eproto;
};// -------------------------------------------------------------------

class Config final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.audioproc.Config) */ {
 public:
  inline Config() : Config(nullptr) {}
  ~Config() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Config(::google::protobuf::internal::ConstantInitialized);

  inline Config(const Config& from)
      : Config(nullptr, from) {}
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Config* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Config* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "webrtc.audioproc.Config";
  }
  protected:
  explicit Config(::google::protobuf::Arena* arena);
  Config(::google::protobuf::Arena* arena, const Config& from);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExperimentsDescriptionFieldNumber = 17,
    kAecEnabledFieldNumber = 1,
    kAecDelayAgnosticEnabledFieldNumber = 2,
    kAecDriftCompensationEnabledFieldNumber = 3,
    kAecExtendedFilterEnabledFieldNumber = 4,
    kAecSuppressionLevelFieldNumber = 5,
    kAecmRoutingModeFieldNumber = 8,
    kAecmEnabledFieldNumber = 6,
    kAecmComfortNoiseEnabledFieldNumber = 7,
    kAgcEnabledFieldNumber = 9,
    kAgcLimiterEnabledFieldNumber = 11,
    kAgcModeFieldNumber = 10,
    kNoiseRobustAgcEnabledFieldNumber = 12,
    kHpfEnabledFieldNumber = 13,
    kNsEnabledFieldNumber = 14,
    kTransientSuppressionEnabledFieldNumber = 16,
    kNsLevelFieldNumber = 15,
    kPreAmplifierEnabledFieldNumber = 19,
    kPreAmplifierFixedGainFactorFieldNumber = 20,
  };
  // optional string experiments_description = 17;
  bool has_experiments_description() const;
  void clear_experiments_description() ;
  const std::string& experiments_description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_experiments_description(Arg_&& arg, Args_... args);
  std::string* mutable_experiments_description();
  PROTOBUF_NODISCARD std::string* release_experiments_description();
  void set_allocated_experiments_description(std::string* value);

  private:
  const std::string& _internal_experiments_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_experiments_description(
      const std::string& value);
  std::string* _internal_mutable_experiments_description();

  public:
  // optional bool aec_enabled = 1;
  bool has_aec_enabled() const;
  void clear_aec_enabled() ;
  bool aec_enabled() const;
  void set_aec_enabled(bool value);

  private:
  bool _internal_aec_enabled() const;
  void _internal_set_aec_enabled(bool value);

  public:
  // optional bool aec_delay_agnostic_enabled = 2;
  bool has_aec_delay_agnostic_enabled() const;
  void clear_aec_delay_agnostic_enabled() ;
  bool aec_delay_agnostic_enabled() const;
  void set_aec_delay_agnostic_enabled(bool value);

  private:
  bool _internal_aec_delay_agnostic_enabled() const;
  void _internal_set_aec_delay_agnostic_enabled(bool value);

  public:
  // optional bool aec_drift_compensation_enabled = 3;
  bool has_aec_drift_compensation_enabled() const;
  void clear_aec_drift_compensation_enabled() ;
  bool aec_drift_compensation_enabled() const;
  void set_aec_drift_compensation_enabled(bool value);

  private:
  bool _internal_aec_drift_compensation_enabled() const;
  void _internal_set_aec_drift_compensation_enabled(bool value);

  public:
  // optional bool aec_extended_filter_enabled = 4;
  bool has_aec_extended_filter_enabled() const;
  void clear_aec_extended_filter_enabled() ;
  bool aec_extended_filter_enabled() const;
  void set_aec_extended_filter_enabled(bool value);

  private:
  bool _internal_aec_extended_filter_enabled() const;
  void _internal_set_aec_extended_filter_enabled(bool value);

  public:
  // optional int32 aec_suppression_level = 5;
  bool has_aec_suppression_level() const;
  void clear_aec_suppression_level() ;
  ::int32_t aec_suppression_level() const;
  void set_aec_suppression_level(::int32_t value);

  private:
  ::int32_t _internal_aec_suppression_level() const;
  void _internal_set_aec_suppression_level(::int32_t value);

  public:
  // optional int32 aecm_routing_mode = 8 [deprecated = true];
  [[deprecated]]  bool has_aecm_routing_mode() const;
  [[deprecated]]  void clear_aecm_routing_mode() ;
  [[deprecated]] ::int32_t aecm_routing_mode() const;
  [[deprecated]] void set_aecm_routing_mode(::int32_t value);

  private:
  ::int32_t _internal_aecm_routing_mode() const;
  void _internal_set_aecm_routing_mode(::int32_t value);

  public:
  // optional bool aecm_enabled = 6;
  bool has_aecm_enabled() const;
  void clear_aecm_enabled() ;
  bool aecm_enabled() const;
  void set_aecm_enabled(bool value);

  private:
  bool _internal_aecm_enabled() const;
  void _internal_set_aecm_enabled(bool value);

  public:
  // optional bool aecm_comfort_noise_enabled = 7 [deprecated = true];
  [[deprecated]]  bool has_aecm_comfort_noise_enabled() const;
  [[deprecated]]  void clear_aecm_comfort_noise_enabled() ;
  [[deprecated]] bool aecm_comfort_noise_enabled() const;
  [[deprecated]] void set_aecm_comfort_noise_enabled(bool value);

  private:
  bool _internal_aecm_comfort_noise_enabled() const;
  void _internal_set_aecm_comfort_noise_enabled(bool value);

  public:
  // optional bool agc_enabled = 9;
  bool has_agc_enabled() const;
  void clear_agc_enabled() ;
  bool agc_enabled() const;
  void set_agc_enabled(bool value);

  private:
  bool _internal_agc_enabled() const;
  void _internal_set_agc_enabled(bool value);

  public:
  // optional bool agc_limiter_enabled = 11;
  bool has_agc_limiter_enabled() const;
  void clear_agc_limiter_enabled() ;
  bool agc_limiter_enabled() const;
  void set_agc_limiter_enabled(bool value);

  private:
  bool _internal_agc_limiter_enabled() const;
  void _internal_set_agc_limiter_enabled(bool value);

  public:
  // optional int32 agc_mode = 10;
  bool has_agc_mode() const;
  void clear_agc_mode() ;
  ::int32_t agc_mode() const;
  void set_agc_mode(::int32_t value);

  private:
  ::int32_t _internal_agc_mode() const;
  void _internal_set_agc_mode(::int32_t value);

  public:
  // optional bool noise_robust_agc_enabled = 12;
  bool has_noise_robust_agc_enabled() const;
  void clear_noise_robust_agc_enabled() ;
  bool noise_robust_agc_enabled() const;
  void set_noise_robust_agc_enabled(bool value);

  private:
  bool _internal_noise_robust_agc_enabled() const;
  void _internal_set_noise_robust_agc_enabled(bool value);

  public:
  // optional bool hpf_enabled = 13;
  bool has_hpf_enabled() const;
  void clear_hpf_enabled() ;
  bool hpf_enabled() const;
  void set_hpf_enabled(bool value);

  private:
  bool _internal_hpf_enabled() const;
  void _internal_set_hpf_enabled(bool value);

  public:
  // optional bool ns_enabled = 14;
  bool has_ns_enabled() const;
  void clear_ns_enabled() ;
  bool ns_enabled() const;
  void set_ns_enabled(bool value);

  private:
  bool _internal_ns_enabled() const;
  void _internal_set_ns_enabled(bool value);

  public:
  // optional bool transient_suppression_enabled = 16;
  bool has_transient_suppression_enabled() const;
  void clear_transient_suppression_enabled() ;
  bool transient_suppression_enabled() const;
  void set_transient_suppression_enabled(bool value);

  private:
  bool _internal_transient_suppression_enabled() const;
  void _internal_set_transient_suppression_enabled(bool value);

  public:
  // optional int32 ns_level = 15;
  bool has_ns_level() const;
  void clear_ns_level() ;
  ::int32_t ns_level() const;
  void set_ns_level(::int32_t value);

  private:
  ::int32_t _internal_ns_level() const;
  void _internal_set_ns_level(::int32_t value);

  public:
  // optional bool pre_amplifier_enabled = 19;
  bool has_pre_amplifier_enabled() const;
  void clear_pre_amplifier_enabled() ;
  bool pre_amplifier_enabled() const;
  void set_pre_amplifier_enabled(bool value);

  private:
  bool _internal_pre_amplifier_enabled() const;
  void _internal_set_pre_amplifier_enabled(bool value);

  public:
  // optional float pre_amplifier_fixed_gain_factor = 20;
  bool has_pre_amplifier_fixed_gain_factor() const;
  void clear_pre_amplifier_fixed_gain_factor() ;
  float pre_amplifier_fixed_gain_factor() const;
  void set_pre_amplifier_fixed_gain_factor(float value);

  private:
  float _internal_pre_amplifier_fixed_gain_factor() const;
  void _internal_set_pre_amplifier_fixed_gain_factor(float value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.audioproc.Config)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 19, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr experiments_description_;
    bool aec_enabled_;
    bool aec_delay_agnostic_enabled_;
    bool aec_drift_compensation_enabled_;
    bool aec_extended_filter_enabled_;
    ::int32_t aec_suppression_level_;
    ::int32_t aecm_routing_mode_;
    bool aecm_enabled_;
    bool aecm_comfort_noise_enabled_;
    bool agc_enabled_;
    bool agc_limiter_enabled_;
    ::int32_t agc_mode_;
    bool noise_robust_agc_enabled_;
    bool hpf_enabled_;
    bool ns_enabled_;
    bool transient_suppression_enabled_;
    ::int32_t ns_level_;
    bool pre_amplifier_enabled_;
    float pre_amplifier_fixed_gain_factor_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_2eproto;
};// -------------------------------------------------------------------

class RuntimeSetting final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.audioproc.RuntimeSetting) */ {
 public:
  inline RuntimeSetting() : RuntimeSetting(nullptr) {}
  ~RuntimeSetting() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RuntimeSetting(::google::protobuf::internal::ConstantInitialized);

  inline RuntimeSetting(const RuntimeSetting& from)
      : RuntimeSetting(nullptr, from) {}
  RuntimeSetting(RuntimeSetting&& from) noexcept
    : RuntimeSetting() {
    *this = ::std::move(from);
  }

  inline RuntimeSetting& operator=(const RuntimeSetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuntimeSetting& operator=(RuntimeSetting&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RuntimeSetting& default_instance() {
    return *internal_default_instance();
  }
  static inline const RuntimeSetting* internal_default_instance() {
    return reinterpret_cast<const RuntimeSetting*>(
               &_RuntimeSetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RuntimeSetting& a, RuntimeSetting& b) {
    a.Swap(&b);
  }
  inline void Swap(RuntimeSetting* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuntimeSetting* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RuntimeSetting* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RuntimeSetting>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const RuntimeSetting& from);
  void MergeFrom(const RuntimeSetting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RuntimeSetting* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "webrtc.audioproc.RuntimeSetting";
  }
  protected:
  explicit RuntimeSetting(::google::protobuf::Arena* arena);
  RuntimeSetting(::google::protobuf::Arena* arena, const RuntimeSetting& from);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayoutAudioDeviceChangeFieldNumber = 5,
    kCapturePreGainFieldNumber = 1,
    kCustomRenderProcessingSettingFieldNumber = 2,
    kCaptureFixedPostGainFieldNumber = 3,
    kPlayoutVolumeChangeFieldNumber = 4,
    kCaptureOutputUsedFieldNumber = 6,
    kCapturePostGainFieldNumber = 7,
  };
  // optional .webrtc.audioproc.PlayoutAudioDeviceInfo playout_audio_device_change = 5;
  bool has_playout_audio_device_change() const;
  void clear_playout_audio_device_change() ;
  const ::webrtc::audioproc::PlayoutAudioDeviceInfo& playout_audio_device_change() const;
  PROTOBUF_NODISCARD ::webrtc::audioproc::PlayoutAudioDeviceInfo* release_playout_audio_device_change();
  ::webrtc::audioproc::PlayoutAudioDeviceInfo* mutable_playout_audio_device_change();
  void set_allocated_playout_audio_device_change(::webrtc::audioproc::PlayoutAudioDeviceInfo* value);
  void unsafe_arena_set_allocated_playout_audio_device_change(::webrtc::audioproc::PlayoutAudioDeviceInfo* value);
  ::webrtc::audioproc::PlayoutAudioDeviceInfo* unsafe_arena_release_playout_audio_device_change();

  private:
  const ::webrtc::audioproc::PlayoutAudioDeviceInfo& _internal_playout_audio_device_change() const;
  ::webrtc::audioproc::PlayoutAudioDeviceInfo* _internal_mutable_playout_audio_device_change();

  public:
  // optional float capture_pre_gain = 1;
  bool has_capture_pre_gain() const;
  void clear_capture_pre_gain() ;
  float capture_pre_gain() const;
  void set_capture_pre_gain(float value);

  private:
  float _internal_capture_pre_gain() const;
  void _internal_set_capture_pre_gain(float value);

  public:
  // optional float custom_render_processing_setting = 2;
  bool has_custom_render_processing_setting() const;
  void clear_custom_render_processing_setting() ;
  float custom_render_processing_setting() const;
  void set_custom_render_processing_setting(float value);

  private:
  float _internal_custom_render_processing_setting() const;
  void _internal_set_custom_render_processing_setting(float value);

  public:
  // optional float capture_fixed_post_gain = 3;
  bool has_capture_fixed_post_gain() const;
  void clear_capture_fixed_post_gain() ;
  float capture_fixed_post_gain() const;
  void set_capture_fixed_post_gain(float value);

  private:
  float _internal_capture_fixed_post_gain() const;
  void _internal_set_capture_fixed_post_gain(float value);

  public:
  // optional int32 playout_volume_change = 4;
  bool has_playout_volume_change() const;
  void clear_playout_volume_change() ;
  ::int32_t playout_volume_change() const;
  void set_playout_volume_change(::int32_t value);

  private:
  ::int32_t _internal_playout_volume_change() const;
  void _internal_set_playout_volume_change(::int32_t value);

  public:
  // optional bool capture_output_used = 6;
  bool has_capture_output_used() const;
  void clear_capture_output_used() ;
  bool capture_output_used() const;
  void set_capture_output_used(bool value);

  private:
  bool _internal_capture_output_used() const;
  void _internal_set_capture_output_used(bool value);

  public:
  // optional float capture_post_gain = 7;
  bool has_capture_post_gain() const;
  void clear_capture_post_gain() ;
  float capture_post_gain() const;
  void set_capture_post_gain(float value);

  private:
  float _internal_capture_post_gain() const;
  void _internal_set_capture_post_gain(float value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.audioproc.RuntimeSetting)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::webrtc::audioproc::PlayoutAudioDeviceInfo* playout_audio_device_change_;
    float capture_pre_gain_;
    float custom_render_processing_setting_;
    float capture_fixed_post_gain_;
    ::int32_t playout_volume_change_;
    bool capture_output_used_;
    float capture_post_gain_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_2eproto;
};// -------------------------------------------------------------------

class Event final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.audioproc.Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  ~Event() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Event(::google::protobuf::internal::ConstantInitialized);

  inline Event(const Event& from)
      : Event(nullptr, from) {}
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Event& default_instance() {
    return *internal_default_instance();
  }
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Event* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Event* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "webrtc.audioproc.Event";
  }
  protected:
  explicit Event(::google::protobuf::Arena* arena);
  Event(::google::protobuf::Arena* arena, const Event& from);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  using Type = Event_Type;
  static constexpr Type INIT = Event_Type_INIT;
  static constexpr Type REVERSE_STREAM = Event_Type_REVERSE_STREAM;
  static constexpr Type STREAM = Event_Type_STREAM;
  static constexpr Type CONFIG = Event_Type_CONFIG;
  static constexpr Type UNKNOWN_EVENT = Event_Type_UNKNOWN_EVENT;
  static constexpr Type RUNTIME_SETTING = Event_Type_RUNTIME_SETTING;
  static inline bool Type_IsValid(int value) {
    return Event_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = Event_Type_Type_MIN;
  static constexpr Type Type_MAX = Event_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = Event_Type_Type_ARRAYSIZE;
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return Event_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return Event_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInitFieldNumber = 2,
    kReverseStreamFieldNumber = 3,
    kStreamFieldNumber = 4,
    kConfigFieldNumber = 5,
    kRuntimeSettingFieldNumber = 6,
    kTypeFieldNumber = 1,
  };
  // optional .webrtc.audioproc.Init init = 2;
  bool has_init() const;
  void clear_init() ;
  const ::webrtc::audioproc::Init& init() const;
  PROTOBUF_NODISCARD ::webrtc::audioproc::Init* release_init();
  ::webrtc::audioproc::Init* mutable_init();
  void set_allocated_init(::webrtc::audioproc::Init* value);
  void unsafe_arena_set_allocated_init(::webrtc::audioproc::Init* value);
  ::webrtc::audioproc::Init* unsafe_arena_release_init();

  private:
  const ::webrtc::audioproc::Init& _internal_init() const;
  ::webrtc::audioproc::Init* _internal_mutable_init();

  public:
  // optional .webrtc.audioproc.ReverseStream reverse_stream = 3;
  bool has_reverse_stream() const;
  void clear_reverse_stream() ;
  const ::webrtc::audioproc::ReverseStream& reverse_stream() const;
  PROTOBUF_NODISCARD ::webrtc::audioproc::ReverseStream* release_reverse_stream();
  ::webrtc::audioproc::ReverseStream* mutable_reverse_stream();
  void set_allocated_reverse_stream(::webrtc::audioproc::ReverseStream* value);
  void unsafe_arena_set_allocated_reverse_stream(::webrtc::audioproc::ReverseStream* value);
  ::webrtc::audioproc::ReverseStream* unsafe_arena_release_reverse_stream();

  private:
  const ::webrtc::audioproc::ReverseStream& _internal_reverse_stream() const;
  ::webrtc::audioproc::ReverseStream* _internal_mutable_reverse_stream();

  public:
  // optional .webrtc.audioproc.Stream stream = 4;
  bool has_stream() const;
  void clear_stream() ;
  const ::webrtc::audioproc::Stream& stream() const;
  PROTOBUF_NODISCARD ::webrtc::audioproc::Stream* release_stream();
  ::webrtc::audioproc::Stream* mutable_stream();
  void set_allocated_stream(::webrtc::audioproc::Stream* value);
  void unsafe_arena_set_allocated_stream(::webrtc::audioproc::Stream* value);
  ::webrtc::audioproc::Stream* unsafe_arena_release_stream();

  private:
  const ::webrtc::audioproc::Stream& _internal_stream() const;
  ::webrtc::audioproc::Stream* _internal_mutable_stream();

  public:
  // optional .webrtc.audioproc.Config config = 5;
  bool has_config() const;
  void clear_config() ;
  const ::webrtc::audioproc::Config& config() const;
  PROTOBUF_NODISCARD ::webrtc::audioproc::Config* release_config();
  ::webrtc::audioproc::Config* mutable_config();
  void set_allocated_config(::webrtc::audioproc::Config* value);
  void unsafe_arena_set_allocated_config(::webrtc::audioproc::Config* value);
  ::webrtc::audioproc::Config* unsafe_arena_release_config();

  private:
  const ::webrtc::audioproc::Config& _internal_config() const;
  ::webrtc::audioproc::Config* _internal_mutable_config();

  public:
  // optional .webrtc.audioproc.RuntimeSetting runtime_setting = 6;
  bool has_runtime_setting() const;
  void clear_runtime_setting() ;
  const ::webrtc::audioproc::RuntimeSetting& runtime_setting() const;
  PROTOBUF_NODISCARD ::webrtc::audioproc::RuntimeSetting* release_runtime_setting();
  ::webrtc::audioproc::RuntimeSetting* mutable_runtime_setting();
  void set_allocated_runtime_setting(::webrtc::audioproc::RuntimeSetting* value);
  void unsafe_arena_set_allocated_runtime_setting(::webrtc::audioproc::RuntimeSetting* value);
  ::webrtc::audioproc::RuntimeSetting* unsafe_arena_release_runtime_setting();

  private:
  const ::webrtc::audioproc::RuntimeSetting& _internal_runtime_setting() const;
  ::webrtc::audioproc::RuntimeSetting* _internal_mutable_runtime_setting();

  public:
  // required .webrtc.audioproc.Event.Type type = 1;
  bool has_type() const;
  void clear_type() ;
  ::webrtc::audioproc::Event_Type type() const;
  void set_type(::webrtc::audioproc::Event_Type value);

  private:
  ::webrtc::audioproc::Event_Type _internal_type() const;
  void _internal_set_type(::webrtc::audioproc::Event_Type value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.audioproc.Event)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 6,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::webrtc::audioproc::Init* init_;
    ::webrtc::audioproc::ReverseStream* reverse_stream_;
    ::webrtc::audioproc::Stream* stream_;
    ::webrtc::audioproc::Config* config_;
    ::webrtc::audioproc::RuntimeSetting* runtime_setting_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Init

// optional int32 sample_rate = 1;
inline bool Init::has_sample_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Init::clear_sample_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sample_rate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t Init::sample_rate() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Init.sample_rate)
  return _internal_sample_rate();
}
inline void Init::set_sample_rate(::int32_t value) {
  _internal_set_sample_rate(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Init.sample_rate)
}
inline ::int32_t Init::_internal_sample_rate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sample_rate_;
}
inline void Init::_internal_set_sample_rate(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sample_rate_ = value;
}

// optional int32 device_sample_rate = 2 [deprecated = true];
inline bool Init::has_device_sample_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Init::clear_device_sample_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.device_sample_rate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Init::device_sample_rate() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Init.device_sample_rate)
  return _internal_device_sample_rate();
}
inline void Init::set_device_sample_rate(::int32_t value) {
  _internal_set_device_sample_rate(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Init.device_sample_rate)
}
inline ::int32_t Init::_internal_device_sample_rate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.device_sample_rate_;
}
inline void Init::_internal_set_device_sample_rate(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.device_sample_rate_ = value;
}

// optional int32 num_input_channels = 3;
inline bool Init::has_num_input_channels() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Init::clear_num_input_channels() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_input_channels_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Init::num_input_channels() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Init.num_input_channels)
  return _internal_num_input_channels();
}
inline void Init::set_num_input_channels(::int32_t value) {
  _internal_set_num_input_channels(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Init.num_input_channels)
}
inline ::int32_t Init::_internal_num_input_channels() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_input_channels_;
}
inline void Init::_internal_set_num_input_channels(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.num_input_channels_ = value;
}

// optional int32 num_output_channels = 4;
inline bool Init::has_num_output_channels() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Init::clear_num_output_channels() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_output_channels_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t Init::num_output_channels() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Init.num_output_channels)
  return _internal_num_output_channels();
}
inline void Init::set_num_output_channels(::int32_t value) {
  _internal_set_num_output_channels(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Init.num_output_channels)
}
inline ::int32_t Init::_internal_num_output_channels() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_output_channels_;
}
inline void Init::_internal_set_num_output_channels(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.num_output_channels_ = value;
}

// optional int32 num_reverse_channels = 5;
inline bool Init::has_num_reverse_channels() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Init::clear_num_reverse_channels() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_reverse_channels_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t Init::num_reverse_channels() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Init.num_reverse_channels)
  return _internal_num_reverse_channels();
}
inline void Init::set_num_reverse_channels(::int32_t value) {
  _internal_set_num_reverse_channels(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Init.num_reverse_channels)
}
inline ::int32_t Init::_internal_num_reverse_channels() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_reverse_channels_;
}
inline void Init::_internal_set_num_reverse_channels(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.num_reverse_channels_ = value;
}

// optional int32 reverse_sample_rate = 6;
inline bool Init::has_reverse_sample_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Init::clear_reverse_sample_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.reverse_sample_rate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t Init::reverse_sample_rate() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Init.reverse_sample_rate)
  return _internal_reverse_sample_rate();
}
inline void Init::set_reverse_sample_rate(::int32_t value) {
  _internal_set_reverse_sample_rate(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Init.reverse_sample_rate)
}
inline ::int32_t Init::_internal_reverse_sample_rate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.reverse_sample_rate_;
}
inline void Init::_internal_set_reverse_sample_rate(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.reverse_sample_rate_ = value;
}

// optional int32 output_sample_rate = 7;
inline bool Init::has_output_sample_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Init::clear_output_sample_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.output_sample_rate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t Init::output_sample_rate() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Init.output_sample_rate)
  return _internal_output_sample_rate();
}
inline void Init::set_output_sample_rate(::int32_t value) {
  _internal_set_output_sample_rate(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Init.output_sample_rate)
}
inline ::int32_t Init::_internal_output_sample_rate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.output_sample_rate_;
}
inline void Init::_internal_set_output_sample_rate(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.output_sample_rate_ = value;
}

// optional int32 reverse_output_sample_rate = 8;
inline bool Init::has_reverse_output_sample_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Init::clear_reverse_output_sample_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.reverse_output_sample_rate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t Init::reverse_output_sample_rate() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Init.reverse_output_sample_rate)
  return _internal_reverse_output_sample_rate();
}
inline void Init::set_reverse_output_sample_rate(::int32_t value) {
  _internal_set_reverse_output_sample_rate(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Init.reverse_output_sample_rate)
}
inline ::int32_t Init::_internal_reverse_output_sample_rate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.reverse_output_sample_rate_;
}
inline void Init::_internal_set_reverse_output_sample_rate(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.reverse_output_sample_rate_ = value;
}

// optional int32 num_reverse_output_channels = 9;
inline bool Init::has_num_reverse_output_channels() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Init::clear_num_reverse_output_channels() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_reverse_output_channels_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int32_t Init::num_reverse_output_channels() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Init.num_reverse_output_channels)
  return _internal_num_reverse_output_channels();
}
inline void Init::set_num_reverse_output_channels(::int32_t value) {
  _internal_set_num_reverse_output_channels(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Init.num_reverse_output_channels)
}
inline ::int32_t Init::_internal_num_reverse_output_channels() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_reverse_output_channels_;
}
inline void Init::_internal_set_num_reverse_output_channels(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.num_reverse_output_channels_ = value;
}

// optional int64 timestamp_ms = 10;
inline bool Init::has_timestamp_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Init::clear_timestamp_ms() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_ms_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int64_t Init::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Init.timestamp_ms)
  return _internal_timestamp_ms();
}
inline void Init::set_timestamp_ms(::int64_t value) {
  _internal_set_timestamp_ms(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Init.timestamp_ms)
}
inline ::int64_t Init::_internal_timestamp_ms() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timestamp_ms_;
}
inline void Init::_internal_set_timestamp_ms(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.timestamp_ms_ = value;
}

// -------------------------------------------------------------------

// ReverseStream

// optional bytes data = 1;
inline bool ReverseStream::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ReverseStream::clear_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReverseStream::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.ReverseStream.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReverseStream::set_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:webrtc.audioproc.ReverseStream.data)
}
inline std::string* ReverseStream::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:webrtc.audioproc.ReverseStream.data)
  return _s;
}
inline const std::string& ReverseStream::_internal_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_.Get();
}
inline void ReverseStream::_internal_set_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.data_.Set(value, GetArena());
}
inline std::string* ReverseStream::_internal_mutable_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* ReverseStream::release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:webrtc.audioproc.ReverseStream.data)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.data_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ReverseStream::set_allocated_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:webrtc.audioproc.ReverseStream.data)
}

// repeated bytes channel = 2;
inline int ReverseStream::_internal_channel_size() const {
  return _internal_channel().size();
}
inline int ReverseStream::channel_size() const {
  return _internal_channel_size();
}
inline void ReverseStream::clear_channel() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.channel_.Clear();
}
inline std::string* ReverseStream::add_channel()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_channel()->Add();
  // @@protoc_insertion_point(field_add_mutable:webrtc.audioproc.ReverseStream.channel)
  return _s;
}
inline const std::string& ReverseStream::channel(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.ReverseStream.channel)
  return _internal_channel().Get(index);
}
inline std::string* ReverseStream::mutable_channel(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:webrtc.audioproc.ReverseStream.channel)
  return _internal_mutable_channel()->Mutable(index);
}
inline void ReverseStream::set_channel(int index, const std::string& value) {
  _internal_mutable_channel()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.ReverseStream.channel)
}
inline void ReverseStream::set_channel(int index, std::string&& value) {
  _internal_mutable_channel()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:webrtc.audioproc.ReverseStream.channel)
}
inline void ReverseStream::set_channel(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_channel()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:webrtc.audioproc.ReverseStream.channel)
}
inline void ReverseStream::set_channel(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_channel()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:webrtc.audioproc.ReverseStream.channel)
}
inline void ReverseStream::set_channel(int index, absl::string_view value) {
  _internal_mutable_channel()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:webrtc.audioproc.ReverseStream.channel)
}
inline void ReverseStream::add_channel(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_channel()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:webrtc.audioproc.ReverseStream.channel)
}
inline void ReverseStream::add_channel(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_channel()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:webrtc.audioproc.ReverseStream.channel)
}
inline void ReverseStream::add_channel(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_channel()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:webrtc.audioproc.ReverseStream.channel)
}
inline void ReverseStream::add_channel(const void* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_channel()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:webrtc.audioproc.ReverseStream.channel)
}
inline void ReverseStream::add_channel(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_channel()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:webrtc.audioproc.ReverseStream.channel)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ReverseStream::channel() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:webrtc.audioproc.ReverseStream.channel)
  return _internal_channel();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ReverseStream::mutable_channel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:webrtc.audioproc.ReverseStream.channel)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_channel();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ReverseStream::_internal_channel() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.channel_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ReverseStream::_internal_mutable_channel() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.channel_;
}

// -------------------------------------------------------------------

// Stream

// optional bytes input_data = 1;
inline bool Stream::has_input_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Stream::clear_input_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.input_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Stream::input_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Stream.input_data)
  return _internal_input_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Stream::set_input_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.input_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Stream.input_data)
}
inline std::string* Stream::mutable_input_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_input_data();
  // @@protoc_insertion_point(field_mutable:webrtc.audioproc.Stream.input_data)
  return _s;
}
inline const std::string& Stream::_internal_input_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.input_data_.Get();
}
inline void Stream::_internal_set_input_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.input_data_.Set(value, GetArena());
}
inline std::string* Stream::_internal_mutable_input_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.input_data_.Mutable( GetArena());
}
inline std::string* Stream::release_input_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:webrtc.audioproc.Stream.input_data)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.input_data_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.input_data_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Stream::set_allocated_input_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.input_data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.input_data_.IsDefault()) {
          _impl_.input_data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:webrtc.audioproc.Stream.input_data)
}

// optional bytes output_data = 2;
inline bool Stream::has_output_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Stream::clear_output_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.output_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Stream::output_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Stream.output_data)
  return _internal_output_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Stream::set_output_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.output_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Stream.output_data)
}
inline std::string* Stream::mutable_output_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_output_data();
  // @@protoc_insertion_point(field_mutable:webrtc.audioproc.Stream.output_data)
  return _s;
}
inline const std::string& Stream::_internal_output_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.output_data_.Get();
}
inline void Stream::_internal_set_output_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.output_data_.Set(value, GetArena());
}
inline std::string* Stream::_internal_mutable_output_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.output_data_.Mutable( GetArena());
}
inline std::string* Stream::release_output_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:webrtc.audioproc.Stream.output_data)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.output_data_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.output_data_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Stream::set_allocated_output_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.output_data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.output_data_.IsDefault()) {
          _impl_.output_data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:webrtc.audioproc.Stream.output_data)
}

// optional int32 delay = 3;
inline bool Stream::has_delay() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Stream::clear_delay() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.delay_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Stream::delay() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Stream.delay)
  return _internal_delay();
}
inline void Stream::set_delay(::int32_t value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Stream.delay)
}
inline ::int32_t Stream::_internal_delay() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.delay_;
}
inline void Stream::_internal_set_delay(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.delay_ = value;
}

// optional sint32 drift = 4;
inline bool Stream::has_drift() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Stream::clear_drift() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.drift_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t Stream::drift() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Stream.drift)
  return _internal_drift();
}
inline void Stream::set_drift(::int32_t value) {
  _internal_set_drift(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Stream.drift)
}
inline ::int32_t Stream::_internal_drift() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.drift_;
}
inline void Stream::_internal_set_drift(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.drift_ = value;
}

// optional int32 applied_input_volume = 5;
inline bool Stream::has_applied_input_volume() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Stream::clear_applied_input_volume() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.applied_input_volume_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t Stream::applied_input_volume() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Stream.applied_input_volume)
  return _internal_applied_input_volume();
}
inline void Stream::set_applied_input_volume(::int32_t value) {
  _internal_set_applied_input_volume(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Stream.applied_input_volume)
}
inline ::int32_t Stream::_internal_applied_input_volume() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.applied_input_volume_;
}
inline void Stream::_internal_set_applied_input_volume(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.applied_input_volume_ = value;
}

// optional bool keypress = 6;
inline bool Stream::has_keypress() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Stream::clear_keypress() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.keypress_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool Stream::keypress() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Stream.keypress)
  return _internal_keypress();
}
inline void Stream::set_keypress(bool value) {
  _internal_set_keypress(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Stream.keypress)
}
inline bool Stream::_internal_keypress() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.keypress_;
}
inline void Stream::_internal_set_keypress(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.keypress_ = value;
}

// repeated bytes input_channel = 7;
inline int Stream::_internal_input_channel_size() const {
  return _internal_input_channel().size();
}
inline int Stream::input_channel_size() const {
  return _internal_input_channel_size();
}
inline void Stream::clear_input_channel() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.input_channel_.Clear();
}
inline std::string* Stream::add_input_channel()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_input_channel()->Add();
  // @@protoc_insertion_point(field_add_mutable:webrtc.audioproc.Stream.input_channel)
  return _s;
}
inline const std::string& Stream::input_channel(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Stream.input_channel)
  return _internal_input_channel().Get(index);
}
inline std::string* Stream::mutable_input_channel(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:webrtc.audioproc.Stream.input_channel)
  return _internal_mutable_input_channel()->Mutable(index);
}
inline void Stream::set_input_channel(int index, const std::string& value) {
  _internal_mutable_input_channel()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Stream.input_channel)
}
inline void Stream::set_input_channel(int index, std::string&& value) {
  _internal_mutable_input_channel()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Stream.input_channel)
}
inline void Stream::set_input_channel(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_input_channel()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:webrtc.audioproc.Stream.input_channel)
}
inline void Stream::set_input_channel(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_input_channel()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:webrtc.audioproc.Stream.input_channel)
}
inline void Stream::set_input_channel(int index, absl::string_view value) {
  _internal_mutable_input_channel()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:webrtc.audioproc.Stream.input_channel)
}
inline void Stream::add_input_channel(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_input_channel()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:webrtc.audioproc.Stream.input_channel)
}
inline void Stream::add_input_channel(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_input_channel()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:webrtc.audioproc.Stream.input_channel)
}
inline void Stream::add_input_channel(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_input_channel()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:webrtc.audioproc.Stream.input_channel)
}
inline void Stream::add_input_channel(const void* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_input_channel()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:webrtc.audioproc.Stream.input_channel)
}
inline void Stream::add_input_channel(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_input_channel()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:webrtc.audioproc.Stream.input_channel)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Stream::input_channel() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:webrtc.audioproc.Stream.input_channel)
  return _internal_input_channel();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Stream::mutable_input_channel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:webrtc.audioproc.Stream.input_channel)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_input_channel();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Stream::_internal_input_channel() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.input_channel_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Stream::_internal_mutable_input_channel() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.input_channel_;
}

// repeated bytes output_channel = 8;
inline int Stream::_internal_output_channel_size() const {
  return _internal_output_channel().size();
}
inline int Stream::output_channel_size() const {
  return _internal_output_channel_size();
}
inline void Stream::clear_output_channel() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.output_channel_.Clear();
}
inline std::string* Stream::add_output_channel()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_output_channel()->Add();
  // @@protoc_insertion_point(field_add_mutable:webrtc.audioproc.Stream.output_channel)
  return _s;
}
inline const std::string& Stream::output_channel(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Stream.output_channel)
  return _internal_output_channel().Get(index);
}
inline std::string* Stream::mutable_output_channel(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:webrtc.audioproc.Stream.output_channel)
  return _internal_mutable_output_channel()->Mutable(index);
}
inline void Stream::set_output_channel(int index, const std::string& value) {
  _internal_mutable_output_channel()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Stream.output_channel)
}
inline void Stream::set_output_channel(int index, std::string&& value) {
  _internal_mutable_output_channel()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Stream.output_channel)
}
inline void Stream::set_output_channel(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_output_channel()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:webrtc.audioproc.Stream.output_channel)
}
inline void Stream::set_output_channel(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_output_channel()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:webrtc.audioproc.Stream.output_channel)
}
inline void Stream::set_output_channel(int index, absl::string_view value) {
  _internal_mutable_output_channel()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:webrtc.audioproc.Stream.output_channel)
}
inline void Stream::add_output_channel(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_output_channel()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:webrtc.audioproc.Stream.output_channel)
}
inline void Stream::add_output_channel(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_output_channel()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:webrtc.audioproc.Stream.output_channel)
}
inline void Stream::add_output_channel(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_output_channel()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:webrtc.audioproc.Stream.output_channel)
}
inline void Stream::add_output_channel(const void* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_output_channel()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:webrtc.audioproc.Stream.output_channel)
}
inline void Stream::add_output_channel(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_output_channel()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:webrtc.audioproc.Stream.output_channel)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Stream::output_channel() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:webrtc.audioproc.Stream.output_channel)
  return _internal_output_channel();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Stream::mutable_output_channel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:webrtc.audioproc.Stream.output_channel)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_output_channel();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Stream::_internal_output_channel() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.output_channel_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Stream::_internal_mutable_output_channel() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.output_channel_;
}

// -------------------------------------------------------------------

// Config

// optional bool aec_enabled = 1;
inline bool Config::has_aec_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Config::clear_aec_enabled() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.aec_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool Config::aec_enabled() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.aec_enabled)
  return _internal_aec_enabled();
}
inline void Config::set_aec_enabled(bool value) {
  _internal_set_aec_enabled(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.aec_enabled)
}
inline bool Config::_internal_aec_enabled() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.aec_enabled_;
}
inline void Config::_internal_set_aec_enabled(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.aec_enabled_ = value;
}

// optional bool aec_delay_agnostic_enabled = 2;
inline bool Config::has_aec_delay_agnostic_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Config::clear_aec_delay_agnostic_enabled() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.aec_delay_agnostic_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool Config::aec_delay_agnostic_enabled() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.aec_delay_agnostic_enabled)
  return _internal_aec_delay_agnostic_enabled();
}
inline void Config::set_aec_delay_agnostic_enabled(bool value) {
  _internal_set_aec_delay_agnostic_enabled(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.aec_delay_agnostic_enabled)
}
inline bool Config::_internal_aec_delay_agnostic_enabled() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.aec_delay_agnostic_enabled_;
}
inline void Config::_internal_set_aec_delay_agnostic_enabled(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.aec_delay_agnostic_enabled_ = value;
}

// optional bool aec_drift_compensation_enabled = 3;
inline bool Config::has_aec_drift_compensation_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Config::clear_aec_drift_compensation_enabled() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.aec_drift_compensation_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool Config::aec_drift_compensation_enabled() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.aec_drift_compensation_enabled)
  return _internal_aec_drift_compensation_enabled();
}
inline void Config::set_aec_drift_compensation_enabled(bool value) {
  _internal_set_aec_drift_compensation_enabled(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.aec_drift_compensation_enabled)
}
inline bool Config::_internal_aec_drift_compensation_enabled() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.aec_drift_compensation_enabled_;
}
inline void Config::_internal_set_aec_drift_compensation_enabled(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.aec_drift_compensation_enabled_ = value;
}

// optional bool aec_extended_filter_enabled = 4;
inline bool Config::has_aec_extended_filter_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Config::clear_aec_extended_filter_enabled() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.aec_extended_filter_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool Config::aec_extended_filter_enabled() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.aec_extended_filter_enabled)
  return _internal_aec_extended_filter_enabled();
}
inline void Config::set_aec_extended_filter_enabled(bool value) {
  _internal_set_aec_extended_filter_enabled(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.aec_extended_filter_enabled)
}
inline bool Config::_internal_aec_extended_filter_enabled() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.aec_extended_filter_enabled_;
}
inline void Config::_internal_set_aec_extended_filter_enabled(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.aec_extended_filter_enabled_ = value;
}

// optional int32 aec_suppression_level = 5;
inline bool Config::has_aec_suppression_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Config::clear_aec_suppression_level() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.aec_suppression_level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t Config::aec_suppression_level() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.aec_suppression_level)
  return _internal_aec_suppression_level();
}
inline void Config::set_aec_suppression_level(::int32_t value) {
  _internal_set_aec_suppression_level(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.aec_suppression_level)
}
inline ::int32_t Config::_internal_aec_suppression_level() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.aec_suppression_level_;
}
inline void Config::_internal_set_aec_suppression_level(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.aec_suppression_level_ = value;
}

// optional bool aecm_enabled = 6;
inline bool Config::has_aecm_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Config::clear_aecm_enabled() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.aecm_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool Config::aecm_enabled() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.aecm_enabled)
  return _internal_aecm_enabled();
}
inline void Config::set_aecm_enabled(bool value) {
  _internal_set_aecm_enabled(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.aecm_enabled)
}
inline bool Config::_internal_aecm_enabled() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.aecm_enabled_;
}
inline void Config::_internal_set_aecm_enabled(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.aecm_enabled_ = value;
}

// optional bool aecm_comfort_noise_enabled = 7 [deprecated = true];
inline bool Config::has_aecm_comfort_noise_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Config::clear_aecm_comfort_noise_enabled() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.aecm_comfort_noise_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool Config::aecm_comfort_noise_enabled() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.aecm_comfort_noise_enabled)
  return _internal_aecm_comfort_noise_enabled();
}
inline void Config::set_aecm_comfort_noise_enabled(bool value) {
  _internal_set_aecm_comfort_noise_enabled(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.aecm_comfort_noise_enabled)
}
inline bool Config::_internal_aecm_comfort_noise_enabled() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.aecm_comfort_noise_enabled_;
}
inline void Config::_internal_set_aecm_comfort_noise_enabled(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.aecm_comfort_noise_enabled_ = value;
}

// optional int32 aecm_routing_mode = 8 [deprecated = true];
inline bool Config::has_aecm_routing_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Config::clear_aecm_routing_mode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.aecm_routing_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t Config::aecm_routing_mode() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.aecm_routing_mode)
  return _internal_aecm_routing_mode();
}
inline void Config::set_aecm_routing_mode(::int32_t value) {
  _internal_set_aecm_routing_mode(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.aecm_routing_mode)
}
inline ::int32_t Config::_internal_aecm_routing_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.aecm_routing_mode_;
}
inline void Config::_internal_set_aecm_routing_mode(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.aecm_routing_mode_ = value;
}

// optional bool agc_enabled = 9;
inline bool Config::has_agc_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Config::clear_agc_enabled() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.agc_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool Config::agc_enabled() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.agc_enabled)
  return _internal_agc_enabled();
}
inline void Config::set_agc_enabled(bool value) {
  _internal_set_agc_enabled(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.agc_enabled)
}
inline bool Config::_internal_agc_enabled() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.agc_enabled_;
}
inline void Config::_internal_set_agc_enabled(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.agc_enabled_ = value;
}

// optional int32 agc_mode = 10;
inline bool Config::has_agc_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Config::clear_agc_mode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.agc_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::int32_t Config::agc_mode() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.agc_mode)
  return _internal_agc_mode();
}
inline void Config::set_agc_mode(::int32_t value) {
  _internal_set_agc_mode(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.agc_mode)
}
inline ::int32_t Config::_internal_agc_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.agc_mode_;
}
inline void Config::_internal_set_agc_mode(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.agc_mode_ = value;
}

// optional bool agc_limiter_enabled = 11;
inline bool Config::has_agc_limiter_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Config::clear_agc_limiter_enabled() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.agc_limiter_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool Config::agc_limiter_enabled() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.agc_limiter_enabled)
  return _internal_agc_limiter_enabled();
}
inline void Config::set_agc_limiter_enabled(bool value) {
  _internal_set_agc_limiter_enabled(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.agc_limiter_enabled)
}
inline bool Config::_internal_agc_limiter_enabled() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.agc_limiter_enabled_;
}
inline void Config::_internal_set_agc_limiter_enabled(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.agc_limiter_enabled_ = value;
}

// optional bool noise_robust_agc_enabled = 12;
inline bool Config::has_noise_robust_agc_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Config::clear_noise_robust_agc_enabled() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.noise_robust_agc_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool Config::noise_robust_agc_enabled() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.noise_robust_agc_enabled)
  return _internal_noise_robust_agc_enabled();
}
inline void Config::set_noise_robust_agc_enabled(bool value) {
  _internal_set_noise_robust_agc_enabled(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.noise_robust_agc_enabled)
}
inline bool Config::_internal_noise_robust_agc_enabled() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.noise_robust_agc_enabled_;
}
inline void Config::_internal_set_noise_robust_agc_enabled(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.noise_robust_agc_enabled_ = value;
}

// optional bool hpf_enabled = 13;
inline bool Config::has_hpf_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Config::clear_hpf_enabled() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.hpf_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool Config::hpf_enabled() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.hpf_enabled)
  return _internal_hpf_enabled();
}
inline void Config::set_hpf_enabled(bool value) {
  _internal_set_hpf_enabled(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.hpf_enabled)
}
inline bool Config::_internal_hpf_enabled() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.hpf_enabled_;
}
inline void Config::_internal_set_hpf_enabled(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.hpf_enabled_ = value;
}

// optional bool ns_enabled = 14;
inline bool Config::has_ns_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void Config::clear_ns_enabled() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ns_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool Config::ns_enabled() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.ns_enabled)
  return _internal_ns_enabled();
}
inline void Config::set_ns_enabled(bool value) {
  _internal_set_ns_enabled(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.ns_enabled)
}
inline bool Config::_internal_ns_enabled() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ns_enabled_;
}
inline void Config::_internal_set_ns_enabled(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.ns_enabled_ = value;
}

// optional int32 ns_level = 15;
inline bool Config::has_ns_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void Config::clear_ns_level() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ns_level_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::int32_t Config::ns_level() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.ns_level)
  return _internal_ns_level();
}
inline void Config::set_ns_level(::int32_t value) {
  _internal_set_ns_level(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.ns_level)
}
inline ::int32_t Config::_internal_ns_level() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ns_level_;
}
inline void Config::_internal_set_ns_level(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.ns_level_ = value;
}

// optional bool transient_suppression_enabled = 16;
inline bool Config::has_transient_suppression_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void Config::clear_transient_suppression_enabled() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.transient_suppression_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline bool Config::transient_suppression_enabled() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.transient_suppression_enabled)
  return _internal_transient_suppression_enabled();
}
inline void Config::set_transient_suppression_enabled(bool value) {
  _internal_set_transient_suppression_enabled(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.transient_suppression_enabled)
}
inline bool Config::_internal_transient_suppression_enabled() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.transient_suppression_enabled_;
}
inline void Config::_internal_set_transient_suppression_enabled(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.transient_suppression_enabled_ = value;
}

// optional string experiments_description = 17;
inline bool Config::has_experiments_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Config::clear_experiments_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.experiments_description_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Config::experiments_description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.experiments_description)
  return _internal_experiments_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Config::set_experiments_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.experiments_description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.experiments_description)
}
inline std::string* Config::mutable_experiments_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_experiments_description();
  // @@protoc_insertion_point(field_mutable:webrtc.audioproc.Config.experiments_description)
  return _s;
}
inline const std::string& Config::_internal_experiments_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.experiments_description_.Get();
}
inline void Config::_internal_set_experiments_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.experiments_description_.Set(value, GetArena());
}
inline std::string* Config::_internal_mutable_experiments_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.experiments_description_.Mutable( GetArena());
}
inline std::string* Config::release_experiments_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:webrtc.audioproc.Config.experiments_description)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.experiments_description_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.experiments_description_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Config::set_allocated_experiments_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.experiments_description_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.experiments_description_.IsDefault()) {
          _impl_.experiments_description_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:webrtc.audioproc.Config.experiments_description)
}

// optional bool pre_amplifier_enabled = 19;
inline bool Config::has_pre_amplifier_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void Config::clear_pre_amplifier_enabled() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pre_amplifier_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline bool Config::pre_amplifier_enabled() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.pre_amplifier_enabled)
  return _internal_pre_amplifier_enabled();
}
inline void Config::set_pre_amplifier_enabled(bool value) {
  _internal_set_pre_amplifier_enabled(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.pre_amplifier_enabled)
}
inline bool Config::_internal_pre_amplifier_enabled() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pre_amplifier_enabled_;
}
inline void Config::_internal_set_pre_amplifier_enabled(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.pre_amplifier_enabled_ = value;
}

// optional float pre_amplifier_fixed_gain_factor = 20;
inline bool Config::has_pre_amplifier_fixed_gain_factor() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void Config::clear_pre_amplifier_fixed_gain_factor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pre_amplifier_fixed_gain_factor_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline float Config::pre_amplifier_fixed_gain_factor() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.pre_amplifier_fixed_gain_factor)
  return _internal_pre_amplifier_fixed_gain_factor();
}
inline void Config::set_pre_amplifier_fixed_gain_factor(float value) {
  _internal_set_pre_amplifier_fixed_gain_factor(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.pre_amplifier_fixed_gain_factor)
}
inline float Config::_internal_pre_amplifier_fixed_gain_factor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pre_amplifier_fixed_gain_factor_;
}
inline void Config::_internal_set_pre_amplifier_fixed_gain_factor(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.pre_amplifier_fixed_gain_factor_ = value;
}

// -------------------------------------------------------------------

// PlayoutAudioDeviceInfo

// optional int32 id = 1;
inline bool PlayoutAudioDeviceInfo::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PlayoutAudioDeviceInfo::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t PlayoutAudioDeviceInfo::id() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.PlayoutAudioDeviceInfo.id)
  return _internal_id();
}
inline void PlayoutAudioDeviceInfo::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.PlayoutAudioDeviceInfo.id)
}
inline ::int32_t PlayoutAudioDeviceInfo::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void PlayoutAudioDeviceInfo::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_ = value;
}

// optional int32 max_volume = 2;
inline bool PlayoutAudioDeviceInfo::has_max_volume() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PlayoutAudioDeviceInfo::clear_max_volume() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_volume_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t PlayoutAudioDeviceInfo::max_volume() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.PlayoutAudioDeviceInfo.max_volume)
  return _internal_max_volume();
}
inline void PlayoutAudioDeviceInfo::set_max_volume(::int32_t value) {
  _internal_set_max_volume(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.PlayoutAudioDeviceInfo.max_volume)
}
inline ::int32_t PlayoutAudioDeviceInfo::_internal_max_volume() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_volume_;
}
inline void PlayoutAudioDeviceInfo::_internal_set_max_volume(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.max_volume_ = value;
}

// -------------------------------------------------------------------

// RuntimeSetting

// optional float capture_pre_gain = 1;
inline bool RuntimeSetting::has_capture_pre_gain() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void RuntimeSetting::clear_capture_pre_gain() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.capture_pre_gain_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float RuntimeSetting::capture_pre_gain() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.RuntimeSetting.capture_pre_gain)
  return _internal_capture_pre_gain();
}
inline void RuntimeSetting::set_capture_pre_gain(float value) {
  _internal_set_capture_pre_gain(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.RuntimeSetting.capture_pre_gain)
}
inline float RuntimeSetting::_internal_capture_pre_gain() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.capture_pre_gain_;
}
inline void RuntimeSetting::_internal_set_capture_pre_gain(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.capture_pre_gain_ = value;
}

// optional float custom_render_processing_setting = 2;
inline bool RuntimeSetting::has_custom_render_processing_setting() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void RuntimeSetting::clear_custom_render_processing_setting() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.custom_render_processing_setting_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float RuntimeSetting::custom_render_processing_setting() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.RuntimeSetting.custom_render_processing_setting)
  return _internal_custom_render_processing_setting();
}
inline void RuntimeSetting::set_custom_render_processing_setting(float value) {
  _internal_set_custom_render_processing_setting(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.RuntimeSetting.custom_render_processing_setting)
}
inline float RuntimeSetting::_internal_custom_render_processing_setting() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.custom_render_processing_setting_;
}
inline void RuntimeSetting::_internal_set_custom_render_processing_setting(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.custom_render_processing_setting_ = value;
}

// optional float capture_fixed_post_gain = 3;
inline bool RuntimeSetting::has_capture_fixed_post_gain() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void RuntimeSetting::clear_capture_fixed_post_gain() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.capture_fixed_post_gain_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float RuntimeSetting::capture_fixed_post_gain() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.RuntimeSetting.capture_fixed_post_gain)
  return _internal_capture_fixed_post_gain();
}
inline void RuntimeSetting::set_capture_fixed_post_gain(float value) {
  _internal_set_capture_fixed_post_gain(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.RuntimeSetting.capture_fixed_post_gain)
}
inline float RuntimeSetting::_internal_capture_fixed_post_gain() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.capture_fixed_post_gain_;
}
inline void RuntimeSetting::_internal_set_capture_fixed_post_gain(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.capture_fixed_post_gain_ = value;
}

// optional int32 playout_volume_change = 4;
inline bool RuntimeSetting::has_playout_volume_change() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void RuntimeSetting::clear_playout_volume_change() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.playout_volume_change_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t RuntimeSetting::playout_volume_change() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.RuntimeSetting.playout_volume_change)
  return _internal_playout_volume_change();
}
inline void RuntimeSetting::set_playout_volume_change(::int32_t value) {
  _internal_set_playout_volume_change(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.RuntimeSetting.playout_volume_change)
}
inline ::int32_t RuntimeSetting::_internal_playout_volume_change() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.playout_volume_change_;
}
inline void RuntimeSetting::_internal_set_playout_volume_change(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.playout_volume_change_ = value;
}

// optional .webrtc.audioproc.PlayoutAudioDeviceInfo playout_audio_device_change = 5;
inline bool RuntimeSetting::has_playout_audio_device_change() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.playout_audio_device_change_ != nullptr);
  return value;
}
inline void RuntimeSetting::clear_playout_audio_device_change() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.playout_audio_device_change_ != nullptr) _impl_.playout_audio_device_change_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::webrtc::audioproc::PlayoutAudioDeviceInfo& RuntimeSetting::_internal_playout_audio_device_change() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::webrtc::audioproc::PlayoutAudioDeviceInfo* p = _impl_.playout_audio_device_change_;
  return p != nullptr ? *p : reinterpret_cast<const ::webrtc::audioproc::PlayoutAudioDeviceInfo&>(::webrtc::audioproc::_PlayoutAudioDeviceInfo_default_instance_);
}
inline const ::webrtc::audioproc::PlayoutAudioDeviceInfo& RuntimeSetting::playout_audio_device_change() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.RuntimeSetting.playout_audio_device_change)
  return _internal_playout_audio_device_change();
}
inline void RuntimeSetting::unsafe_arena_set_allocated_playout_audio_device_change(::webrtc::audioproc::PlayoutAudioDeviceInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.playout_audio_device_change_);
  }
  _impl_.playout_audio_device_change_ = reinterpret_cast<::webrtc::audioproc::PlayoutAudioDeviceInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:webrtc.audioproc.RuntimeSetting.playout_audio_device_change)
}
inline ::webrtc::audioproc::PlayoutAudioDeviceInfo* RuntimeSetting::release_playout_audio_device_change() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::webrtc::audioproc::PlayoutAudioDeviceInfo* released = _impl_.playout_audio_device_change_;
  _impl_.playout_audio_device_change_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::webrtc::audioproc::PlayoutAudioDeviceInfo* RuntimeSetting::unsafe_arena_release_playout_audio_device_change() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:webrtc.audioproc.RuntimeSetting.playout_audio_device_change)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::webrtc::audioproc::PlayoutAudioDeviceInfo* temp = _impl_.playout_audio_device_change_;
  _impl_.playout_audio_device_change_ = nullptr;
  return temp;
}
inline ::webrtc::audioproc::PlayoutAudioDeviceInfo* RuntimeSetting::_internal_mutable_playout_audio_device_change() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.playout_audio_device_change_ == nullptr) {
    auto* p = CreateMaybeMessage<::webrtc::audioproc::PlayoutAudioDeviceInfo>(GetArena());
    _impl_.playout_audio_device_change_ = reinterpret_cast<::webrtc::audioproc::PlayoutAudioDeviceInfo*>(p);
  }
  return _impl_.playout_audio_device_change_;
}
inline ::webrtc::audioproc::PlayoutAudioDeviceInfo* RuntimeSetting::mutable_playout_audio_device_change() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::webrtc::audioproc::PlayoutAudioDeviceInfo* _msg = _internal_mutable_playout_audio_device_change();
  // @@protoc_insertion_point(field_mutable:webrtc.audioproc.RuntimeSetting.playout_audio_device_change)
  return _msg;
}
inline void RuntimeSetting::set_allocated_playout_audio_device_change(::webrtc::audioproc::PlayoutAudioDeviceInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::webrtc::audioproc::PlayoutAudioDeviceInfo*>(_impl_.playout_audio_device_change_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::webrtc::audioproc::PlayoutAudioDeviceInfo*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.playout_audio_device_change_ = reinterpret_cast<::webrtc::audioproc::PlayoutAudioDeviceInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:webrtc.audioproc.RuntimeSetting.playout_audio_device_change)
}

// optional bool capture_output_used = 6;
inline bool RuntimeSetting::has_capture_output_used() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void RuntimeSetting::clear_capture_output_used() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.capture_output_used_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool RuntimeSetting::capture_output_used() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.RuntimeSetting.capture_output_used)
  return _internal_capture_output_used();
}
inline void RuntimeSetting::set_capture_output_used(bool value) {
  _internal_set_capture_output_used(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.RuntimeSetting.capture_output_used)
}
inline bool RuntimeSetting::_internal_capture_output_used() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.capture_output_used_;
}
inline void RuntimeSetting::_internal_set_capture_output_used(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.capture_output_used_ = value;
}

// optional float capture_post_gain = 7;
inline bool RuntimeSetting::has_capture_post_gain() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void RuntimeSetting::clear_capture_post_gain() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.capture_post_gain_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float RuntimeSetting::capture_post_gain() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.RuntimeSetting.capture_post_gain)
  return _internal_capture_post_gain();
}
inline void RuntimeSetting::set_capture_post_gain(float value) {
  _internal_set_capture_post_gain(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.RuntimeSetting.capture_post_gain)
}
inline float RuntimeSetting::_internal_capture_post_gain() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.capture_post_gain_;
}
inline void RuntimeSetting::_internal_set_capture_post_gain(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.capture_post_gain_ = value;
}

// -------------------------------------------------------------------

// Event

// required .webrtc.audioproc.Event.Type type = 1;
inline bool Event::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Event::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::webrtc::audioproc::Event_Type Event::type() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Event.type)
  return _internal_type();
}
inline void Event::set_type(::webrtc::audioproc::Event_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Event.type)
}
inline ::webrtc::audioproc::Event_Type Event::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::webrtc::audioproc::Event_Type>(_impl_.type_);
}
inline void Event::_internal_set_type(::webrtc::audioproc::Event_Type value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::webrtc::audioproc::Event_Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.type_ = value;
}

// optional .webrtc.audioproc.Init init = 2;
inline bool Event::has_init() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.init_ != nullptr);
  return value;
}
inline void Event::clear_init() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.init_ != nullptr) _impl_.init_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::webrtc::audioproc::Init& Event::_internal_init() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::webrtc::audioproc::Init* p = _impl_.init_;
  return p != nullptr ? *p : reinterpret_cast<const ::webrtc::audioproc::Init&>(::webrtc::audioproc::_Init_default_instance_);
}
inline const ::webrtc::audioproc::Init& Event::init() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Event.init)
  return _internal_init();
}
inline void Event::unsafe_arena_set_allocated_init(::webrtc::audioproc::Init* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.init_);
  }
  _impl_.init_ = reinterpret_cast<::webrtc::audioproc::Init*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:webrtc.audioproc.Event.init)
}
inline ::webrtc::audioproc::Init* Event::release_init() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::webrtc::audioproc::Init* released = _impl_.init_;
  _impl_.init_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::webrtc::audioproc::Init* Event::unsafe_arena_release_init() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:webrtc.audioproc.Event.init)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::webrtc::audioproc::Init* temp = _impl_.init_;
  _impl_.init_ = nullptr;
  return temp;
}
inline ::webrtc::audioproc::Init* Event::_internal_mutable_init() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.init_ == nullptr) {
    auto* p = CreateMaybeMessage<::webrtc::audioproc::Init>(GetArena());
    _impl_.init_ = reinterpret_cast<::webrtc::audioproc::Init*>(p);
  }
  return _impl_.init_;
}
inline ::webrtc::audioproc::Init* Event::mutable_init() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::webrtc::audioproc::Init* _msg = _internal_mutable_init();
  // @@protoc_insertion_point(field_mutable:webrtc.audioproc.Event.init)
  return _msg;
}
inline void Event::set_allocated_init(::webrtc::audioproc::Init* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::webrtc::audioproc::Init*>(_impl_.init_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::webrtc::audioproc::Init*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.init_ = reinterpret_cast<::webrtc::audioproc::Init*>(value);
  // @@protoc_insertion_point(field_set_allocated:webrtc.audioproc.Event.init)
}

// optional .webrtc.audioproc.ReverseStream reverse_stream = 3;
inline bool Event::has_reverse_stream() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.reverse_stream_ != nullptr);
  return value;
}
inline void Event::clear_reverse_stream() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.reverse_stream_ != nullptr) _impl_.reverse_stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::webrtc::audioproc::ReverseStream& Event::_internal_reverse_stream() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::webrtc::audioproc::ReverseStream* p = _impl_.reverse_stream_;
  return p != nullptr ? *p : reinterpret_cast<const ::webrtc::audioproc::ReverseStream&>(::webrtc::audioproc::_ReverseStream_default_instance_);
}
inline const ::webrtc::audioproc::ReverseStream& Event::reverse_stream() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Event.reverse_stream)
  return _internal_reverse_stream();
}
inline void Event::unsafe_arena_set_allocated_reverse_stream(::webrtc::audioproc::ReverseStream* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.reverse_stream_);
  }
  _impl_.reverse_stream_ = reinterpret_cast<::webrtc::audioproc::ReverseStream*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:webrtc.audioproc.Event.reverse_stream)
}
inline ::webrtc::audioproc::ReverseStream* Event::release_reverse_stream() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::webrtc::audioproc::ReverseStream* released = _impl_.reverse_stream_;
  _impl_.reverse_stream_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::webrtc::audioproc::ReverseStream* Event::unsafe_arena_release_reverse_stream() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:webrtc.audioproc.Event.reverse_stream)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::webrtc::audioproc::ReverseStream* temp = _impl_.reverse_stream_;
  _impl_.reverse_stream_ = nullptr;
  return temp;
}
inline ::webrtc::audioproc::ReverseStream* Event::_internal_mutable_reverse_stream() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.reverse_stream_ == nullptr) {
    auto* p = CreateMaybeMessage<::webrtc::audioproc::ReverseStream>(GetArena());
    _impl_.reverse_stream_ = reinterpret_cast<::webrtc::audioproc::ReverseStream*>(p);
  }
  return _impl_.reverse_stream_;
}
inline ::webrtc::audioproc::ReverseStream* Event::mutable_reverse_stream() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::webrtc::audioproc::ReverseStream* _msg = _internal_mutable_reverse_stream();
  // @@protoc_insertion_point(field_mutable:webrtc.audioproc.Event.reverse_stream)
  return _msg;
}
inline void Event::set_allocated_reverse_stream(::webrtc::audioproc::ReverseStream* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::webrtc::audioproc::ReverseStream*>(_impl_.reverse_stream_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::webrtc::audioproc::ReverseStream*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.reverse_stream_ = reinterpret_cast<::webrtc::audioproc::ReverseStream*>(value);
  // @@protoc_insertion_point(field_set_allocated:webrtc.audioproc.Event.reverse_stream)
}

// optional .webrtc.audioproc.Stream stream = 4;
inline bool Event::has_stream() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stream_ != nullptr);
  return value;
}
inline void Event::clear_stream() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.stream_ != nullptr) _impl_.stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::webrtc::audioproc::Stream& Event::_internal_stream() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::webrtc::audioproc::Stream* p = _impl_.stream_;
  return p != nullptr ? *p : reinterpret_cast<const ::webrtc::audioproc::Stream&>(::webrtc::audioproc::_Stream_default_instance_);
}
inline const ::webrtc::audioproc::Stream& Event::stream() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Event.stream)
  return _internal_stream();
}
inline void Event::unsafe_arena_set_allocated_stream(::webrtc::audioproc::Stream* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.stream_);
  }
  _impl_.stream_ = reinterpret_cast<::webrtc::audioproc::Stream*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:webrtc.audioproc.Event.stream)
}
inline ::webrtc::audioproc::Stream* Event::release_stream() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::webrtc::audioproc::Stream* released = _impl_.stream_;
  _impl_.stream_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::webrtc::audioproc::Stream* Event::unsafe_arena_release_stream() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:webrtc.audioproc.Event.stream)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::webrtc::audioproc::Stream* temp = _impl_.stream_;
  _impl_.stream_ = nullptr;
  return temp;
}
inline ::webrtc::audioproc::Stream* Event::_internal_mutable_stream() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.stream_ == nullptr) {
    auto* p = CreateMaybeMessage<::webrtc::audioproc::Stream>(GetArena());
    _impl_.stream_ = reinterpret_cast<::webrtc::audioproc::Stream*>(p);
  }
  return _impl_.stream_;
}
inline ::webrtc::audioproc::Stream* Event::mutable_stream() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::webrtc::audioproc::Stream* _msg = _internal_mutable_stream();
  // @@protoc_insertion_point(field_mutable:webrtc.audioproc.Event.stream)
  return _msg;
}
inline void Event::set_allocated_stream(::webrtc::audioproc::Stream* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::webrtc::audioproc::Stream*>(_impl_.stream_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::webrtc::audioproc::Stream*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.stream_ = reinterpret_cast<::webrtc::audioproc::Stream*>(value);
  // @@protoc_insertion_point(field_set_allocated:webrtc.audioproc.Event.stream)
}

// optional .webrtc.audioproc.Config config = 5;
inline bool Event::has_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.config_ != nullptr);
  return value;
}
inline void Event::clear_config() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.config_ != nullptr) _impl_.config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::webrtc::audioproc::Config& Event::_internal_config() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::webrtc::audioproc::Config* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::webrtc::audioproc::Config&>(::webrtc::audioproc::_Config_default_instance_);
}
inline const ::webrtc::audioproc::Config& Event::config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Event.config)
  return _internal_config();
}
inline void Event::unsafe_arena_set_allocated_config(::webrtc::audioproc::Config* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = reinterpret_cast<::webrtc::audioproc::Config*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:webrtc.audioproc.Event.config)
}
inline ::webrtc::audioproc::Config* Event::release_config() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::webrtc::audioproc::Config* released = _impl_.config_;
  _impl_.config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::webrtc::audioproc::Config* Event::unsafe_arena_release_config() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:webrtc.audioproc.Event.config)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::webrtc::audioproc::Config* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::webrtc::audioproc::Config* Event::_internal_mutable_config() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.config_ == nullptr) {
    auto* p = CreateMaybeMessage<::webrtc::audioproc::Config>(GetArena());
    _impl_.config_ = reinterpret_cast<::webrtc::audioproc::Config*>(p);
  }
  return _impl_.config_;
}
inline ::webrtc::audioproc::Config* Event::mutable_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::webrtc::audioproc::Config* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:webrtc.audioproc.Event.config)
  return _msg;
}
inline void Event::set_allocated_config(::webrtc::audioproc::Config* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::webrtc::audioproc::Config*>(_impl_.config_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::webrtc::audioproc::Config*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.config_ = reinterpret_cast<::webrtc::audioproc::Config*>(value);
  // @@protoc_insertion_point(field_set_allocated:webrtc.audioproc.Event.config)
}

// optional .webrtc.audioproc.RuntimeSetting runtime_setting = 6;
inline bool Event::has_runtime_setting() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.runtime_setting_ != nullptr);
  return value;
}
inline void Event::clear_runtime_setting() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.runtime_setting_ != nullptr) _impl_.runtime_setting_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::webrtc::audioproc::RuntimeSetting& Event::_internal_runtime_setting() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::webrtc::audioproc::RuntimeSetting* p = _impl_.runtime_setting_;
  return p != nullptr ? *p : reinterpret_cast<const ::webrtc::audioproc::RuntimeSetting&>(::webrtc::audioproc::_RuntimeSetting_default_instance_);
}
inline const ::webrtc::audioproc::RuntimeSetting& Event::runtime_setting() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Event.runtime_setting)
  return _internal_runtime_setting();
}
inline void Event::unsafe_arena_set_allocated_runtime_setting(::webrtc::audioproc::RuntimeSetting* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.runtime_setting_);
  }
  _impl_.runtime_setting_ = reinterpret_cast<::webrtc::audioproc::RuntimeSetting*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:webrtc.audioproc.Event.runtime_setting)
}
inline ::webrtc::audioproc::RuntimeSetting* Event::release_runtime_setting() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::webrtc::audioproc::RuntimeSetting* released = _impl_.runtime_setting_;
  _impl_.runtime_setting_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::webrtc::audioproc::RuntimeSetting* Event::unsafe_arena_release_runtime_setting() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:webrtc.audioproc.Event.runtime_setting)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::webrtc::audioproc::RuntimeSetting* temp = _impl_.runtime_setting_;
  _impl_.runtime_setting_ = nullptr;
  return temp;
}
inline ::webrtc::audioproc::RuntimeSetting* Event::_internal_mutable_runtime_setting() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.runtime_setting_ == nullptr) {
    auto* p = CreateMaybeMessage<::webrtc::audioproc::RuntimeSetting>(GetArena());
    _impl_.runtime_setting_ = reinterpret_cast<::webrtc::audioproc::RuntimeSetting*>(p);
  }
  return _impl_.runtime_setting_;
}
inline ::webrtc::audioproc::RuntimeSetting* Event::mutable_runtime_setting() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::webrtc::audioproc::RuntimeSetting* _msg = _internal_mutable_runtime_setting();
  // @@protoc_insertion_point(field_mutable:webrtc.audioproc.Event.runtime_setting)
  return _msg;
}
inline void Event::set_allocated_runtime_setting(::webrtc::audioproc::RuntimeSetting* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::webrtc::audioproc::RuntimeSetting*>(_impl_.runtime_setting_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::webrtc::audioproc::RuntimeSetting*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.runtime_setting_ = reinterpret_cast<::webrtc::audioproc::RuntimeSetting*>(value);
  // @@protoc_insertion_point(field_set_allocated:webrtc.audioproc.Event.runtime_setting)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace audioproc
}  // namespace webrtc


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::webrtc::audioproc::Event_Type> : std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_debug_2eproto_2epb_2eh
