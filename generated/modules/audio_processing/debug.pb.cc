// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: debug.proto

#include "debug.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace webrtc {
namespace audioproc {

inline constexpr Stream::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        input_channel_{},
        output_channel_{},
        input_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        output_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        delay_{0},
        drift_{0},
        applied_input_volume_{0},
        keypress_{false} {}

template <typename>
PROTOBUF_CONSTEXPR Stream::Stream(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct StreamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamDefaultTypeInternal() {}
  union {
    Stream _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamDefaultTypeInternal _Stream_default_instance_;

inline constexpr ReverseStream::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        channel_{},
        data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR ReverseStream::ReverseStream(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ReverseStreamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReverseStreamDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReverseStreamDefaultTypeInternal() {}
  union {
    ReverseStream _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReverseStreamDefaultTypeInternal _ReverseStream_default_instance_;

inline constexpr PlayoutAudioDeviceInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        id_{0},
        max_volume_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PlayoutAudioDeviceInfo::PlayoutAudioDeviceInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PlayoutAudioDeviceInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayoutAudioDeviceInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayoutAudioDeviceInfoDefaultTypeInternal() {}
  union {
    PlayoutAudioDeviceInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayoutAudioDeviceInfoDefaultTypeInternal _PlayoutAudioDeviceInfo_default_instance_;

inline constexpr Init::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        sample_rate_{0},
        device_sample_rate_{0},
        num_input_channels_{0},
        num_output_channels_{0},
        num_reverse_channels_{0},
        reverse_sample_rate_{0},
        output_sample_rate_{0},
        reverse_output_sample_rate_{0},
        timestamp_ms_{::int64_t{0}},
        num_reverse_output_channels_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Init::Init(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct InitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InitDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InitDefaultTypeInternal() {}
  union {
    Init _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InitDefaultTypeInternal _Init_default_instance_;

inline constexpr Config::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        experiments_description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        aec_enabled_{false},
        aec_delay_agnostic_enabled_{false},
        aec_drift_compensation_enabled_{false},
        aec_extended_filter_enabled_{false},
        aec_suppression_level_{0},
        aecm_routing_mode_{0},
        aecm_enabled_{false},
        aecm_comfort_noise_enabled_{false},
        agc_enabled_{false},
        agc_limiter_enabled_{false},
        agc_mode_{0},
        noise_robust_agc_enabled_{false},
        hpf_enabled_{false},
        ns_enabled_{false},
        transient_suppression_enabled_{false},
        ns_level_{0},
        pre_amplifier_enabled_{false},
        pre_amplifier_fixed_gain_factor_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Config::Config(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigDefaultTypeInternal _Config_default_instance_;

inline constexpr RuntimeSetting::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        playout_audio_device_change_{nullptr},
        capture_pre_gain_{0},
        custom_render_processing_setting_{0},
        capture_fixed_post_gain_{0},
        playout_volume_change_{0},
        capture_output_used_{false},
        capture_post_gain_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RuntimeSetting::RuntimeSetting(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RuntimeSettingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RuntimeSettingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RuntimeSettingDefaultTypeInternal() {}
  union {
    RuntimeSetting _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RuntimeSettingDefaultTypeInternal _RuntimeSetting_default_instance_;

inline constexpr Event::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        init_{nullptr},
        reverse_stream_{nullptr},
        stream_{nullptr},
        config_{nullptr},
        runtime_setting_{nullptr},
        type_{static_cast< ::webrtc::audioproc::Event_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR Event::Event(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventDefaultTypeInternal() {}
  union {
    Event _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventDefaultTypeInternal _Event_default_instance_;
}  // namespace audioproc
}  // namespace webrtc
namespace webrtc {
namespace audioproc {
PROTOBUF_CONSTINIT const uint32_t Event_Type_internal_data_[] = {
    393216u, 0u, };
bool Event_Type_IsValid(int value) {
  return 0 <= value && value <= 5;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    Event_Type_strings[6] = {};

static const char Event_Type_names[] = {
    "CONFIG"
    "INIT"
    "REVERSE_STREAM"
    "RUNTIME_SETTING"
    "STREAM"
    "UNKNOWN_EVENT"
};

static const ::google::protobuf::internal::EnumEntry Event_Type_entries[] =
    {
        {{&Event_Type_names[0], 6}, 3},
        {{&Event_Type_names[6], 4}, 0},
        {{&Event_Type_names[10], 14}, 1},
        {{&Event_Type_names[24], 15}, 5},
        {{&Event_Type_names[39], 6}, 2},
        {{&Event_Type_names[45], 13}, 4},
};

static const int Event_Type_entries_by_number[] = {
    1,  // 0 -> INIT
    2,  // 1 -> REVERSE_STREAM
    4,  // 2 -> STREAM
    0,  // 3 -> CONFIG
    5,  // 4 -> UNKNOWN_EVENT
    3,  // 5 -> RUNTIME_SETTING
};

const std::string& Event_Type_Name(Event_Type value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          Event_Type_entries, Event_Type_entries_by_number,
          6, Event_Type_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      Event_Type_entries, Event_Type_entries_by_number, 6,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : Event_Type_strings[idx].get();
}

bool Event_Type_Parse(absl::string_view name, Event_Type* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      Event_Type_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<Event_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Event_Type Event::INIT;
constexpr Event_Type Event::REVERSE_STREAM;
constexpr Event_Type Event::STREAM;
constexpr Event_Type Event::CONFIG;
constexpr Event_Type Event::UNKNOWN_EVENT;
constexpr Event_Type Event::RUNTIME_SETTING;
constexpr Event_Type Event::Type_MIN;
constexpr Event_Type Event::Type_MAX;
constexpr int Event::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class Init::_Internal {
 public:
  using HasBits = decltype(std::declval<Init>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Init, _impl_._has_bits_);
  static void set_has_sample_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_device_sample_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_input_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_output_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_num_reverse_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_reverse_sample_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_output_sample_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_reverse_output_sample_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_num_reverse_output_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

Init::Init(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audioproc.Init)
}
Init::Init(
    ::google::protobuf::Arena* arena, const Init& from)
    : Init(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Init::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Init::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, sample_rate_),
           0,
           offsetof(Impl_, num_reverse_output_channels_) -
               offsetof(Impl_, sample_rate_) +
               sizeof(Impl_::num_reverse_output_channels_));
}
Init::~Init() {
  // @@protoc_insertion_point(destructor:webrtc.audioproc.Init)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Init::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Init::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audioproc.Init)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.sample_rate_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.reverse_output_sample_rate_) -
        reinterpret_cast<char*>(&_impl_.sample_rate_)) + sizeof(_impl_.reverse_output_sample_rate_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.timestamp_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.num_reverse_output_channels_) -
        reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.num_reverse_output_channels_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Init::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 0, 0, 2> Init::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Init, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Init_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional int32 sample_rate = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(Init, _impl_.sample_rate_)}},
    // optional int32 device_sample_rate = 2 [deprecated = true];
    {::_pbi::TcParser::FastV32S1,
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(Init, _impl_.device_sample_rate_)}},
    // optional int32 num_input_channels = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(Init, _impl_.num_input_channels_)}},
    // optional int32 num_output_channels = 4;
    {::_pbi::TcParser::FastV32S1,
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(Init, _impl_.num_output_channels_)}},
    // optional int32 num_reverse_channels = 5;
    {::_pbi::TcParser::FastV32S1,
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(Init, _impl_.num_reverse_channels_)}},
    // optional int32 reverse_sample_rate = 6;
    {::_pbi::TcParser::FastV32S1,
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(Init, _impl_.reverse_sample_rate_)}},
    // optional int32 output_sample_rate = 7;
    {::_pbi::TcParser::FastV32S1,
     {56, 6, 0, PROTOBUF_FIELD_OFFSET(Init, _impl_.output_sample_rate_)}},
    // optional int32 reverse_output_sample_rate = 8;
    {::_pbi::TcParser::FastV32S1,
     {64, 7, 0, PROTOBUF_FIELD_OFFSET(Init, _impl_.reverse_output_sample_rate_)}},
    // optional int32 num_reverse_output_channels = 9;
    {::_pbi::TcParser::FastV32S1,
     {72, 9, 0, PROTOBUF_FIELD_OFFSET(Init, _impl_.num_reverse_output_channels_)}},
    // optional int64 timestamp_ms = 10;
    {::_pbi::TcParser::FastV64S1,
     {80, 8, 0, PROTOBUF_FIELD_OFFSET(Init, _impl_.timestamp_ms_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 sample_rate = 1;
    {PROTOBUF_FIELD_OFFSET(Init, _impl_.sample_rate_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 device_sample_rate = 2 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(Init, _impl_.device_sample_rate_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 num_input_channels = 3;
    {PROTOBUF_FIELD_OFFSET(Init, _impl_.num_input_channels_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 num_output_channels = 4;
    {PROTOBUF_FIELD_OFFSET(Init, _impl_.num_output_channels_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 num_reverse_channels = 5;
    {PROTOBUF_FIELD_OFFSET(Init, _impl_.num_reverse_channels_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 reverse_sample_rate = 6;
    {PROTOBUF_FIELD_OFFSET(Init, _impl_.reverse_sample_rate_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 output_sample_rate = 7;
    {PROTOBUF_FIELD_OFFSET(Init, _impl_.output_sample_rate_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 reverse_output_sample_rate = 8;
    {PROTOBUF_FIELD_OFFSET(Init, _impl_.reverse_output_sample_rate_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 num_reverse_output_channels = 9;
    {PROTOBUF_FIELD_OFFSET(Init, _impl_.num_reverse_output_channels_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int64 timestamp_ms = 10;
    {PROTOBUF_FIELD_OFFSET(Init, _impl_.timestamp_ms_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Init::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audioproc.Init)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 sample_rate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_sample_rate(), target);
  }

  // optional int32 device_sample_rate = 2 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_device_sample_rate(), target);
  }

  // optional int32 num_input_channels = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_num_input_channels(), target);
  }

  // optional int32 num_output_channels = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_num_output_channels(), target);
  }

  // optional int32 num_reverse_channels = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_num_reverse_channels(), target);
  }

  // optional int32 reverse_sample_rate = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_reverse_sample_rate(), target);
  }

  // optional int32 output_sample_rate = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_output_sample_rate(), target);
  }

  // optional int32 reverse_output_sample_rate = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<8>(
            stream, this->_internal_reverse_output_sample_rate(), target);
  }

  // optional int32 num_reverse_output_channels = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<9>(
            stream, this->_internal_num_reverse_output_channels(), target);
  }

  // optional int64 timestamp_ms = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<10>(
            stream, this->_internal_timestamp_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audioproc.Init)
  return target;
}

::size_t Init::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audioproc.Init)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 sample_rate = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_sample_rate());
    }

    // optional int32 device_sample_rate = 2 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_device_sample_rate());
    }

    // optional int32 num_input_channels = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_num_input_channels());
    }

    // optional int32 num_output_channels = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_num_output_channels());
    }

    // optional int32 num_reverse_channels = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_num_reverse_channels());
    }

    // optional int32 reverse_sample_rate = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_reverse_sample_rate());
    }

    // optional int32 output_sample_rate = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_output_sample_rate());
    }

    // optional int32 reverse_output_sample_rate = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_reverse_output_sample_rate());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int64 timestamp_ms = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp_ms());
    }

    // optional int32 num_reverse_output_channels = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_num_reverse_output_channels());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void Init::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Init*>(
      &from));
}

void Init::MergeFrom(const Init& from) {
  Init* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audioproc.Init)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.sample_rate_ = from._impl_.sample_rate_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.device_sample_rate_ = from._impl_.device_sample_rate_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.num_input_channels_ = from._impl_.num_input_channels_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.num_output_channels_ = from._impl_.num_output_channels_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.num_reverse_channels_ = from._impl_.num_reverse_channels_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.reverse_sample_rate_ = from._impl_.reverse_sample_rate_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.output_sample_rate_ = from._impl_.output_sample_rate_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.reverse_output_sample_rate_ = from._impl_.reverse_output_sample_rate_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.timestamp_ms_ = from._impl_.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.num_reverse_output_channels_ = from._impl_.num_reverse_output_channels_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Init::CopyFrom(const Init& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audioproc.Init)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Init::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Init::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Init::InternalSwap(Init* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Init, _impl_.num_reverse_output_channels_)
      + sizeof(Init::_impl_.num_reverse_output_channels_)
      - PROTOBUF_FIELD_OFFSET(Init, _impl_.sample_rate_)>(
          reinterpret_cast<char*>(&_impl_.sample_rate_),
          reinterpret_cast<char*>(&other->_impl_.sample_rate_));
}

std::string Init::GetTypeName() const {
  return "webrtc.audioproc.Init";
}

// ===================================================================

class ReverseStream::_Internal {
 public:
  using HasBits = decltype(std::declval<ReverseStream>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ReverseStream, _impl_._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ReverseStream::ReverseStream(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audioproc.ReverseStream)
}
inline PROTOBUF_NDEBUG_INLINE ReverseStream::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        channel_{visibility, arena, from.channel_},
        data_(arena, from.data_) {}

ReverseStream::ReverseStream(
    ::google::protobuf::Arena* arena,
    const ReverseStream& from)
    : ::google::protobuf::MessageLite(arena) {
  ReverseStream* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:webrtc.audioproc.ReverseStream)
}
inline PROTOBUF_NDEBUG_INLINE ReverseStream::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        channel_{visibility, arena},
        data_(arena) {}

inline void ReverseStream::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ReverseStream::~ReverseStream() {
  // @@protoc_insertion_point(destructor:webrtc.audioproc.ReverseStream)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void ReverseStream::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.data_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ReverseStream::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audioproc.ReverseStream)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.data_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ReverseStream::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> ReverseStream::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ReverseStream, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ReverseStream_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // repeated bytes channel = 2;
    {::_pbi::TcParser::FastBR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ReverseStream, _impl_.channel_)}},
    // optional bytes data = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ReverseStream, _impl_.data_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bytes data = 1;
    {PROTOBUF_FIELD_OFFSET(ReverseStream, _impl_.data_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // repeated bytes channel = 2;
    {PROTOBUF_FIELD_OFFSET(ReverseStream, _impl_.channel_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kBytes | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* ReverseStream::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audioproc.ReverseStream)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // repeated bytes channel = 2;
  for (int i = 0, n = this->_internal_channel_size(); i < n; ++i) {
    const auto& s = this->_internal_channel().Get(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audioproc.ReverseStream)
  return target;
}

::size_t ReverseStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audioproc.ReverseStream)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes channel = 2;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_channel().size());
  for (int i = 0, n = _internal_channel().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
        _internal_channel().Get(i));
  }
  // optional bytes data = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void ReverseStream::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ReverseStream*>(
      &from));
}

void ReverseStream::MergeFrom(const ReverseStream& from) {
  ReverseStream* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audioproc.ReverseStream)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_channel()->MergeFrom(from._internal_channel());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ReverseStream::CopyFrom(const ReverseStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audioproc.ReverseStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ReverseStream::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ReverseStream::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ReverseStream::InternalSwap(ReverseStream* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.channel_.InternalSwap(&other->_impl_.channel_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, &other->_impl_.data_, arena);
}

std::string ReverseStream::GetTypeName() const {
  return "webrtc.audioproc.ReverseStream";
}

// ===================================================================

class Stream::_Internal {
 public:
  using HasBits = decltype(std::declval<Stream>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Stream, _impl_._has_bits_);
  static void set_has_input_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_output_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_drift(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_applied_input_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_keypress(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Stream::Stream(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audioproc.Stream)
}
inline PROTOBUF_NDEBUG_INLINE Stream::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        input_channel_{visibility, arena, from.input_channel_},
        output_channel_{visibility, arena, from.output_channel_},
        input_data_(arena, from.input_data_),
        output_data_(arena, from.output_data_) {}

Stream::Stream(
    ::google::protobuf::Arena* arena,
    const Stream& from)
    : ::google::protobuf::MessageLite(arena) {
  Stream* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, delay_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, delay_),
           offsetof(Impl_, keypress_) -
               offsetof(Impl_, delay_) +
               sizeof(Impl_::keypress_));

  // @@protoc_insertion_point(copy_constructor:webrtc.audioproc.Stream)
}
inline PROTOBUF_NDEBUG_INLINE Stream::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        input_channel_{visibility, arena},
        output_channel_{visibility, arena},
        input_data_(arena),
        output_data_(arena) {}

inline void Stream::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, delay_),
           0,
           offsetof(Impl_, keypress_) -
               offsetof(Impl_, delay_) +
               sizeof(Impl_::keypress_));
}
Stream::~Stream() {
  // @@protoc_insertion_point(destructor:webrtc.audioproc.Stream)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Stream::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.input_data_.Destroy();
  _impl_.output_data_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Stream::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audioproc.Stream)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.input_channel_.Clear();
  _impl_.output_channel_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.input_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.output_data_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.delay_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.keypress_) -
        reinterpret_cast<char*>(&_impl_.delay_)) + sizeof(_impl_.keypress_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Stream::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 0, 0, 2> Stream::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Stream, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Stream_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // repeated bytes output_channel = 8;
    {::_pbi::TcParser::FastBR1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(Stream, _impl_.output_channel_)}},
    // optional bytes input_data = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Stream, _impl_.input_data_)}},
    // optional bytes output_data = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(Stream, _impl_.output_data_)}},
    // optional int32 delay = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(Stream, _impl_.delay_)}},
    // optional sint32 drift = 4;
    {::_pbi::TcParser::FastZ32S1,
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(Stream, _impl_.drift_)}},
    // optional int32 applied_input_volume = 5;
    {::_pbi::TcParser::FastV32S1,
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(Stream, _impl_.applied_input_volume_)}},
    // optional bool keypress = 6;
    {::_pbi::TcParser::FastV8S1,
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(Stream, _impl_.keypress_)}},
    // repeated bytes input_channel = 7;
    {::_pbi::TcParser::FastBR1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(Stream, _impl_.input_channel_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bytes input_data = 1;
    {PROTOBUF_FIELD_OFFSET(Stream, _impl_.input_data_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional bytes output_data = 2;
    {PROTOBUF_FIELD_OFFSET(Stream, _impl_.output_data_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional int32 delay = 3;
    {PROTOBUF_FIELD_OFFSET(Stream, _impl_.delay_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional sint32 drift = 4;
    {PROTOBUF_FIELD_OFFSET(Stream, _impl_.drift_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kSInt32)},
    // optional int32 applied_input_volume = 5;
    {PROTOBUF_FIELD_OFFSET(Stream, _impl_.applied_input_volume_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional bool keypress = 6;
    {PROTOBUF_FIELD_OFFSET(Stream, _impl_.keypress_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // repeated bytes input_channel = 7;
    {PROTOBUF_FIELD_OFFSET(Stream, _impl_.input_channel_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kBytes | ::_fl::kRepSString)},
    // repeated bytes output_channel = 8;
    {PROTOBUF_FIELD_OFFSET(Stream, _impl_.output_channel_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kBytes | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Stream::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audioproc.Stream)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes input_data = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_input_data();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // optional bytes output_data = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_output_data();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // optional int32 delay = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_delay(), target);
  }

  // optional sint32 drift = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        4, this->_internal_drift(), target);
  }

  // optional int32 applied_input_volume = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_applied_input_volume(), target);
  }

  // optional bool keypress = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_keypress(), target);
  }

  // repeated bytes input_channel = 7;
  for (int i = 0, n = this->_internal_input_channel_size(); i < n; ++i) {
    const auto& s = this->_internal_input_channel().Get(i);
    target = stream->WriteBytes(7, s, target);
  }

  // repeated bytes output_channel = 8;
  for (int i = 0, n = this->_internal_output_channel_size(); i < n; ++i) {
    const auto& s = this->_internal_output_channel().Get(i);
    target = stream->WriteBytes(8, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audioproc.Stream)
  return target;
}

::size_t Stream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audioproc.Stream)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes input_channel = 7;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_input_channel().size());
  for (int i = 0, n = _internal_input_channel().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
        _internal_input_channel().Get(i));
  }
  // repeated bytes output_channel = 8;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_output_channel().size());
  for (int i = 0, n = _internal_output_channel().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
        _internal_output_channel().Get(i));
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes input_data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_input_data());
    }

    // optional bytes output_data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_output_data());
    }

    // optional int32 delay = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_delay());
    }

    // optional sint32 drift = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
          this->_internal_drift());
    }

    // optional int32 applied_input_volume = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_applied_input_volume());
    }

    // optional bool keypress = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void Stream::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Stream*>(
      &from));
}

void Stream::MergeFrom(const Stream& from) {
  Stream* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audioproc.Stream)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_input_channel()->MergeFrom(from._internal_input_channel());
  _this->_internal_mutable_output_channel()->MergeFrom(from._internal_output_channel());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_input_data(from._internal_input_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_output_data(from._internal_output_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.delay_ = from._impl_.delay_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.drift_ = from._impl_.drift_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.applied_input_volume_ = from._impl_.applied_input_volume_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.keypress_ = from._impl_.keypress_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Stream::CopyFrom(const Stream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audioproc.Stream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Stream::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Stream::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Stream::InternalSwap(Stream* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.input_channel_.InternalSwap(&other->_impl_.input_channel_);
  _impl_.output_channel_.InternalSwap(&other->_impl_.output_channel_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.input_data_, &other->_impl_.input_data_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.output_data_, &other->_impl_.output_data_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Stream, _impl_.keypress_)
      + sizeof(Stream::_impl_.keypress_)
      - PROTOBUF_FIELD_OFFSET(Stream, _impl_.delay_)>(
          reinterpret_cast<char*>(&_impl_.delay_),
          reinterpret_cast<char*>(&other->_impl_.delay_));
}

std::string Stream::GetTypeName() const {
  return "webrtc.audioproc.Stream";
}

// ===================================================================

class Config::_Internal {
 public:
  using HasBits = decltype(std::declval<Config>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Config, _impl_._has_bits_);
  static void set_has_aec_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_aec_delay_agnostic_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_aec_drift_compensation_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_aec_extended_filter_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_aec_suppression_level(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_aecm_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_aecm_comfort_noise_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_aecm_routing_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_agc_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_agc_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_agc_limiter_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_noise_robust_agc_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_hpf_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_ns_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_ns_level(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_transient_suppression_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_experiments_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pre_amplifier_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_pre_amplifier_fixed_gain_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
};

Config::Config(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audioproc.Config)
}
inline PROTOBUF_NDEBUG_INLINE Config::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        experiments_description_(arena, from.experiments_description_) {}

Config::Config(
    ::google::protobuf::Arena* arena,
    const Config& from)
    : ::google::protobuf::MessageLite(arena) {
  Config* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, aec_enabled_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, aec_enabled_),
           offsetof(Impl_, pre_amplifier_fixed_gain_factor_) -
               offsetof(Impl_, aec_enabled_) +
               sizeof(Impl_::pre_amplifier_fixed_gain_factor_));

  // @@protoc_insertion_point(copy_constructor:webrtc.audioproc.Config)
}
inline PROTOBUF_NDEBUG_INLINE Config::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        experiments_description_(arena) {}

inline void Config::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, aec_enabled_),
           0,
           offsetof(Impl_, pre_amplifier_fixed_gain_factor_) -
               offsetof(Impl_, aec_enabled_) +
               sizeof(Impl_::pre_amplifier_fixed_gain_factor_));
}
Config::~Config() {
  // @@protoc_insertion_point(destructor:webrtc.audioproc.Config)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Config::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.experiments_description_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audioproc.Config)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.experiments_description_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.aec_enabled_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.aecm_enabled_) -
        reinterpret_cast<char*>(&_impl_.aec_enabled_)) + sizeof(_impl_.aecm_enabled_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.aecm_comfort_noise_enabled_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.transient_suppression_enabled_) -
        reinterpret_cast<char*>(&_impl_.aecm_comfort_noise_enabled_)) + sizeof(_impl_.transient_suppression_enabled_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&_impl_.ns_level_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.pre_amplifier_fixed_gain_factor_) -
        reinterpret_cast<char*>(&_impl_.ns_level_)) + sizeof(_impl_.pre_amplifier_fixed_gain_factor_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Config::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 19, 0, 0, 2> Config::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Config, _impl_._has_bits_),
    0, // no _extensions_
    20, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294049792,  // skipmap
    offsetof(decltype(_table_), field_entries),
    19,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Config_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional bool aec_enabled = 1;
    {::_pbi::TcParser::FastV8S1,
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.aec_enabled_)}},
    // optional bool aec_delay_agnostic_enabled = 2;
    {::_pbi::TcParser::FastV8S1,
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.aec_delay_agnostic_enabled_)}},
    // optional bool aec_drift_compensation_enabled = 3;
    {::_pbi::TcParser::FastV8S1,
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.aec_drift_compensation_enabled_)}},
    // optional bool aec_extended_filter_enabled = 4;
    {::_pbi::TcParser::FastV8S1,
     {32, 4, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.aec_extended_filter_enabled_)}},
    // optional int32 aec_suppression_level = 5;
    {::_pbi::TcParser::FastV32S1,
     {40, 5, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.aec_suppression_level_)}},
    // optional bool aecm_enabled = 6;
    {::_pbi::TcParser::FastV8S1,
     {48, 7, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.aecm_enabled_)}},
    // optional bool aecm_comfort_noise_enabled = 7 [deprecated = true];
    {::_pbi::TcParser::FastV8S1,
     {56, 8, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.aecm_comfort_noise_enabled_)}},
    // optional int32 aecm_routing_mode = 8 [deprecated = true];
    {::_pbi::TcParser::FastV32S1,
     {64, 6, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.aecm_routing_mode_)}},
    // optional bool agc_enabled = 9;
    {::_pbi::TcParser::FastV8S1,
     {72, 9, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.agc_enabled_)}},
    // optional int32 agc_mode = 10;
    {::_pbi::TcParser::FastV32S1,
     {80, 11, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.agc_mode_)}},
    // optional bool agc_limiter_enabled = 11;
    {::_pbi::TcParser::FastV8S1,
     {88, 10, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.agc_limiter_enabled_)}},
    // optional bool noise_robust_agc_enabled = 12;
    {::_pbi::TcParser::FastV8S1,
     {96, 12, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.noise_robust_agc_enabled_)}},
    // optional bool hpf_enabled = 13;
    {::_pbi::TcParser::FastV8S1,
     {104, 13, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.hpf_enabled_)}},
    // optional bool ns_enabled = 14;
    {::_pbi::TcParser::FastV8S1,
     {112, 14, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.ns_enabled_)}},
    // optional int32 ns_level = 15;
    {::_pbi::TcParser::FastV32S1,
     {120, 16, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.ns_level_)}},
    // optional bool transient_suppression_enabled = 16;
    {::_pbi::TcParser::FastV8S2,
     {384, 15, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.transient_suppression_enabled_)}},
    // optional string experiments_description = 17;
    {::_pbi::TcParser::FastBS2,
     {394, 0, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.experiments_description_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional bool pre_amplifier_enabled = 19;
    {::_pbi::TcParser::FastV8S2,
     {408, 17, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.pre_amplifier_enabled_)}},
    // optional float pre_amplifier_fixed_gain_factor = 20;
    {::_pbi::TcParser::FastF32S2,
     {421, 18, 0, PROTOBUF_FIELD_OFFSET(Config, _impl_.pre_amplifier_fixed_gain_factor_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bool aec_enabled = 1;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.aec_enabled_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool aec_delay_agnostic_enabled = 2;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.aec_delay_agnostic_enabled_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool aec_drift_compensation_enabled = 3;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.aec_drift_compensation_enabled_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool aec_extended_filter_enabled = 4;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.aec_extended_filter_enabled_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional int32 aec_suppression_level = 5;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.aec_suppression_level_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional bool aecm_enabled = 6;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.aecm_enabled_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool aecm_comfort_noise_enabled = 7 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.aecm_comfort_noise_enabled_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional int32 aecm_routing_mode = 8 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.aecm_routing_mode_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional bool agc_enabled = 9;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.agc_enabled_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional int32 agc_mode = 10;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.agc_mode_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional bool agc_limiter_enabled = 11;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.agc_limiter_enabled_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool noise_robust_agc_enabled = 12;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.noise_robust_agc_enabled_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool hpf_enabled = 13;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.hpf_enabled_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool ns_enabled = 14;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.ns_enabled_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional int32 ns_level = 15;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.ns_level_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional bool transient_suppression_enabled = 16;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.transient_suppression_enabled_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional string experiments_description = 17;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.experiments_description_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional bool pre_amplifier_enabled = 19;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.pre_amplifier_enabled_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional float pre_amplifier_fixed_gain_factor = 20;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.pre_amplifier_fixed_gain_factor_), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Config::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audioproc.Config)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool aec_enabled = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_aec_enabled(), target);
  }

  // optional bool aec_delay_agnostic_enabled = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_aec_delay_agnostic_enabled(), target);
  }

  // optional bool aec_drift_compensation_enabled = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_aec_drift_compensation_enabled(), target);
  }

  // optional bool aec_extended_filter_enabled = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_aec_extended_filter_enabled(), target);
  }

  // optional int32 aec_suppression_level = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_aec_suppression_level(), target);
  }

  // optional bool aecm_enabled = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_aecm_enabled(), target);
  }

  // optional bool aecm_comfort_noise_enabled = 7 [deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_aecm_comfort_noise_enabled(), target);
  }

  // optional int32 aecm_routing_mode = 8 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<8>(
            stream, this->_internal_aecm_routing_mode(), target);
  }

  // optional bool agc_enabled = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this->_internal_agc_enabled(), target);
  }

  // optional int32 agc_mode = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<10>(
            stream, this->_internal_agc_mode(), target);
  }

  // optional bool agc_limiter_enabled = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        11, this->_internal_agc_limiter_enabled(), target);
  }

  // optional bool noise_robust_agc_enabled = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        12, this->_internal_noise_robust_agc_enabled(), target);
  }

  // optional bool hpf_enabled = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        13, this->_internal_hpf_enabled(), target);
  }

  // optional bool ns_enabled = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        14, this->_internal_ns_enabled(), target);
  }

  // optional int32 ns_level = 15;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<15>(
            stream, this->_internal_ns_level(), target);
  }

  // optional bool transient_suppression_enabled = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        16, this->_internal_transient_suppression_enabled(), target);
  }

  // optional string experiments_description = 17;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_experiments_description();
    target = stream->WriteStringMaybeAliased(17, _s, target);
  }

  // optional bool pre_amplifier_enabled = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        19, this->_internal_pre_amplifier_enabled(), target);
  }

  // optional float pre_amplifier_fixed_gain_factor = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        20, this->_internal_pre_amplifier_fixed_gain_factor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audioproc.Config)
  return target;
}

::size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audioproc.Config)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string experiments_description = 17;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_experiments_description());
    }

    // optional bool aec_enabled = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

    // optional bool aec_delay_agnostic_enabled = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }

    // optional bool aec_drift_compensation_enabled = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

    // optional bool aec_extended_filter_enabled = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

    // optional int32 aec_suppression_level = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_aec_suppression_level());
    }

    // optional int32 aecm_routing_mode = 8 [deprecated = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_aecm_routing_mode());
    }

    // optional bool aecm_enabled = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool aecm_comfort_noise_enabled = 7 [deprecated = true];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2;
    }

    // optional bool agc_enabled = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2;
    }

    // optional bool agc_limiter_enabled = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2;
    }

    // optional int32 agc_mode = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_agc_mode());
    }

    // optional bool noise_robust_agc_enabled = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2;
    }

    // optional bool hpf_enabled = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2;
    }

    // optional bool ns_enabled = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2;
    }

    // optional bool transient_suppression_enabled = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 3;
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional int32 ns_level = 15;
    if (cached_has_bits & 0x00010000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_ns_level());
    }

    // optional bool pre_amplifier_enabled = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 3;
    }

    // optional float pre_amplifier_fixed_gain_factor = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 6;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void Config::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Config*>(
      &from));
}

void Config::MergeFrom(const Config& from) {
  Config* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audioproc.Config)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_experiments_description(from._internal_experiments_description());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.aec_enabled_ = from._impl_.aec_enabled_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.aec_delay_agnostic_enabled_ = from._impl_.aec_delay_agnostic_enabled_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.aec_drift_compensation_enabled_ = from._impl_.aec_drift_compensation_enabled_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.aec_extended_filter_enabled_ = from._impl_.aec_extended_filter_enabled_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.aec_suppression_level_ = from._impl_.aec_suppression_level_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.aecm_routing_mode_ = from._impl_.aecm_routing_mode_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.aecm_enabled_ = from._impl_.aecm_enabled_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.aecm_comfort_noise_enabled_ = from._impl_.aecm_comfort_noise_enabled_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.agc_enabled_ = from._impl_.agc_enabled_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.agc_limiter_enabled_ = from._impl_.agc_limiter_enabled_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.agc_mode_ = from._impl_.agc_mode_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.noise_robust_agc_enabled_ = from._impl_.noise_robust_agc_enabled_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.hpf_enabled_ = from._impl_.hpf_enabled_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.ns_enabled_ = from._impl_.ns_enabled_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.transient_suppression_enabled_ = from._impl_.transient_suppression_enabled_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.ns_level_ = from._impl_.ns_level_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.pre_amplifier_enabled_ = from._impl_.pre_amplifier_enabled_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.pre_amplifier_fixed_gain_factor_ = from._impl_.pre_amplifier_fixed_gain_factor_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audioproc.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Config::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Config::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Config::InternalSwap(Config* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.experiments_description_, &other->_impl_.experiments_description_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config, _impl_.pre_amplifier_fixed_gain_factor_)
      + sizeof(Config::_impl_.pre_amplifier_fixed_gain_factor_)
      - PROTOBUF_FIELD_OFFSET(Config, _impl_.aec_enabled_)>(
          reinterpret_cast<char*>(&_impl_.aec_enabled_),
          reinterpret_cast<char*>(&other->_impl_.aec_enabled_));
}

std::string Config::GetTypeName() const {
  return "webrtc.audioproc.Config";
}

// ===================================================================

class PlayoutAudioDeviceInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayoutAudioDeviceInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PlayoutAudioDeviceInfo, _impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PlayoutAudioDeviceInfo::PlayoutAudioDeviceInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audioproc.PlayoutAudioDeviceInfo)
}
PlayoutAudioDeviceInfo::PlayoutAudioDeviceInfo(
    ::google::protobuf::Arena* arena, const PlayoutAudioDeviceInfo& from)
    : PlayoutAudioDeviceInfo(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE PlayoutAudioDeviceInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PlayoutAudioDeviceInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           0,
           offsetof(Impl_, max_volume_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::max_volume_));
}
PlayoutAudioDeviceInfo::~PlayoutAudioDeviceInfo() {
  // @@protoc_insertion_point(destructor:webrtc.audioproc.PlayoutAudioDeviceInfo)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void PlayoutAudioDeviceInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void PlayoutAudioDeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audioproc.PlayoutAudioDeviceInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.max_volume_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.max_volume_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PlayoutAudioDeviceInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> PlayoutAudioDeviceInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PlayoutAudioDeviceInfo, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_PlayoutAudioDeviceInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // optional int32 max_volume = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(PlayoutAudioDeviceInfo, _impl_.max_volume_)}},
    // optional int32 id = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(PlayoutAudioDeviceInfo, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(PlayoutAudioDeviceInfo, _impl_.id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 max_volume = 2;
    {PROTOBUF_FIELD_OFFSET(PlayoutAudioDeviceInfo, _impl_.max_volume_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* PlayoutAudioDeviceInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audioproc.PlayoutAudioDeviceInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // optional int32 max_volume = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_max_volume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audioproc.PlayoutAudioDeviceInfo)
  return target;
}

::size_t PlayoutAudioDeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audioproc.PlayoutAudioDeviceInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_id());
    }

    // optional int32 max_volume = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_max_volume());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void PlayoutAudioDeviceInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PlayoutAudioDeviceInfo*>(
      &from));
}

void PlayoutAudioDeviceInfo::MergeFrom(const PlayoutAudioDeviceInfo& from) {
  PlayoutAudioDeviceInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audioproc.PlayoutAudioDeviceInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.max_volume_ = from._impl_.max_volume_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PlayoutAudioDeviceInfo::CopyFrom(const PlayoutAudioDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audioproc.PlayoutAudioDeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PlayoutAudioDeviceInfo::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* PlayoutAudioDeviceInfo::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void PlayoutAudioDeviceInfo::InternalSwap(PlayoutAudioDeviceInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayoutAudioDeviceInfo, _impl_.max_volume_)
      + sizeof(PlayoutAudioDeviceInfo::_impl_.max_volume_)
      - PROTOBUF_FIELD_OFFSET(PlayoutAudioDeviceInfo, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

std::string PlayoutAudioDeviceInfo::GetTypeName() const {
  return "webrtc.audioproc.PlayoutAudioDeviceInfo";
}

// ===================================================================

class RuntimeSetting::_Internal {
 public:
  using HasBits = decltype(std::declval<RuntimeSetting>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RuntimeSetting, _impl_._has_bits_);
  static void set_has_capture_pre_gain(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_custom_render_processing_setting(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_capture_fixed_post_gain(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_playout_volume_change(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::webrtc::audioproc::PlayoutAudioDeviceInfo& playout_audio_device_change(const RuntimeSetting* msg);
  static void set_has_playout_audio_device_change(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_capture_output_used(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_capture_post_gain(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::webrtc::audioproc::PlayoutAudioDeviceInfo& RuntimeSetting::_Internal::playout_audio_device_change(const RuntimeSetting* msg) {
  return *msg->_impl_.playout_audio_device_change_;
}
RuntimeSetting::RuntimeSetting(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audioproc.RuntimeSetting)
}
inline PROTOBUF_NDEBUG_INLINE RuntimeSetting::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RuntimeSetting::RuntimeSetting(
    ::google::protobuf::Arena* arena,
    const RuntimeSetting& from)
    : ::google::protobuf::MessageLite(arena) {
  RuntimeSetting* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.playout_audio_device_change_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::webrtc::audioproc::PlayoutAudioDeviceInfo>(arena, *from._impl_.playout_audio_device_change_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, capture_pre_gain_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, capture_pre_gain_),
           offsetof(Impl_, capture_post_gain_) -
               offsetof(Impl_, capture_pre_gain_) +
               sizeof(Impl_::capture_post_gain_));

  // @@protoc_insertion_point(copy_constructor:webrtc.audioproc.RuntimeSetting)
}
inline PROTOBUF_NDEBUG_INLINE RuntimeSetting::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RuntimeSetting::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, playout_audio_device_change_),
           0,
           offsetof(Impl_, capture_post_gain_) -
               offsetof(Impl_, playout_audio_device_change_) +
               sizeof(Impl_::capture_post_gain_));
}
RuntimeSetting::~RuntimeSetting() {
  // @@protoc_insertion_point(destructor:webrtc.audioproc.RuntimeSetting)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void RuntimeSetting::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.playout_audio_device_change_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RuntimeSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audioproc.RuntimeSetting)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.playout_audio_device_change_ != nullptr);
    _impl_.playout_audio_device_change_->Clear();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.capture_pre_gain_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.capture_post_gain_) -
        reinterpret_cast<char*>(&_impl_.capture_pre_gain_)) + sizeof(_impl_.capture_post_gain_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RuntimeSetting::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 1, 0, 2> RuntimeSetting::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RuntimeSetting, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RuntimeSetting_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional float capture_pre_gain = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 1, 0, PROTOBUF_FIELD_OFFSET(RuntimeSetting, _impl_.capture_pre_gain_)}},
    // optional float custom_render_processing_setting = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 2, 0, PROTOBUF_FIELD_OFFSET(RuntimeSetting, _impl_.custom_render_processing_setting_)}},
    // optional float capture_fixed_post_gain = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 3, 0, PROTOBUF_FIELD_OFFSET(RuntimeSetting, _impl_.capture_fixed_post_gain_)}},
    // optional int32 playout_volume_change = 4;
    {::_pbi::TcParser::FastV32S1,
     {32, 4, 0, PROTOBUF_FIELD_OFFSET(RuntimeSetting, _impl_.playout_volume_change_)}},
    // optional .webrtc.audioproc.PlayoutAudioDeviceInfo playout_audio_device_change = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(RuntimeSetting, _impl_.playout_audio_device_change_)}},
    // optional bool capture_output_used = 6;
    {::_pbi::TcParser::FastV8S1,
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(RuntimeSetting, _impl_.capture_output_used_)}},
    // optional float capture_post_gain = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 6, 0, PROTOBUF_FIELD_OFFSET(RuntimeSetting, _impl_.capture_post_gain_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional float capture_pre_gain = 1;
    {PROTOBUF_FIELD_OFFSET(RuntimeSetting, _impl_.capture_pre_gain_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float custom_render_processing_setting = 2;
    {PROTOBUF_FIELD_OFFSET(RuntimeSetting, _impl_.custom_render_processing_setting_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float capture_fixed_post_gain = 3;
    {PROTOBUF_FIELD_OFFSET(RuntimeSetting, _impl_.capture_fixed_post_gain_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional int32 playout_volume_change = 4;
    {PROTOBUF_FIELD_OFFSET(RuntimeSetting, _impl_.playout_volume_change_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional .webrtc.audioproc.PlayoutAudioDeviceInfo playout_audio_device_change = 5;
    {PROTOBUF_FIELD_OFFSET(RuntimeSetting, _impl_.playout_audio_device_change_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bool capture_output_used = 6;
    {PROTOBUF_FIELD_OFFSET(RuntimeSetting, _impl_.capture_output_used_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional float capture_post_gain = 7;
    {PROTOBUF_FIELD_OFFSET(RuntimeSetting, _impl_.capture_post_gain_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::webrtc::audioproc::PlayoutAudioDeviceInfo>()},
  }}, {{
  }},
};

::uint8_t* RuntimeSetting::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audioproc.RuntimeSetting)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float capture_pre_gain = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_capture_pre_gain(), target);
  }

  // optional float custom_render_processing_setting = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_custom_render_processing_setting(), target);
  }

  // optional float capture_fixed_post_gain = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_capture_fixed_post_gain(), target);
  }

  // optional int32 playout_volume_change = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_playout_volume_change(), target);
  }

  // optional .webrtc.audioproc.PlayoutAudioDeviceInfo playout_audio_device_change = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::playout_audio_device_change(this),
        _Internal::playout_audio_device_change(this).GetCachedSize(), target, stream);
  }

  // optional bool capture_output_used = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_capture_output_used(), target);
  }

  // optional float capture_post_gain = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_capture_post_gain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audioproc.RuntimeSetting)
  return target;
}

::size_t RuntimeSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audioproc.RuntimeSetting)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .webrtc.audioproc.PlayoutAudioDeviceInfo playout_audio_device_change = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.playout_audio_device_change_);
    }

    // optional float capture_pre_gain = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5;
    }

    // optional float custom_render_processing_setting = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 5;
    }

    // optional float capture_fixed_post_gain = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 5;
    }

    // optional int32 playout_volume_change = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_playout_volume_change());
    }

    // optional bool capture_output_used = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2;
    }

    // optional float capture_post_gain = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 5;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void RuntimeSetting::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RuntimeSetting*>(
      &from));
}

void RuntimeSetting::MergeFrom(const RuntimeSetting& from) {
  RuntimeSetting* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audioproc.RuntimeSetting)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_playout_audio_device_change()->::webrtc::audioproc::PlayoutAudioDeviceInfo::MergeFrom(
          from._internal_playout_audio_device_change());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.capture_pre_gain_ = from._impl_.capture_pre_gain_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.custom_render_processing_setting_ = from._impl_.custom_render_processing_setting_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.capture_fixed_post_gain_ = from._impl_.capture_fixed_post_gain_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.playout_volume_change_ = from._impl_.playout_volume_change_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.capture_output_used_ = from._impl_.capture_output_used_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.capture_post_gain_ = from._impl_.capture_post_gain_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RuntimeSetting::CopyFrom(const RuntimeSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audioproc.RuntimeSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RuntimeSetting::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RuntimeSetting::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RuntimeSetting::InternalSwap(RuntimeSetting* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RuntimeSetting, _impl_.capture_post_gain_)
      + sizeof(RuntimeSetting::_impl_.capture_post_gain_)
      - PROTOBUF_FIELD_OFFSET(RuntimeSetting, _impl_.playout_audio_device_change_)>(
          reinterpret_cast<char*>(&_impl_.playout_audio_device_change_),
          reinterpret_cast<char*>(&other->_impl_.playout_audio_device_change_));
}

std::string RuntimeSetting::GetTypeName() const {
  return "webrtc.audioproc.RuntimeSetting";
}

// ===================================================================

class Event::_Internal {
 public:
  using HasBits = decltype(std::declval<Event>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Event, _impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::webrtc::audioproc::Init& init(const Event* msg);
  static void set_has_init(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::webrtc::audioproc::ReverseStream& reverse_stream(const Event* msg);
  static void set_has_reverse_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::webrtc::audioproc::Stream& stream(const Event* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::webrtc::audioproc::Config& config(const Event* msg);
  static void set_has_config(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::webrtc::audioproc::RuntimeSetting& runtime_setting(const Event* msg);
  static void set_has_runtime_setting(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000020) ^ 0x00000020) != 0;
  }
};

const ::webrtc::audioproc::Init& Event::_Internal::init(const Event* msg) {
  return *msg->_impl_.init_;
}
const ::webrtc::audioproc::ReverseStream& Event::_Internal::reverse_stream(const Event* msg) {
  return *msg->_impl_.reverse_stream_;
}
const ::webrtc::audioproc::Stream& Event::_Internal::stream(const Event* msg) {
  return *msg->_impl_.stream_;
}
const ::webrtc::audioproc::Config& Event::_Internal::config(const Event* msg) {
  return *msg->_impl_.config_;
}
const ::webrtc::audioproc::RuntimeSetting& Event::_Internal::runtime_setting(const Event* msg) {
  return *msg->_impl_.runtime_setting_;
}
Event::Event(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audioproc.Event)
}
inline PROTOBUF_NDEBUG_INLINE Event::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Event::Event(
    ::google::protobuf::Arena* arena,
    const Event& from)
    : ::google::protobuf::MessageLite(arena) {
  Event* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.init_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::webrtc::audioproc::Init>(arena, *from._impl_.init_)
                : nullptr;
  _impl_.reverse_stream_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::webrtc::audioproc::ReverseStream>(arena, *from._impl_.reverse_stream_)
                : nullptr;
  _impl_.stream_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::webrtc::audioproc::Stream>(arena, *from._impl_.stream_)
                : nullptr;
  _impl_.config_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::webrtc::audioproc::Config>(arena, *from._impl_.config_)
                : nullptr;
  _impl_.runtime_setting_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::webrtc::audioproc::RuntimeSetting>(arena, *from._impl_.runtime_setting_)
                : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:webrtc.audioproc.Event)
}
inline PROTOBUF_NDEBUG_INLINE Event::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Event::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, init_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, init_) +
               sizeof(Impl_::type_));
}
Event::~Event() {
  // @@protoc_insertion_point(destructor:webrtc.audioproc.Event)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Event::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.init_;
  delete _impl_.reverse_stream_;
  delete _impl_.stream_;
  delete _impl_.config_;
  delete _impl_.runtime_setting_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audioproc.Event)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.init_ != nullptr);
      _impl_.init_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.reverse_stream_ != nullptr);
      _impl_.reverse_stream_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.stream_ != nullptr);
      _impl_.stream_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.config_ != nullptr);
      _impl_.config_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.runtime_setting_ != nullptr);
      _impl_.runtime_setting_->Clear();
    }
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Event::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 6, 0, 2> Event::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Event, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Event_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required .webrtc.audioproc.Event.Type type = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 5, 5, PROTOBUF_FIELD_OFFSET(Event, _impl_.type_)}},
    // optional .webrtc.audioproc.Init init = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 1, PROTOBUF_FIELD_OFFSET(Event, _impl_.init_)}},
    // optional .webrtc.audioproc.ReverseStream reverse_stream = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 2, PROTOBUF_FIELD_OFFSET(Event, _impl_.reverse_stream_)}},
    // optional .webrtc.audioproc.Stream stream = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 3, PROTOBUF_FIELD_OFFSET(Event, _impl_.stream_)}},
    // optional .webrtc.audioproc.Config config = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 3, 4, PROTOBUF_FIELD_OFFSET(Event, _impl_.config_)}},
    // optional .webrtc.audioproc.RuntimeSetting runtime_setting = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 4, 5, PROTOBUF_FIELD_OFFSET(Event, _impl_.runtime_setting_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // required .webrtc.audioproc.Event.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.type_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional .webrtc.audioproc.Init init = 2;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.init_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .webrtc.audioproc.ReverseStream reverse_stream = 3;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.reverse_stream_), _Internal::kHasBitsOffset + 1, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .webrtc.audioproc.Stream stream = 4;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.stream_), _Internal::kHasBitsOffset + 2, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .webrtc.audioproc.Config config = 5;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.config_), _Internal::kHasBitsOffset + 3, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .webrtc.audioproc.RuntimeSetting runtime_setting = 6;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.runtime_setting_), _Internal::kHasBitsOffset + 4, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {0, 6},
    {::_pbi::TcParser::GetTable<::webrtc::audioproc::Init>()},
    {::_pbi::TcParser::GetTable<::webrtc::audioproc::ReverseStream>()},
    {::_pbi::TcParser::GetTable<::webrtc::audioproc::Stream>()},
    {::_pbi::TcParser::GetTable<::webrtc::audioproc::Config>()},
    {::_pbi::TcParser::GetTable<::webrtc::audioproc::RuntimeSetting>()},
  }}, {{
  }},
};

::uint8_t* Event::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audioproc.Event)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .webrtc.audioproc.Event.Type type = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // optional .webrtc.audioproc.Init init = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::init(this),
        _Internal::init(this).GetCachedSize(), target, stream);
  }

  // optional .webrtc.audioproc.ReverseStream reverse_stream = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::reverse_stream(this),
        _Internal::reverse_stream(this).GetCachedSize(), target, stream);
  }

  // optional .webrtc.audioproc.Stream stream = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // optional .webrtc.audioproc.Config config = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::config(this),
        _Internal::config(this).GetCachedSize(), target, stream);
  }

  // optional .webrtc.audioproc.RuntimeSetting runtime_setting = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::runtime_setting(this),
        _Internal::runtime_setting(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audioproc.Event)
  return target;
}

::size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audioproc.Event)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .webrtc.audioproc.Init init = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.init_);
    }

    // optional .webrtc.audioproc.ReverseStream reverse_stream = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.reverse_stream_);
    }

    // optional .webrtc.audioproc.Stream stream = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.stream_);
    }

    // optional .webrtc.audioproc.Config config = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.config_);
    }

    // optional .webrtc.audioproc.RuntimeSetting runtime_setting = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.runtime_setting_);
    }

  }
  // required .webrtc.audioproc.Event.Type type = 1;
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void Event::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Event*>(
      &from));
}

void Event::MergeFrom(const Event& from) {
  Event* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audioproc.Event)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_init()->::webrtc::audioproc::Init::MergeFrom(
          from._internal_init());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_reverse_stream()->::webrtc::audioproc::ReverseStream::MergeFrom(
          from._internal_reverse_stream());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_stream()->::webrtc::audioproc::Stream::MergeFrom(
          from._internal_stream());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_config()->::webrtc::audioproc::Config::MergeFrom(
          from._internal_config());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_runtime_setting()->::webrtc::audioproc::RuntimeSetting::MergeFrom(
          from._internal_runtime_setting());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audioproc.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Event::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) {
    return false;
  }
  return true;
}

::_pbi::CachedSize* Event::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Event::InternalSwap(Event* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event, _impl_.type_)
      + sizeof(Event::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Event, _impl_.init_)>(
          reinterpret_cast<char*>(&_impl_.init_),
          reinterpret_cast<char*>(&other->_impl_.init_));
}

std::string Event::GetTypeName() const {
  return "webrtc.audioproc.Event";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace audioproc
}  // namespace webrtc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
