// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rtc_event_log2.proto

#include "rtc_event_log2.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace webrtc {
namespace rtclog2 {
template <typename>
PROTOBUF_CONSTEXPR EventStream::EventStream(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stream_)*/{}
  , /*decltype(_impl_.incoming_rtp_packets_)*/{}
  , /*decltype(_impl_.outgoing_rtp_packets_)*/{}
  , /*decltype(_impl_.incoming_rtcp_packets_)*/{}
  , /*decltype(_impl_.outgoing_rtcp_packets_)*/{}
  , /*decltype(_impl_.audio_playout_events_)*/{}
  , /*decltype(_impl_.frame_decoded_events_)*/{}
  , /*decltype(_impl_.begin_log_events_)*/{}
  , /*decltype(_impl_.end_log_events_)*/{}
  , /*decltype(_impl_.loss_based_bwe_updates_)*/{}
  , /*decltype(_impl_.delay_based_bwe_updates_)*/{}
  , /*decltype(_impl_.audio_network_adaptations_)*/{}
  , /*decltype(_impl_.probe_clusters_)*/{}
  , /*decltype(_impl_.probe_success_)*/{}
  , /*decltype(_impl_.probe_failure_)*/{}
  , /*decltype(_impl_.alr_states_)*/{}
  , /*decltype(_impl_.ice_candidate_configs_)*/{}
  , /*decltype(_impl_.ice_candidate_events_)*/{}
  , /*decltype(_impl_.dtls_transport_state_events_)*/{}
  , /*decltype(_impl_.dtls_writable_states_)*/{}
  , /*decltype(_impl_.generic_packets_sent_)*/{}
  , /*decltype(_impl_.generic_packets_received_)*/{}
  , /*decltype(_impl_.generic_acks_received_)*/{}
  , /*decltype(_impl_.route_changes_)*/{}
  , /*decltype(_impl_.remote_estimates_)*/{}
  , /*decltype(_impl_.neteq_set_minimum_delay_)*/{}
  , /*decltype(_impl_.audio_recv_stream_configs_)*/{}
  , /*decltype(_impl_.audio_send_stream_configs_)*/{}
  , /*decltype(_impl_.video_recv_stream_configs_)*/{}
  , /*decltype(_impl_.video_send_stream_configs_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventStreamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventStreamDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventStreamDefaultTypeInternal() {}
  union {
    EventStream _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventStreamDefaultTypeInternal _EventStream_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Event::Event(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._cached_size_)*/{}} {}
struct EventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventDefaultTypeInternal() {}
  union {
    Event _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventDefaultTypeInternal _Event_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GenericPacketReceived::GenericPacketReceived(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_ms_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.packet_number_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.packet_length_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_ms_)*/ ::int64_t{0}

  , /*decltype(_impl_.packet_number_)*/ ::int64_t{0}

  , /*decltype(_impl_.packet_length_)*/ 0

  , /*decltype(_impl_.number_of_deltas_)*/ 0u
} {}
struct GenericPacketReceivedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenericPacketReceivedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenericPacketReceivedDefaultTypeInternal() {}
  union {
    GenericPacketReceived _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenericPacketReceivedDefaultTypeInternal _GenericPacketReceived_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GenericPacketSent::GenericPacketSent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_ms_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.packet_number_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.overhead_length_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.payload_length_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.padding_length_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_ms_)*/ ::int64_t{0}

  , /*decltype(_impl_.packet_number_)*/ ::int64_t{0}

  , /*decltype(_impl_.overhead_length_)*/ 0

  , /*decltype(_impl_.payload_length_)*/ 0

  , /*decltype(_impl_.padding_length_)*/ 0

  , /*decltype(_impl_.number_of_deltas_)*/ 0u
} {}
struct GenericPacketSentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenericPacketSentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenericPacketSentDefaultTypeInternal() {}
  union {
    GenericPacketSent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenericPacketSentDefaultTypeInternal _GenericPacketSent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GenericAckReceived::GenericAckReceived(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_ms_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.packet_number_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.acked_packet_number_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.receive_acked_packet_time_ms_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_ms_)*/ ::int64_t{0}

  , /*decltype(_impl_.packet_number_)*/ ::int64_t{0}

  , /*decltype(_impl_.acked_packet_number_)*/ ::int64_t{0}

  , /*decltype(_impl_.receive_acked_packet_time_ms_)*/ ::int64_t{0}

  , /*decltype(_impl_.number_of_deltas_)*/ 0u
} {}
struct GenericAckReceivedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenericAckReceivedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenericAckReceivedDefaultTypeInternal() {}
  union {
    GenericAckReceived _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenericAckReceivedDefaultTypeInternal _GenericAckReceived_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DependencyDescriptorsWireInfo::DependencyDescriptorsWireInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.start_end_bit_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.template_id_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.frame_id_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.extended_infos_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.start_end_bit_)*/ 0u

  , /*decltype(_impl_.template_id_)*/ 0u

  , /*decltype(_impl_.frame_id_)*/ 0u
} {}
struct DependencyDescriptorsWireInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DependencyDescriptorsWireInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DependencyDescriptorsWireInfoDefaultTypeInternal() {}
  union {
    DependencyDescriptorsWireInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DependencyDescriptorsWireInfoDefaultTypeInternal _DependencyDescriptorsWireInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR IncomingRtpPackets::IncomingRtpPackets(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_ms_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.marker_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.payload_type_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sequence_number_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.rtp_timestamp_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.ssrc_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.payload_size_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.header_size_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.padding_size_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.transport_sequence_number_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.transmission_time_offset_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.absolute_send_time_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.video_rotation_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.audio_level_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.voice_activity_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.dependency_descriptor_)*/nullptr
  , /*decltype(_impl_.timestamp_ms_)*/ ::int64_t{0}

  , /*decltype(_impl_.payload_type_)*/ 0u

  , /*decltype(_impl_.sequence_number_)*/ 0u

  , /*decltype(_impl_.rtp_timestamp_)*/ 0u

  , /*decltype(_impl_.ssrc_)*/ 0u

  , /*decltype(_impl_.payload_size_)*/ 0u

  , /*decltype(_impl_.header_size_)*/ 0u

  , /*decltype(_impl_.padding_size_)*/ 0u

  , /*decltype(_impl_.number_of_deltas_)*/ 0u

  , /*decltype(_impl_.marker_)*/ false

  , /*decltype(_impl_.voice_activity_)*/ false

  , /*decltype(_impl_.transport_sequence_number_)*/ 0u

  , /*decltype(_impl_.transmission_time_offset_)*/ 0

  , /*decltype(_impl_.absolute_send_time_)*/ 0u

  , /*decltype(_impl_.video_rotation_)*/ 0u

  , /*decltype(_impl_.audio_level_)*/ 0u
} {}
struct IncomingRtpPacketsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IncomingRtpPacketsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IncomingRtpPacketsDefaultTypeInternal() {}
  union {
    IncomingRtpPackets _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IncomingRtpPacketsDefaultTypeInternal _IncomingRtpPackets_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR OutgoingRtpPackets::OutgoingRtpPackets(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_ms_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.marker_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.payload_type_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sequence_number_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.rtp_timestamp_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.ssrc_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.payload_size_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.header_size_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.padding_size_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.transport_sequence_number_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.transmission_time_offset_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.absolute_send_time_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.video_rotation_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.audio_level_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.voice_activity_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.dependency_descriptor_)*/nullptr
  , /*decltype(_impl_.timestamp_ms_)*/ ::int64_t{0}

  , /*decltype(_impl_.payload_type_)*/ 0u

  , /*decltype(_impl_.sequence_number_)*/ 0u

  , /*decltype(_impl_.rtp_timestamp_)*/ 0u

  , /*decltype(_impl_.ssrc_)*/ 0u

  , /*decltype(_impl_.payload_size_)*/ 0u

  , /*decltype(_impl_.header_size_)*/ 0u

  , /*decltype(_impl_.padding_size_)*/ 0u

  , /*decltype(_impl_.number_of_deltas_)*/ 0u

  , /*decltype(_impl_.marker_)*/ false

  , /*decltype(_impl_.voice_activity_)*/ false

  , /*decltype(_impl_.transport_sequence_number_)*/ 0u

  , /*decltype(_impl_.transmission_time_offset_)*/ 0

  , /*decltype(_impl_.absolute_send_time_)*/ 0u

  , /*decltype(_impl_.video_rotation_)*/ 0u

  , /*decltype(_impl_.audio_level_)*/ 0u
} {}
struct OutgoingRtpPacketsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutgoingRtpPacketsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutgoingRtpPacketsDefaultTypeInternal() {}
  union {
    OutgoingRtpPackets _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutgoingRtpPacketsDefaultTypeInternal _OutgoingRtpPackets_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR IncomingRtcpPackets::IncomingRtcpPackets(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.raw_packet_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_ms_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.raw_packet_blobs_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_ms_)*/ ::int64_t{0}

  , /*decltype(_impl_.number_of_deltas_)*/ 0u
} {}
struct IncomingRtcpPacketsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IncomingRtcpPacketsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IncomingRtcpPacketsDefaultTypeInternal() {}
  union {
    IncomingRtcpPackets _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IncomingRtcpPacketsDefaultTypeInternal _IncomingRtcpPackets_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR OutgoingRtcpPackets::OutgoingRtcpPackets(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.raw_packet_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_ms_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.raw_packet_blobs_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_ms_)*/ ::int64_t{0}

  , /*decltype(_impl_.number_of_deltas_)*/ 0u
} {}
struct OutgoingRtcpPacketsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutgoingRtcpPacketsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutgoingRtcpPacketsDefaultTypeInternal() {}
  union {
    OutgoingRtcpPackets _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutgoingRtcpPacketsDefaultTypeInternal _OutgoingRtcpPackets_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AudioPlayoutEvents::AudioPlayoutEvents(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_ms_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.local_ssrc_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_ms_)*/ ::int64_t{0}

  , /*decltype(_impl_.local_ssrc_)*/ 0u

  , /*decltype(_impl_.number_of_deltas_)*/ 0u
} {}
struct AudioPlayoutEventsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioPlayoutEventsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioPlayoutEventsDefaultTypeInternal() {}
  union {
    AudioPlayoutEvents _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioPlayoutEventsDefaultTypeInternal _AudioPlayoutEvents_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR NetEqSetMinimumDelay::NetEqSetMinimumDelay(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_ms_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.remote_ssrc_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.minimum_delay_ms_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_ms_)*/ ::int64_t{0}

  , /*decltype(_impl_.remote_ssrc_)*/ 0u

  , /*decltype(_impl_.minimum_delay_ms_)*/ 0

  , /*decltype(_impl_.number_of_deltas_)*/ 0u
} {}
struct NetEqSetMinimumDelayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetEqSetMinimumDelayDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetEqSetMinimumDelayDefaultTypeInternal() {}
  union {
    NetEqSetMinimumDelay _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetEqSetMinimumDelayDefaultTypeInternal _NetEqSetMinimumDelay_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FrameDecodedEvents::FrameDecodedEvents(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_ms_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.ssrc_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.render_time_ms_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.width_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.height_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.codec_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.qp_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_ms_)*/ ::int64_t{0}

  , /*decltype(_impl_.render_time_ms_)*/ ::int64_t{0}

  , /*decltype(_impl_.ssrc_)*/ 0u

  , /*decltype(_impl_.width_)*/ 0

  , /*decltype(_impl_.height_)*/ 0

  , /*decltype(_impl_.codec_)*/ 0

  , /*decltype(_impl_.qp_)*/ 0u

  , /*decltype(_impl_.number_of_deltas_)*/ 0u
} {}
struct FrameDecodedEventsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameDecodedEventsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameDecodedEventsDefaultTypeInternal() {}
  union {
    FrameDecodedEvents _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameDecodedEventsDefaultTypeInternal _FrameDecodedEvents_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BeginLogEvent::BeginLogEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_ms_)*/ ::int64_t{0}

  , /*decltype(_impl_.utc_time_ms_)*/ ::int64_t{0}

  , /*decltype(_impl_.version_)*/ 0u
} {}
struct BeginLogEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BeginLogEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BeginLogEventDefaultTypeInternal() {}
  union {
    BeginLogEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BeginLogEventDefaultTypeInternal _BeginLogEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EndLogEvent::EndLogEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_ms_)*/ ::int64_t{0}
} {}
struct EndLogEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EndLogEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EndLogEventDefaultTypeInternal() {}
  union {
    EndLogEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EndLogEventDefaultTypeInternal _EndLogEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR LossBasedBweUpdates::LossBasedBweUpdates(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_ms_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.bitrate_bps_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.fraction_loss_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.total_packets_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_ms_)*/ ::int64_t{0}

  , /*decltype(_impl_.bitrate_bps_)*/ 0u

  , /*decltype(_impl_.fraction_loss_)*/ 0u

  , /*decltype(_impl_.total_packets_)*/ 0u

  , /*decltype(_impl_.number_of_deltas_)*/ 0u
} {}
struct LossBasedBweUpdatesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LossBasedBweUpdatesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LossBasedBweUpdatesDefaultTypeInternal() {}
  union {
    LossBasedBweUpdates _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LossBasedBweUpdatesDefaultTypeInternal _LossBasedBweUpdates_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DelayBasedBweUpdates::DelayBasedBweUpdates(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_ms_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.bitrate_bps_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.detector_state_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_ms_)*/ ::int64_t{0}

  , /*decltype(_impl_.bitrate_bps_)*/ 0u

  , /*decltype(_impl_.detector_state_)*/ 0

  , /*decltype(_impl_.number_of_deltas_)*/ 0u
} {}
struct DelayBasedBweUpdatesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DelayBasedBweUpdatesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DelayBasedBweUpdatesDefaultTypeInternal() {}
  union {
    DelayBasedBweUpdates _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DelayBasedBweUpdatesDefaultTypeInternal _DelayBasedBweUpdates_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RtpHeaderExtensionConfig::RtpHeaderExtensionConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.transmission_time_offset_id_)*/ 0

  , /*decltype(_impl_.absolute_send_time_id_)*/ 0

  , /*decltype(_impl_.transport_sequence_number_id_)*/ 0

  , /*decltype(_impl_.video_rotation_id_)*/ 0

  , /*decltype(_impl_.audio_level_id_)*/ 0

  , /*decltype(_impl_.dependency_descriptor_id_)*/ 0
} {}
struct RtpHeaderExtensionConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtpHeaderExtensionConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtpHeaderExtensionConfigDefaultTypeInternal() {}
  union {
    RtpHeaderExtensionConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtpHeaderExtensionConfigDefaultTypeInternal _RtpHeaderExtensionConfig_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR VideoRecvStreamConfig::VideoRecvStreamConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_extensions_)*/nullptr
  , /*decltype(_impl_.timestamp_ms_)*/ ::int64_t{0}

  , /*decltype(_impl_.remote_ssrc_)*/ 0u

  , /*decltype(_impl_.local_ssrc_)*/ 0u

  , /*decltype(_impl_.rtx_ssrc_)*/ 0u
} {}
struct VideoRecvStreamConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoRecvStreamConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoRecvStreamConfigDefaultTypeInternal() {}
  union {
    VideoRecvStreamConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoRecvStreamConfigDefaultTypeInternal _VideoRecvStreamConfig_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR VideoSendStreamConfig::VideoSendStreamConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_extensions_)*/nullptr
  , /*decltype(_impl_.timestamp_ms_)*/ ::int64_t{0}

  , /*decltype(_impl_.ssrc_)*/ 0u

  , /*decltype(_impl_.rtx_ssrc_)*/ 0u
} {}
struct VideoSendStreamConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoSendStreamConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoSendStreamConfigDefaultTypeInternal() {}
  union {
    VideoSendStreamConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoSendStreamConfigDefaultTypeInternal _VideoSendStreamConfig_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AudioRecvStreamConfig::AudioRecvStreamConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_extensions_)*/nullptr
  , /*decltype(_impl_.timestamp_ms_)*/ ::int64_t{0}

  , /*decltype(_impl_.remote_ssrc_)*/ 0u

  , /*decltype(_impl_.local_ssrc_)*/ 0u
} {}
struct AudioRecvStreamConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioRecvStreamConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioRecvStreamConfigDefaultTypeInternal() {}
  union {
    AudioRecvStreamConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioRecvStreamConfigDefaultTypeInternal _AudioRecvStreamConfig_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AudioSendStreamConfig::AudioSendStreamConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_extensions_)*/nullptr
  , /*decltype(_impl_.timestamp_ms_)*/ ::int64_t{0}

  , /*decltype(_impl_.ssrc_)*/ 0u
} {}
struct AudioSendStreamConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioSendStreamConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioSendStreamConfigDefaultTypeInternal() {}
  union {
    AudioSendStreamConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioSendStreamConfigDefaultTypeInternal _AudioSendStreamConfig_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AudioNetworkAdaptations::AudioNetworkAdaptations(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_ms_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.bitrate_bps_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.frame_length_ms_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.uplink_packet_loss_fraction_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.enable_fec_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.enable_dtx_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.num_channels_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_ms_)*/ ::int64_t{0}

  , /*decltype(_impl_.bitrate_bps_)*/ 0

  , /*decltype(_impl_.frame_length_ms_)*/ 0

  , /*decltype(_impl_.uplink_packet_loss_fraction_)*/ 0u

  , /*decltype(_impl_.enable_fec_)*/ false

  , /*decltype(_impl_.enable_dtx_)*/ false

  , /*decltype(_impl_.num_channels_)*/ 0u

  , /*decltype(_impl_.number_of_deltas_)*/ 0u
} {}
struct AudioNetworkAdaptationsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioNetworkAdaptationsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioNetworkAdaptationsDefaultTypeInternal() {}
  union {
    AudioNetworkAdaptations _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioNetworkAdaptationsDefaultTypeInternal _AudioNetworkAdaptations_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BweProbeCluster::BweProbeCluster(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_ms_)*/ ::int64_t{0}

  , /*decltype(_impl_.id_)*/ 0u

  , /*decltype(_impl_.bitrate_bps_)*/ 0u

  , /*decltype(_impl_.min_packets_)*/ 0u

  , /*decltype(_impl_.min_bytes_)*/ 0u
} {}
struct BweProbeClusterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BweProbeClusterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BweProbeClusterDefaultTypeInternal() {}
  union {
    BweProbeCluster _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BweProbeClusterDefaultTypeInternal _BweProbeCluster_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BweProbeResultSuccess::BweProbeResultSuccess(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_ms_)*/ ::int64_t{0}

  , /*decltype(_impl_.id_)*/ 0u

  , /*decltype(_impl_.bitrate_bps_)*/ 0u
} {}
struct BweProbeResultSuccessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BweProbeResultSuccessDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BweProbeResultSuccessDefaultTypeInternal() {}
  union {
    BweProbeResultSuccess _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BweProbeResultSuccessDefaultTypeInternal _BweProbeResultSuccess_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BweProbeResultFailure::BweProbeResultFailure(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_ms_)*/ ::int64_t{0}

  , /*decltype(_impl_.id_)*/ 0u

  , /*decltype(_impl_.failure_)*/ 0
} {}
struct BweProbeResultFailureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BweProbeResultFailureDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BweProbeResultFailureDefaultTypeInternal() {}
  union {
    BweProbeResultFailure _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BweProbeResultFailureDefaultTypeInternal _BweProbeResultFailure_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AlrState::AlrState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_ms_)*/ ::int64_t{0}

  , /*decltype(_impl_.in_alr_)*/ false
} {}
struct AlrStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AlrStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AlrStateDefaultTypeInternal() {}
  union {
    AlrState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AlrStateDefaultTypeInternal _AlrState_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR IceCandidatePairConfig::IceCandidatePairConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_ms_)*/ ::int64_t{0}

  , /*decltype(_impl_.config_type_)*/ 0

  , /*decltype(_impl_.candidate_pair_id_)*/ 0u

  , /*decltype(_impl_.local_candidate_type_)*/ 0

  , /*decltype(_impl_.local_relay_protocol_)*/ 0

  , /*decltype(_impl_.local_network_type_)*/ 0

  , /*decltype(_impl_.local_address_family_)*/ 0

  , /*decltype(_impl_.remote_candidate_type_)*/ 0

  , /*decltype(_impl_.remote_address_family_)*/ 0

  , /*decltype(_impl_.candidate_pair_protocol_)*/ 0
} {}
struct IceCandidatePairConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IceCandidatePairConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IceCandidatePairConfigDefaultTypeInternal() {}
  union {
    IceCandidatePairConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IceCandidatePairConfigDefaultTypeInternal _IceCandidatePairConfig_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR IceCandidatePairEvent::IceCandidatePairEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_ms_)*/ ::int64_t{0}

  , /*decltype(_impl_.event_type_)*/ 0

  , /*decltype(_impl_.candidate_pair_id_)*/ 0u

  , /*decltype(_impl_.transaction_id_)*/ 0u
} {}
struct IceCandidatePairEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IceCandidatePairEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IceCandidatePairEventDefaultTypeInternal() {}
  union {
    IceCandidatePairEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IceCandidatePairEventDefaultTypeInternal _IceCandidatePairEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DtlsTransportStateEvent::DtlsTransportStateEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_ms_)*/ ::int64_t{0}

  , /*decltype(_impl_.dtls_transport_state_)*/ 0
} {}
struct DtlsTransportStateEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DtlsTransportStateEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DtlsTransportStateEventDefaultTypeInternal() {}
  union {
    DtlsTransportStateEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DtlsTransportStateEventDefaultTypeInternal _DtlsTransportStateEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DtlsWritableState::DtlsWritableState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_ms_)*/ ::int64_t{0}

  , /*decltype(_impl_.writable_)*/ false
} {}
struct DtlsWritableStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DtlsWritableStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DtlsWritableStateDefaultTypeInternal() {}
  union {
    DtlsWritableState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DtlsWritableStateDefaultTypeInternal _DtlsWritableState_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RouteChange::RouteChange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_ms_)*/ ::int64_t{0}

  , /*decltype(_impl_.connected_)*/ false

  , /*decltype(_impl_.overhead_)*/ 0u
} {}
struct RouteChangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouteChangeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouteChangeDefaultTypeInternal() {}
  union {
    RouteChange _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouteChangeDefaultTypeInternal _RouteChange_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RemoteEstimates::RemoteEstimates(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_ms_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.link_capacity_lower_kbps_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.link_capacity_upper_kbps_deltas_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_ms_)*/ ::int64_t{0}

  , /*decltype(_impl_.link_capacity_lower_kbps_)*/ 0u

  , /*decltype(_impl_.link_capacity_upper_kbps_)*/ 0u

  , /*decltype(_impl_.number_of_deltas_)*/ 0u
} {}
struct RemoteEstimatesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoteEstimatesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoteEstimatesDefaultTypeInternal() {}
  union {
    RemoteEstimates _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoteEstimatesDefaultTypeInternal _RemoteEstimates_default_instance_;
}  // namespace rtclog2
}  // namespace webrtc
namespace webrtc {
namespace rtclog2 {
bool FrameDecodedEvents_Codec_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    FrameDecodedEvents_Codec_strings[6] = {};

static const char FrameDecodedEvents_Codec_names[] = {
    "CODEC_AV1"
    "CODEC_GENERIC"
    "CODEC_H264"
    "CODEC_UNKNOWN"
    "CODEC_VP8"
    "CODEC_VP9"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry FrameDecodedEvents_Codec_entries[] =
    {
        {{&FrameDecodedEvents_Codec_names[0], 9}, 4},
        {{&FrameDecodedEvents_Codec_names[9], 13}, 1},
        {{&FrameDecodedEvents_Codec_names[22], 10}, 5},
        {{&FrameDecodedEvents_Codec_names[32], 13}, 0},
        {{&FrameDecodedEvents_Codec_names[45], 9}, 2},
        {{&FrameDecodedEvents_Codec_names[54], 9}, 3},
};

static const int FrameDecodedEvents_Codec_entries_by_number[] = {
    3,  // 0 -> CODEC_UNKNOWN
    1,  // 1 -> CODEC_GENERIC
    4,  // 2 -> CODEC_VP8
    5,  // 3 -> CODEC_VP9
    0,  // 4 -> CODEC_AV1
    2,  // 5 -> CODEC_H264
};

const std::string& FrameDecodedEvents_Codec_Name(FrameDecodedEvents_Codec value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          FrameDecodedEvents_Codec_entries, FrameDecodedEvents_Codec_entries_by_number,
          6, FrameDecodedEvents_Codec_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      FrameDecodedEvents_Codec_entries, FrameDecodedEvents_Codec_entries_by_number, 6,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : FrameDecodedEvents_Codec_strings[idx].get();
}

bool FrameDecodedEvents_Codec_Parse(absl::string_view name, FrameDecodedEvents_Codec* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      FrameDecodedEvents_Codec_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<FrameDecodedEvents_Codec>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr FrameDecodedEvents_Codec FrameDecodedEvents::CODEC_UNKNOWN;
constexpr FrameDecodedEvents_Codec FrameDecodedEvents::CODEC_GENERIC;
constexpr FrameDecodedEvents_Codec FrameDecodedEvents::CODEC_VP8;
constexpr FrameDecodedEvents_Codec FrameDecodedEvents::CODEC_VP9;
constexpr FrameDecodedEvents_Codec FrameDecodedEvents::CODEC_AV1;
constexpr FrameDecodedEvents_Codec FrameDecodedEvents::CODEC_H264;
constexpr FrameDecodedEvents_Codec FrameDecodedEvents::Codec_MIN;
constexpr FrameDecodedEvents_Codec FrameDecodedEvents::Codec_MAX;
constexpr int FrameDecodedEvents::Codec_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool DelayBasedBweUpdates_DetectorState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    DelayBasedBweUpdates_DetectorState_strings[4] = {};

static const char DelayBasedBweUpdates_DetectorState_names[] = {
    "BWE_NORMAL"
    "BWE_OVERUSING"
    "BWE_UNDERUSING"
    "BWE_UNKNOWN_STATE"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DelayBasedBweUpdates_DetectorState_entries[] =
    {
        {{&DelayBasedBweUpdates_DetectorState_names[0], 10}, 1},
        {{&DelayBasedBweUpdates_DetectorState_names[10], 13}, 3},
        {{&DelayBasedBweUpdates_DetectorState_names[23], 14}, 2},
        {{&DelayBasedBweUpdates_DetectorState_names[37], 17}, 0},
};

static const int DelayBasedBweUpdates_DetectorState_entries_by_number[] = {
    3,  // 0 -> BWE_UNKNOWN_STATE
    0,  // 1 -> BWE_NORMAL
    2,  // 2 -> BWE_UNDERUSING
    1,  // 3 -> BWE_OVERUSING
};

const std::string& DelayBasedBweUpdates_DetectorState_Name(DelayBasedBweUpdates_DetectorState value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DelayBasedBweUpdates_DetectorState_entries, DelayBasedBweUpdates_DetectorState_entries_by_number,
          4, DelayBasedBweUpdates_DetectorState_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DelayBasedBweUpdates_DetectorState_entries, DelayBasedBweUpdates_DetectorState_entries_by_number, 4,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : DelayBasedBweUpdates_DetectorState_strings[idx].get();
}

bool DelayBasedBweUpdates_DetectorState_Parse(absl::string_view name, DelayBasedBweUpdates_DetectorState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DelayBasedBweUpdates_DetectorState_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<DelayBasedBweUpdates_DetectorState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr DelayBasedBweUpdates_DetectorState DelayBasedBweUpdates::BWE_UNKNOWN_STATE;
constexpr DelayBasedBweUpdates_DetectorState DelayBasedBweUpdates::BWE_NORMAL;
constexpr DelayBasedBweUpdates_DetectorState DelayBasedBweUpdates::BWE_UNDERUSING;
constexpr DelayBasedBweUpdates_DetectorState DelayBasedBweUpdates::BWE_OVERUSING;
constexpr DelayBasedBweUpdates_DetectorState DelayBasedBweUpdates::DetectorState_MIN;
constexpr DelayBasedBweUpdates_DetectorState DelayBasedBweUpdates::DetectorState_MAX;
constexpr int DelayBasedBweUpdates::DetectorState_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool BweProbeResultFailure_FailureReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    BweProbeResultFailure_FailureReason_strings[4] = {};

static const char BweProbeResultFailure_FailureReason_names[] = {
    "INVALID_SEND_RECEIVE_INTERVAL"
    "INVALID_SEND_RECEIVE_RATIO"
    "TIMEOUT"
    "UNKNOWN"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BweProbeResultFailure_FailureReason_entries[] =
    {
        {{&BweProbeResultFailure_FailureReason_names[0], 29}, 1},
        {{&BweProbeResultFailure_FailureReason_names[29], 26}, 2},
        {{&BweProbeResultFailure_FailureReason_names[55], 7}, 3},
        {{&BweProbeResultFailure_FailureReason_names[62], 7}, 0},
};

static const int BweProbeResultFailure_FailureReason_entries_by_number[] = {
    3,  // 0 -> UNKNOWN
    0,  // 1 -> INVALID_SEND_RECEIVE_INTERVAL
    1,  // 2 -> INVALID_SEND_RECEIVE_RATIO
    2,  // 3 -> TIMEOUT
};

const std::string& BweProbeResultFailure_FailureReason_Name(BweProbeResultFailure_FailureReason value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BweProbeResultFailure_FailureReason_entries, BweProbeResultFailure_FailureReason_entries_by_number,
          4, BweProbeResultFailure_FailureReason_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BweProbeResultFailure_FailureReason_entries, BweProbeResultFailure_FailureReason_entries_by_number, 4,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : BweProbeResultFailure_FailureReason_strings[idx].get();
}

bool BweProbeResultFailure_FailureReason_Parse(absl::string_view name, BweProbeResultFailure_FailureReason* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BweProbeResultFailure_FailureReason_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<BweProbeResultFailure_FailureReason>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr BweProbeResultFailure_FailureReason BweProbeResultFailure::UNKNOWN;
constexpr BweProbeResultFailure_FailureReason BweProbeResultFailure::INVALID_SEND_RECEIVE_INTERVAL;
constexpr BweProbeResultFailure_FailureReason BweProbeResultFailure::INVALID_SEND_RECEIVE_RATIO;
constexpr BweProbeResultFailure_FailureReason BweProbeResultFailure::TIMEOUT;
constexpr BweProbeResultFailure_FailureReason BweProbeResultFailure::FailureReason_MIN;
constexpr BweProbeResultFailure_FailureReason BweProbeResultFailure::FailureReason_MAX;
constexpr int BweProbeResultFailure::FailureReason_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool IceCandidatePairConfig_IceCandidatePairConfigType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    IceCandidatePairConfig_IceCandidatePairConfigType_strings[5] = {};

static const char IceCandidatePairConfig_IceCandidatePairConfigType_names[] = {
    "ADDED"
    "DESTROYED"
    "SELECTED"
    "UNKNOWN_CONFIG_TYPE"
    "UPDATED"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry IceCandidatePairConfig_IceCandidatePairConfigType_entries[] =
    {
        {{&IceCandidatePairConfig_IceCandidatePairConfigType_names[0], 5}, 1},
        {{&IceCandidatePairConfig_IceCandidatePairConfigType_names[5], 9}, 3},
        {{&IceCandidatePairConfig_IceCandidatePairConfigType_names[14], 8}, 4},
        {{&IceCandidatePairConfig_IceCandidatePairConfigType_names[22], 19}, 0},
        {{&IceCandidatePairConfig_IceCandidatePairConfigType_names[41], 7}, 2},
};

static const int IceCandidatePairConfig_IceCandidatePairConfigType_entries_by_number[] = {
    3,  // 0 -> UNKNOWN_CONFIG_TYPE
    0,  // 1 -> ADDED
    4,  // 2 -> UPDATED
    1,  // 3 -> DESTROYED
    2,  // 4 -> SELECTED
};

const std::string& IceCandidatePairConfig_IceCandidatePairConfigType_Name(IceCandidatePairConfig_IceCandidatePairConfigType value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          IceCandidatePairConfig_IceCandidatePairConfigType_entries, IceCandidatePairConfig_IceCandidatePairConfigType_entries_by_number,
          5, IceCandidatePairConfig_IceCandidatePairConfigType_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      IceCandidatePairConfig_IceCandidatePairConfigType_entries, IceCandidatePairConfig_IceCandidatePairConfigType_entries_by_number, 5,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : IceCandidatePairConfig_IceCandidatePairConfigType_strings[idx].get();
}

bool IceCandidatePairConfig_IceCandidatePairConfigType_Parse(absl::string_view name, IceCandidatePairConfig_IceCandidatePairConfigType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      IceCandidatePairConfig_IceCandidatePairConfigType_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<IceCandidatePairConfig_IceCandidatePairConfigType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig::UNKNOWN_CONFIG_TYPE;
constexpr IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig::ADDED;
constexpr IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig::UPDATED;
constexpr IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig::DESTROYED;
constexpr IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig::SELECTED;
constexpr IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig::IceCandidatePairConfigType_MIN;
constexpr IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig::IceCandidatePairConfigType_MAX;
constexpr int IceCandidatePairConfig::IceCandidatePairConfigType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool IceCandidatePairConfig_IceCandidateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    IceCandidatePairConfig_IceCandidateType_strings[5] = {};

static const char IceCandidatePairConfig_IceCandidateType_names[] = {
    "LOCAL"
    "PRFLX"
    "RELAY"
    "STUN"
    "UNKNOWN_CANDIDATE_TYPE"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry IceCandidatePairConfig_IceCandidateType_entries[] =
    {
        {{&IceCandidatePairConfig_IceCandidateType_names[0], 5}, 1},
        {{&IceCandidatePairConfig_IceCandidateType_names[5], 5}, 3},
        {{&IceCandidatePairConfig_IceCandidateType_names[10], 5}, 4},
        {{&IceCandidatePairConfig_IceCandidateType_names[15], 4}, 2},
        {{&IceCandidatePairConfig_IceCandidateType_names[19], 22}, 0},
};

static const int IceCandidatePairConfig_IceCandidateType_entries_by_number[] = {
    4,  // 0 -> UNKNOWN_CANDIDATE_TYPE
    0,  // 1 -> LOCAL
    3,  // 2 -> STUN
    1,  // 3 -> PRFLX
    2,  // 4 -> RELAY
};

const std::string& IceCandidatePairConfig_IceCandidateType_Name(IceCandidatePairConfig_IceCandidateType value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          IceCandidatePairConfig_IceCandidateType_entries, IceCandidatePairConfig_IceCandidateType_entries_by_number,
          5, IceCandidatePairConfig_IceCandidateType_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      IceCandidatePairConfig_IceCandidateType_entries, IceCandidatePairConfig_IceCandidateType_entries_by_number, 5,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : IceCandidatePairConfig_IceCandidateType_strings[idx].get();
}

bool IceCandidatePairConfig_IceCandidateType_Parse(absl::string_view name, IceCandidatePairConfig_IceCandidateType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      IceCandidatePairConfig_IceCandidateType_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<IceCandidatePairConfig_IceCandidateType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::UNKNOWN_CANDIDATE_TYPE;
constexpr IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::LOCAL;
constexpr IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::STUN;
constexpr IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::PRFLX;
constexpr IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::RELAY;
constexpr IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::IceCandidateType_MIN;
constexpr IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::IceCandidateType_MAX;
constexpr int IceCandidatePairConfig::IceCandidateType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool IceCandidatePairConfig_Protocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    IceCandidatePairConfig_Protocol_strings[5] = {};

static const char IceCandidatePairConfig_Protocol_names[] = {
    "SSLTCP"
    "TCP"
    "TLS"
    "UDP"
    "UNKNOWN_PROTOCOL"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry IceCandidatePairConfig_Protocol_entries[] =
    {
        {{&IceCandidatePairConfig_Protocol_names[0], 6}, 3},
        {{&IceCandidatePairConfig_Protocol_names[6], 3}, 2},
        {{&IceCandidatePairConfig_Protocol_names[9], 3}, 4},
        {{&IceCandidatePairConfig_Protocol_names[12], 3}, 1},
        {{&IceCandidatePairConfig_Protocol_names[15], 16}, 0},
};

static const int IceCandidatePairConfig_Protocol_entries_by_number[] = {
    4,  // 0 -> UNKNOWN_PROTOCOL
    3,  // 1 -> UDP
    1,  // 2 -> TCP
    0,  // 3 -> SSLTCP
    2,  // 4 -> TLS
};

const std::string& IceCandidatePairConfig_Protocol_Name(IceCandidatePairConfig_Protocol value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          IceCandidatePairConfig_Protocol_entries, IceCandidatePairConfig_Protocol_entries_by_number,
          5, IceCandidatePairConfig_Protocol_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      IceCandidatePairConfig_Protocol_entries, IceCandidatePairConfig_Protocol_entries_by_number, 5,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : IceCandidatePairConfig_Protocol_strings[idx].get();
}

bool IceCandidatePairConfig_Protocol_Parse(absl::string_view name, IceCandidatePairConfig_Protocol* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      IceCandidatePairConfig_Protocol_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<IceCandidatePairConfig_Protocol>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr IceCandidatePairConfig_Protocol IceCandidatePairConfig::UNKNOWN_PROTOCOL;
constexpr IceCandidatePairConfig_Protocol IceCandidatePairConfig::UDP;
constexpr IceCandidatePairConfig_Protocol IceCandidatePairConfig::TCP;
constexpr IceCandidatePairConfig_Protocol IceCandidatePairConfig::SSLTCP;
constexpr IceCandidatePairConfig_Protocol IceCandidatePairConfig::TLS;
constexpr IceCandidatePairConfig_Protocol IceCandidatePairConfig::Protocol_MIN;
constexpr IceCandidatePairConfig_Protocol IceCandidatePairConfig::Protocol_MAX;
constexpr int IceCandidatePairConfig::Protocol_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool IceCandidatePairConfig_AddressFamily_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    IceCandidatePairConfig_AddressFamily_strings[3] = {};

static const char IceCandidatePairConfig_AddressFamily_names[] = {
    "IPV4"
    "IPV6"
    "UNKNOWN_ADDRESS_FAMILY"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry IceCandidatePairConfig_AddressFamily_entries[] =
    {
        {{&IceCandidatePairConfig_AddressFamily_names[0], 4}, 1},
        {{&IceCandidatePairConfig_AddressFamily_names[4], 4}, 2},
        {{&IceCandidatePairConfig_AddressFamily_names[8], 22}, 0},
};

static const int IceCandidatePairConfig_AddressFamily_entries_by_number[] = {
    2,  // 0 -> UNKNOWN_ADDRESS_FAMILY
    0,  // 1 -> IPV4
    1,  // 2 -> IPV6
};

const std::string& IceCandidatePairConfig_AddressFamily_Name(IceCandidatePairConfig_AddressFamily value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          IceCandidatePairConfig_AddressFamily_entries, IceCandidatePairConfig_AddressFamily_entries_by_number,
          3, IceCandidatePairConfig_AddressFamily_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      IceCandidatePairConfig_AddressFamily_entries, IceCandidatePairConfig_AddressFamily_entries_by_number, 3,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : IceCandidatePairConfig_AddressFamily_strings[idx].get();
}

bool IceCandidatePairConfig_AddressFamily_Parse(absl::string_view name, IceCandidatePairConfig_AddressFamily* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      IceCandidatePairConfig_AddressFamily_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<IceCandidatePairConfig_AddressFamily>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr IceCandidatePairConfig_AddressFamily IceCandidatePairConfig::UNKNOWN_ADDRESS_FAMILY;
constexpr IceCandidatePairConfig_AddressFamily IceCandidatePairConfig::IPV4;
constexpr IceCandidatePairConfig_AddressFamily IceCandidatePairConfig::IPV6;
constexpr IceCandidatePairConfig_AddressFamily IceCandidatePairConfig::AddressFamily_MIN;
constexpr IceCandidatePairConfig_AddressFamily IceCandidatePairConfig::AddressFamily_MAX;
constexpr int IceCandidatePairConfig::AddressFamily_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool IceCandidatePairConfig_NetworkType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    IceCandidatePairConfig_NetworkType_strings[6] = {};

static const char IceCandidatePairConfig_NetworkType_names[] = {
    "CELLULAR"
    "ETHERNET"
    "LOOPBACK"
    "UNKNOWN_NETWORK_TYPE"
    "VPN"
    "WIFI"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry IceCandidatePairConfig_NetworkType_entries[] =
    {
        {{&IceCandidatePairConfig_NetworkType_names[0], 8}, 3},
        {{&IceCandidatePairConfig_NetworkType_names[8], 8}, 1},
        {{&IceCandidatePairConfig_NetworkType_names[16], 8}, 5},
        {{&IceCandidatePairConfig_NetworkType_names[24], 20}, 0},
        {{&IceCandidatePairConfig_NetworkType_names[44], 3}, 4},
        {{&IceCandidatePairConfig_NetworkType_names[47], 4}, 2},
};

static const int IceCandidatePairConfig_NetworkType_entries_by_number[] = {
    3,  // 0 -> UNKNOWN_NETWORK_TYPE
    1,  // 1 -> ETHERNET
    5,  // 2 -> WIFI
    0,  // 3 -> CELLULAR
    4,  // 4 -> VPN
    2,  // 5 -> LOOPBACK
};

const std::string& IceCandidatePairConfig_NetworkType_Name(IceCandidatePairConfig_NetworkType value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          IceCandidatePairConfig_NetworkType_entries, IceCandidatePairConfig_NetworkType_entries_by_number,
          6, IceCandidatePairConfig_NetworkType_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      IceCandidatePairConfig_NetworkType_entries, IceCandidatePairConfig_NetworkType_entries_by_number, 6,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : IceCandidatePairConfig_NetworkType_strings[idx].get();
}

bool IceCandidatePairConfig_NetworkType_Parse(absl::string_view name, IceCandidatePairConfig_NetworkType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      IceCandidatePairConfig_NetworkType_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<IceCandidatePairConfig_NetworkType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr IceCandidatePairConfig_NetworkType IceCandidatePairConfig::UNKNOWN_NETWORK_TYPE;
constexpr IceCandidatePairConfig_NetworkType IceCandidatePairConfig::ETHERNET;
constexpr IceCandidatePairConfig_NetworkType IceCandidatePairConfig::WIFI;
constexpr IceCandidatePairConfig_NetworkType IceCandidatePairConfig::CELLULAR;
constexpr IceCandidatePairConfig_NetworkType IceCandidatePairConfig::VPN;
constexpr IceCandidatePairConfig_NetworkType IceCandidatePairConfig::LOOPBACK;
constexpr IceCandidatePairConfig_NetworkType IceCandidatePairConfig::NetworkType_MIN;
constexpr IceCandidatePairConfig_NetworkType IceCandidatePairConfig::NetworkType_MAX;
constexpr int IceCandidatePairConfig::NetworkType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool IceCandidatePairEvent_IceCandidatePairEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    IceCandidatePairEvent_IceCandidatePairEventType_strings[5] = {};

static const char IceCandidatePairEvent_IceCandidatePairEventType_names[] = {
    "CHECK_RECEIVED"
    "CHECK_RESPONSE_RECEIVED"
    "CHECK_RESPONSE_SENT"
    "CHECK_SENT"
    "UNKNOWN_CHECK_TYPE"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry IceCandidatePairEvent_IceCandidatePairEventType_entries[] =
    {
        {{&IceCandidatePairEvent_IceCandidatePairEventType_names[0], 14}, 2},
        {{&IceCandidatePairEvent_IceCandidatePairEventType_names[14], 23}, 4},
        {{&IceCandidatePairEvent_IceCandidatePairEventType_names[37], 19}, 3},
        {{&IceCandidatePairEvent_IceCandidatePairEventType_names[56], 10}, 1},
        {{&IceCandidatePairEvent_IceCandidatePairEventType_names[66], 18}, 0},
};

static const int IceCandidatePairEvent_IceCandidatePairEventType_entries_by_number[] = {
    4,  // 0 -> UNKNOWN_CHECK_TYPE
    3,  // 1 -> CHECK_SENT
    0,  // 2 -> CHECK_RECEIVED
    2,  // 3 -> CHECK_RESPONSE_SENT
    1,  // 4 -> CHECK_RESPONSE_RECEIVED
};

const std::string& IceCandidatePairEvent_IceCandidatePairEventType_Name(IceCandidatePairEvent_IceCandidatePairEventType value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          IceCandidatePairEvent_IceCandidatePairEventType_entries, IceCandidatePairEvent_IceCandidatePairEventType_entries_by_number,
          5, IceCandidatePairEvent_IceCandidatePairEventType_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      IceCandidatePairEvent_IceCandidatePairEventType_entries, IceCandidatePairEvent_IceCandidatePairEventType_entries_by_number, 5,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : IceCandidatePairEvent_IceCandidatePairEventType_strings[idx].get();
}

bool IceCandidatePairEvent_IceCandidatePairEventType_Parse(absl::string_view name, IceCandidatePairEvent_IceCandidatePairEventType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      IceCandidatePairEvent_IceCandidatePairEventType_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<IceCandidatePairEvent_IceCandidatePairEventType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent::UNKNOWN_CHECK_TYPE;
constexpr IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent::CHECK_SENT;
constexpr IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent::CHECK_RECEIVED;
constexpr IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent::CHECK_RESPONSE_SENT;
constexpr IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent::CHECK_RESPONSE_RECEIVED;
constexpr IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent::IceCandidatePairEventType_MIN;
constexpr IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent::IceCandidatePairEventType_MAX;
constexpr int IceCandidatePairEvent::IceCandidatePairEventType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool DtlsTransportStateEvent_DtlsTransportState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    DtlsTransportStateEvent_DtlsTransportState_strings[6] = {};

static const char DtlsTransportStateEvent_DtlsTransportState_names[] = {
    "DTLS_TRANSPORT_CLOSED"
    "DTLS_TRANSPORT_CONNECTED"
    "DTLS_TRANSPORT_CONNECTING"
    "DTLS_TRANSPORT_FAILED"
    "DTLS_TRANSPORT_NEW"
    "UNKNOWN_DTLS_TRANSPORT_STATE"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DtlsTransportStateEvent_DtlsTransportState_entries[] =
    {
        {{&DtlsTransportStateEvent_DtlsTransportState_names[0], 21}, 4},
        {{&DtlsTransportStateEvent_DtlsTransportState_names[21], 24}, 3},
        {{&DtlsTransportStateEvent_DtlsTransportState_names[45], 25}, 2},
        {{&DtlsTransportStateEvent_DtlsTransportState_names[70], 21}, 5},
        {{&DtlsTransportStateEvent_DtlsTransportState_names[91], 18}, 1},
        {{&DtlsTransportStateEvent_DtlsTransportState_names[109], 28}, 0},
};

static const int DtlsTransportStateEvent_DtlsTransportState_entries_by_number[] = {
    5,  // 0 -> UNKNOWN_DTLS_TRANSPORT_STATE
    4,  // 1 -> DTLS_TRANSPORT_NEW
    2,  // 2 -> DTLS_TRANSPORT_CONNECTING
    1,  // 3 -> DTLS_TRANSPORT_CONNECTED
    0,  // 4 -> DTLS_TRANSPORT_CLOSED
    3,  // 5 -> DTLS_TRANSPORT_FAILED
};

const std::string& DtlsTransportStateEvent_DtlsTransportState_Name(DtlsTransportStateEvent_DtlsTransportState value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DtlsTransportStateEvent_DtlsTransportState_entries, DtlsTransportStateEvent_DtlsTransportState_entries_by_number,
          6, DtlsTransportStateEvent_DtlsTransportState_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DtlsTransportStateEvent_DtlsTransportState_entries, DtlsTransportStateEvent_DtlsTransportState_entries_by_number, 6,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : DtlsTransportStateEvent_DtlsTransportState_strings[idx].get();
}

bool DtlsTransportStateEvent_DtlsTransportState_Parse(absl::string_view name, DtlsTransportStateEvent_DtlsTransportState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DtlsTransportStateEvent_DtlsTransportState_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<DtlsTransportStateEvent_DtlsTransportState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr DtlsTransportStateEvent_DtlsTransportState DtlsTransportStateEvent::UNKNOWN_DTLS_TRANSPORT_STATE;
constexpr DtlsTransportStateEvent_DtlsTransportState DtlsTransportStateEvent::DTLS_TRANSPORT_NEW;
constexpr DtlsTransportStateEvent_DtlsTransportState DtlsTransportStateEvent::DTLS_TRANSPORT_CONNECTING;
constexpr DtlsTransportStateEvent_DtlsTransportState DtlsTransportStateEvent::DTLS_TRANSPORT_CONNECTED;
constexpr DtlsTransportStateEvent_DtlsTransportState DtlsTransportStateEvent::DTLS_TRANSPORT_CLOSED;
constexpr DtlsTransportStateEvent_DtlsTransportState DtlsTransportStateEvent::DTLS_TRANSPORT_FAILED;
constexpr DtlsTransportStateEvent_DtlsTransportState DtlsTransportStateEvent::DtlsTransportState_MIN;
constexpr DtlsTransportStateEvent_DtlsTransportState DtlsTransportStateEvent::DtlsTransportState_MAX;
constexpr int DtlsTransportStateEvent::DtlsTransportState_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class EventStream::_Internal {
 public:
};

EventStream::EventStream(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog2.EventStream)
}
EventStream::EventStream(const EventStream& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  EventStream* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stream_){from._impl_.stream_}
    , decltype(_impl_.incoming_rtp_packets_){from._impl_.incoming_rtp_packets_}
    , decltype(_impl_.outgoing_rtp_packets_){from._impl_.outgoing_rtp_packets_}
    , decltype(_impl_.incoming_rtcp_packets_){from._impl_.incoming_rtcp_packets_}
    , decltype(_impl_.outgoing_rtcp_packets_){from._impl_.outgoing_rtcp_packets_}
    , decltype(_impl_.audio_playout_events_){from._impl_.audio_playout_events_}
    , decltype(_impl_.frame_decoded_events_){from._impl_.frame_decoded_events_}
    , decltype(_impl_.begin_log_events_){from._impl_.begin_log_events_}
    , decltype(_impl_.end_log_events_){from._impl_.end_log_events_}
    , decltype(_impl_.loss_based_bwe_updates_){from._impl_.loss_based_bwe_updates_}
    , decltype(_impl_.delay_based_bwe_updates_){from._impl_.delay_based_bwe_updates_}
    , decltype(_impl_.audio_network_adaptations_){from._impl_.audio_network_adaptations_}
    , decltype(_impl_.probe_clusters_){from._impl_.probe_clusters_}
    , decltype(_impl_.probe_success_){from._impl_.probe_success_}
    , decltype(_impl_.probe_failure_){from._impl_.probe_failure_}
    , decltype(_impl_.alr_states_){from._impl_.alr_states_}
    , decltype(_impl_.ice_candidate_configs_){from._impl_.ice_candidate_configs_}
    , decltype(_impl_.ice_candidate_events_){from._impl_.ice_candidate_events_}
    , decltype(_impl_.dtls_transport_state_events_){from._impl_.dtls_transport_state_events_}
    , decltype(_impl_.dtls_writable_states_){from._impl_.dtls_writable_states_}
    , decltype(_impl_.generic_packets_sent_){from._impl_.generic_packets_sent_}
    , decltype(_impl_.generic_packets_received_){from._impl_.generic_packets_received_}
    , decltype(_impl_.generic_acks_received_){from._impl_.generic_acks_received_}
    , decltype(_impl_.route_changes_){from._impl_.route_changes_}
    , decltype(_impl_.remote_estimates_){from._impl_.remote_estimates_}
    , decltype(_impl_.neteq_set_minimum_delay_){from._impl_.neteq_set_minimum_delay_}
    , decltype(_impl_.audio_recv_stream_configs_){from._impl_.audio_recv_stream_configs_}
    , decltype(_impl_.audio_send_stream_configs_){from._impl_.audio_send_stream_configs_}
    , decltype(_impl_.video_recv_stream_configs_){from._impl_.video_recv_stream_configs_}
    , decltype(_impl_.video_send_stream_configs_){from._impl_.video_send_stream_configs_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.EventStream)
}

inline void EventStream::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.stream_){arena}
    , decltype(_impl_.incoming_rtp_packets_){arena}
    , decltype(_impl_.outgoing_rtp_packets_){arena}
    , decltype(_impl_.incoming_rtcp_packets_){arena}
    , decltype(_impl_.outgoing_rtcp_packets_){arena}
    , decltype(_impl_.audio_playout_events_){arena}
    , decltype(_impl_.frame_decoded_events_){arena}
    , decltype(_impl_.begin_log_events_){arena}
    , decltype(_impl_.end_log_events_){arena}
    , decltype(_impl_.loss_based_bwe_updates_){arena}
    , decltype(_impl_.delay_based_bwe_updates_){arena}
    , decltype(_impl_.audio_network_adaptations_){arena}
    , decltype(_impl_.probe_clusters_){arena}
    , decltype(_impl_.probe_success_){arena}
    , decltype(_impl_.probe_failure_){arena}
    , decltype(_impl_.alr_states_){arena}
    , decltype(_impl_.ice_candidate_configs_){arena}
    , decltype(_impl_.ice_candidate_events_){arena}
    , decltype(_impl_.dtls_transport_state_events_){arena}
    , decltype(_impl_.dtls_writable_states_){arena}
    , decltype(_impl_.generic_packets_sent_){arena}
    , decltype(_impl_.generic_packets_received_){arena}
    , decltype(_impl_.generic_acks_received_){arena}
    , decltype(_impl_.route_changes_){arena}
    , decltype(_impl_.remote_estimates_){arena}
    , decltype(_impl_.neteq_set_minimum_delay_){arena}
    , decltype(_impl_.audio_recv_stream_configs_){arena}
    , decltype(_impl_.audio_send_stream_configs_){arena}
    , decltype(_impl_.video_recv_stream_configs_){arena}
    , decltype(_impl_.video_send_stream_configs_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EventStream::~EventStream() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.EventStream)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventStream::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_stream()->~RepeatedPtrField();
  _internal_mutable_incoming_rtp_packets()->~RepeatedPtrField();
  _internal_mutable_outgoing_rtp_packets()->~RepeatedPtrField();
  _internal_mutable_incoming_rtcp_packets()->~RepeatedPtrField();
  _internal_mutable_outgoing_rtcp_packets()->~RepeatedPtrField();
  _internal_mutable_audio_playout_events()->~RepeatedPtrField();
  _internal_mutable_frame_decoded_events()->~RepeatedPtrField();
  _internal_mutable_begin_log_events()->~RepeatedPtrField();
  _internal_mutable_end_log_events()->~RepeatedPtrField();
  _internal_mutable_loss_based_bwe_updates()->~RepeatedPtrField();
  _internal_mutable_delay_based_bwe_updates()->~RepeatedPtrField();
  _internal_mutable_audio_network_adaptations()->~RepeatedPtrField();
  _internal_mutable_probe_clusters()->~RepeatedPtrField();
  _internal_mutable_probe_success()->~RepeatedPtrField();
  _internal_mutable_probe_failure()->~RepeatedPtrField();
  _internal_mutable_alr_states()->~RepeatedPtrField();
  _internal_mutable_ice_candidate_configs()->~RepeatedPtrField();
  _internal_mutable_ice_candidate_events()->~RepeatedPtrField();
  _internal_mutable_dtls_transport_state_events()->~RepeatedPtrField();
  _internal_mutable_dtls_writable_states()->~RepeatedPtrField();
  _internal_mutable_generic_packets_sent()->~RepeatedPtrField();
  _internal_mutable_generic_packets_received()->~RepeatedPtrField();
  _internal_mutable_generic_acks_received()->~RepeatedPtrField();
  _internal_mutable_route_changes()->~RepeatedPtrField();
  _internal_mutable_remote_estimates()->~RepeatedPtrField();
  _internal_mutable_neteq_set_minimum_delay()->~RepeatedPtrField();
  _internal_mutable_audio_recv_stream_configs()->~RepeatedPtrField();
  _internal_mutable_audio_send_stream_configs()->~RepeatedPtrField();
  _internal_mutable_video_recv_stream_configs()->~RepeatedPtrField();
  _internal_mutable_video_send_stream_configs()->~RepeatedPtrField();
}

void EventStream::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventStream::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.EventStream)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_stream()->Clear();
  _internal_mutable_incoming_rtp_packets()->Clear();
  _internal_mutable_outgoing_rtp_packets()->Clear();
  _internal_mutable_incoming_rtcp_packets()->Clear();
  _internal_mutable_outgoing_rtcp_packets()->Clear();
  _internal_mutable_audio_playout_events()->Clear();
  _internal_mutable_frame_decoded_events()->Clear();
  _internal_mutable_begin_log_events()->Clear();
  _internal_mutable_end_log_events()->Clear();
  _internal_mutable_loss_based_bwe_updates()->Clear();
  _internal_mutable_delay_based_bwe_updates()->Clear();
  _internal_mutable_audio_network_adaptations()->Clear();
  _internal_mutable_probe_clusters()->Clear();
  _internal_mutable_probe_success()->Clear();
  _internal_mutable_probe_failure()->Clear();
  _internal_mutable_alr_states()->Clear();
  _internal_mutable_ice_candidate_configs()->Clear();
  _internal_mutable_ice_candidate_events()->Clear();
  _internal_mutable_dtls_transport_state_events()->Clear();
  _internal_mutable_dtls_writable_states()->Clear();
  _internal_mutable_generic_packets_sent()->Clear();
  _internal_mutable_generic_packets_received()->Clear();
  _internal_mutable_generic_acks_received()->Clear();
  _internal_mutable_route_changes()->Clear();
  _internal_mutable_remote_estimates()->Clear();
  _internal_mutable_neteq_set_minimum_delay()->Clear();
  _internal_mutable_audio_recv_stream_configs()->Clear();
  _internal_mutable_audio_send_stream_configs()->Clear();
  _internal_mutable_video_recv_stream_configs()->Clear();
  _internal_mutable_video_send_stream_configs()->Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EventStream::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .webrtc.rtclog2.Event stream = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stream(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .webrtc.rtclog2.IncomingRtpPackets incoming_rtp_packets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_incoming_rtp_packets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .webrtc.rtclog2.OutgoingRtpPackets outgoing_rtp_packets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outgoing_rtp_packets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .webrtc.rtclog2.IncomingRtcpPackets incoming_rtcp_packets = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_incoming_rtcp_packets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .webrtc.rtclog2.OutgoingRtcpPackets outgoing_rtcp_packets = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outgoing_rtcp_packets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .webrtc.rtclog2.AudioPlayoutEvents audio_playout_events = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_audio_playout_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .webrtc.rtclog2.FrameDecodedEvents frame_decoded_events = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frame_decoded_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .webrtc.rtclog2.BeginLogEvent begin_log_events = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_begin_log_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .webrtc.rtclog2.EndLogEvent end_log_events = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_end_log_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .webrtc.rtclog2.LossBasedBweUpdates loss_based_bwe_updates = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_loss_based_bwe_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .webrtc.rtclog2.DelayBasedBweUpdates delay_based_bwe_updates = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_delay_based_bwe_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .webrtc.rtclog2.AudioNetworkAdaptations audio_network_adaptations = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_audio_network_adaptations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .webrtc.rtclog2.BweProbeCluster probe_clusters = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_probe_clusters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .webrtc.rtclog2.BweProbeResultSuccess probe_success = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_probe_success(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .webrtc.rtclog2.BweProbeResultFailure probe_failure = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_probe_failure(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .webrtc.rtclog2.AlrState alr_states = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_alr_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .webrtc.rtclog2.IceCandidatePairConfig ice_candidate_configs = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_ice_candidate_configs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .webrtc.rtclog2.IceCandidatePairEvent ice_candidate_events = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_ice_candidate_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .webrtc.rtclog2.DtlsTransportStateEvent dtls_transport_state_events = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_dtls_transport_state_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<218>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .webrtc.rtclog2.DtlsWritableState dtls_writable_states = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_dtls_writable_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .webrtc.rtclog2.GenericPacketSent generic_packets_sent = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_generic_packets_sent(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<234>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .webrtc.rtclog2.GenericPacketReceived generic_packets_received = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_generic_packets_received(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .webrtc.rtclog2.GenericAckReceived generic_acks_received = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_generic_acks_received(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<250>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .webrtc.rtclog2.RouteChange route_changes = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_route_changes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .webrtc.rtclog2.RemoteEstimates remote_estimates = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_remote_estimates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<266>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .webrtc.rtclog2.NetEqSetMinimumDelay neteq_set_minimum_delay = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_neteq_set_minimum_delay(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<274>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .webrtc.rtclog2.AudioRecvStreamConfig audio_recv_stream_configs = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_audio_recv_stream_configs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<810>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .webrtc.rtclog2.AudioSendStreamConfig audio_send_stream_configs = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_audio_send_stream_configs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<818>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .webrtc.rtclog2.VideoRecvStreamConfig video_recv_stream_configs = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_video_recv_stream_configs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<826>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .webrtc.rtclog2.VideoSendStreamConfig video_send_stream_configs = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_video_send_stream_configs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<834>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventStream::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog2.EventStream)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .webrtc.rtclog2.Event stream = 1 [deprecated = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stream_size()); i < n; i++) {
    const auto& repfield = this->_internal_stream(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .webrtc.rtclog2.IncomingRtpPackets incoming_rtp_packets = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_incoming_rtp_packets_size()); i < n; i++) {
    const auto& repfield = this->_internal_incoming_rtp_packets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .webrtc.rtclog2.OutgoingRtpPackets outgoing_rtp_packets = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_outgoing_rtp_packets_size()); i < n; i++) {
    const auto& repfield = this->_internal_outgoing_rtp_packets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .webrtc.rtclog2.IncomingRtcpPackets incoming_rtcp_packets = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_incoming_rtcp_packets_size()); i < n; i++) {
    const auto& repfield = this->_internal_incoming_rtcp_packets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .webrtc.rtclog2.OutgoingRtcpPackets outgoing_rtcp_packets = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_outgoing_rtcp_packets_size()); i < n; i++) {
    const auto& repfield = this->_internal_outgoing_rtcp_packets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .webrtc.rtclog2.AudioPlayoutEvents audio_playout_events = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_audio_playout_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_audio_playout_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .webrtc.rtclog2.FrameDecodedEvents frame_decoded_events = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_frame_decoded_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_frame_decoded_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .webrtc.rtclog2.BeginLogEvent begin_log_events = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_begin_log_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_begin_log_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .webrtc.rtclog2.EndLogEvent end_log_events = 17;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_end_log_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_end_log_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .webrtc.rtclog2.LossBasedBweUpdates loss_based_bwe_updates = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_loss_based_bwe_updates_size()); i < n; i++) {
    const auto& repfield = this->_internal_loss_based_bwe_updates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .webrtc.rtclog2.DelayBasedBweUpdates delay_based_bwe_updates = 19;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_delay_based_bwe_updates_size()); i < n; i++) {
    const auto& repfield = this->_internal_delay_based_bwe_updates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .webrtc.rtclog2.AudioNetworkAdaptations audio_network_adaptations = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_audio_network_adaptations_size()); i < n; i++) {
    const auto& repfield = this->_internal_audio_network_adaptations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .webrtc.rtclog2.BweProbeCluster probe_clusters = 21;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_probe_clusters_size()); i < n; i++) {
    const auto& repfield = this->_internal_probe_clusters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(21, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .webrtc.rtclog2.BweProbeResultSuccess probe_success = 22;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_probe_success_size()); i < n; i++) {
    const auto& repfield = this->_internal_probe_success(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(22, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .webrtc.rtclog2.BweProbeResultFailure probe_failure = 23;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_probe_failure_size()); i < n; i++) {
    const auto& repfield = this->_internal_probe_failure(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(23, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .webrtc.rtclog2.AlrState alr_states = 24;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_alr_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_alr_states(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(24, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .webrtc.rtclog2.IceCandidatePairConfig ice_candidate_configs = 25;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ice_candidate_configs_size()); i < n; i++) {
    const auto& repfield = this->_internal_ice_candidate_configs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(25, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .webrtc.rtclog2.IceCandidatePairEvent ice_candidate_events = 26;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ice_candidate_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_ice_candidate_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(26, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .webrtc.rtclog2.DtlsTransportStateEvent dtls_transport_state_events = 27;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dtls_transport_state_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_dtls_transport_state_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(27, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .webrtc.rtclog2.DtlsWritableState dtls_writable_states = 28;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dtls_writable_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_dtls_writable_states(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(28, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .webrtc.rtclog2.GenericPacketSent generic_packets_sent = 29;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_generic_packets_sent_size()); i < n; i++) {
    const auto& repfield = this->_internal_generic_packets_sent(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(29, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .webrtc.rtclog2.GenericPacketReceived generic_packets_received = 30;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_generic_packets_received_size()); i < n; i++) {
    const auto& repfield = this->_internal_generic_packets_received(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(30, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .webrtc.rtclog2.GenericAckReceived generic_acks_received = 31;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_generic_acks_received_size()); i < n; i++) {
    const auto& repfield = this->_internal_generic_acks_received(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(31, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .webrtc.rtclog2.RouteChange route_changes = 32;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_route_changes_size()); i < n; i++) {
    const auto& repfield = this->_internal_route_changes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(32, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .webrtc.rtclog2.RemoteEstimates remote_estimates = 33;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_remote_estimates_size()); i < n; i++) {
    const auto& repfield = this->_internal_remote_estimates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(33, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .webrtc.rtclog2.NetEqSetMinimumDelay neteq_set_minimum_delay = 34;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_neteq_set_minimum_delay_size()); i < n; i++) {
    const auto& repfield = this->_internal_neteq_set_minimum_delay(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(34, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .webrtc.rtclog2.AudioRecvStreamConfig audio_recv_stream_configs = 101;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_audio_recv_stream_configs_size()); i < n; i++) {
    const auto& repfield = this->_internal_audio_recv_stream_configs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(101, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .webrtc.rtclog2.AudioSendStreamConfig audio_send_stream_configs = 102;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_audio_send_stream_configs_size()); i < n; i++) {
    const auto& repfield = this->_internal_audio_send_stream_configs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(102, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .webrtc.rtclog2.VideoRecvStreamConfig video_recv_stream_configs = 103;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_video_recv_stream_configs_size()); i < n; i++) {
    const auto& repfield = this->_internal_video_recv_stream_configs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(103, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .webrtc.rtclog2.VideoSendStreamConfig video_send_stream_configs = 104;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_video_send_stream_configs_size()); i < n; i++) {
    const auto& repfield = this->_internal_video_send_stream_configs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(104, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog2.EventStream)
  return target;
}

::size_t EventStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.EventStream)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .webrtc.rtclog2.Event stream = 1 [deprecated = true];
  total_size += 1UL * this->_internal_stream_size();
  for (const auto& msg : this->_internal_stream()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .webrtc.rtclog2.IncomingRtpPackets incoming_rtp_packets = 2;
  total_size += 1UL * this->_internal_incoming_rtp_packets_size();
  for (const auto& msg : this->_internal_incoming_rtp_packets()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .webrtc.rtclog2.OutgoingRtpPackets outgoing_rtp_packets = 3;
  total_size += 1UL * this->_internal_outgoing_rtp_packets_size();
  for (const auto& msg : this->_internal_outgoing_rtp_packets()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .webrtc.rtclog2.IncomingRtcpPackets incoming_rtcp_packets = 4;
  total_size += 1UL * this->_internal_incoming_rtcp_packets_size();
  for (const auto& msg : this->_internal_incoming_rtcp_packets()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .webrtc.rtclog2.OutgoingRtcpPackets outgoing_rtcp_packets = 5;
  total_size += 1UL * this->_internal_outgoing_rtcp_packets_size();
  for (const auto& msg : this->_internal_outgoing_rtcp_packets()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .webrtc.rtclog2.AudioPlayoutEvents audio_playout_events = 6;
  total_size += 1UL * this->_internal_audio_playout_events_size();
  for (const auto& msg : this->_internal_audio_playout_events()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .webrtc.rtclog2.FrameDecodedEvents frame_decoded_events = 7;
  total_size += 1UL * this->_internal_frame_decoded_events_size();
  for (const auto& msg : this->_internal_frame_decoded_events()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .webrtc.rtclog2.BeginLogEvent begin_log_events = 16;
  total_size += 2UL * this->_internal_begin_log_events_size();
  for (const auto& msg : this->_internal_begin_log_events()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .webrtc.rtclog2.EndLogEvent end_log_events = 17;
  total_size += 2UL * this->_internal_end_log_events_size();
  for (const auto& msg : this->_internal_end_log_events()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .webrtc.rtclog2.LossBasedBweUpdates loss_based_bwe_updates = 18;
  total_size += 2UL * this->_internal_loss_based_bwe_updates_size();
  for (const auto& msg : this->_internal_loss_based_bwe_updates()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .webrtc.rtclog2.DelayBasedBweUpdates delay_based_bwe_updates = 19;
  total_size += 2UL * this->_internal_delay_based_bwe_updates_size();
  for (const auto& msg : this->_internal_delay_based_bwe_updates()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .webrtc.rtclog2.AudioNetworkAdaptations audio_network_adaptations = 20;
  total_size += 2UL * this->_internal_audio_network_adaptations_size();
  for (const auto& msg : this->_internal_audio_network_adaptations()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .webrtc.rtclog2.BweProbeCluster probe_clusters = 21;
  total_size += 2UL * this->_internal_probe_clusters_size();
  for (const auto& msg : this->_internal_probe_clusters()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .webrtc.rtclog2.BweProbeResultSuccess probe_success = 22;
  total_size += 2UL * this->_internal_probe_success_size();
  for (const auto& msg : this->_internal_probe_success()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .webrtc.rtclog2.BweProbeResultFailure probe_failure = 23;
  total_size += 2UL * this->_internal_probe_failure_size();
  for (const auto& msg : this->_internal_probe_failure()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .webrtc.rtclog2.AlrState alr_states = 24;
  total_size += 2UL * this->_internal_alr_states_size();
  for (const auto& msg : this->_internal_alr_states()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .webrtc.rtclog2.IceCandidatePairConfig ice_candidate_configs = 25;
  total_size += 2UL * this->_internal_ice_candidate_configs_size();
  for (const auto& msg : this->_internal_ice_candidate_configs()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .webrtc.rtclog2.IceCandidatePairEvent ice_candidate_events = 26;
  total_size += 2UL * this->_internal_ice_candidate_events_size();
  for (const auto& msg : this->_internal_ice_candidate_events()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .webrtc.rtclog2.DtlsTransportStateEvent dtls_transport_state_events = 27;
  total_size += 2UL * this->_internal_dtls_transport_state_events_size();
  for (const auto& msg : this->_internal_dtls_transport_state_events()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .webrtc.rtclog2.DtlsWritableState dtls_writable_states = 28;
  total_size += 2UL * this->_internal_dtls_writable_states_size();
  for (const auto& msg : this->_internal_dtls_writable_states()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .webrtc.rtclog2.GenericPacketSent generic_packets_sent = 29;
  total_size += 2UL * this->_internal_generic_packets_sent_size();
  for (const auto& msg : this->_internal_generic_packets_sent()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .webrtc.rtclog2.GenericPacketReceived generic_packets_received = 30;
  total_size += 2UL * this->_internal_generic_packets_received_size();
  for (const auto& msg : this->_internal_generic_packets_received()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .webrtc.rtclog2.GenericAckReceived generic_acks_received = 31;
  total_size += 2UL * this->_internal_generic_acks_received_size();
  for (const auto& msg : this->_internal_generic_acks_received()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .webrtc.rtclog2.RouteChange route_changes = 32;
  total_size += 2UL * this->_internal_route_changes_size();
  for (const auto& msg : this->_internal_route_changes()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .webrtc.rtclog2.RemoteEstimates remote_estimates = 33;
  total_size += 2UL * this->_internal_remote_estimates_size();
  for (const auto& msg : this->_internal_remote_estimates()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .webrtc.rtclog2.NetEqSetMinimumDelay neteq_set_minimum_delay = 34;
  total_size += 2UL * this->_internal_neteq_set_minimum_delay_size();
  for (const auto& msg : this->_internal_neteq_set_minimum_delay()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .webrtc.rtclog2.AudioRecvStreamConfig audio_recv_stream_configs = 101;
  total_size += 2UL * this->_internal_audio_recv_stream_configs_size();
  for (const auto& msg : this->_internal_audio_recv_stream_configs()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .webrtc.rtclog2.AudioSendStreamConfig audio_send_stream_configs = 102;
  total_size += 2UL * this->_internal_audio_send_stream_configs_size();
  for (const auto& msg : this->_internal_audio_send_stream_configs()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .webrtc.rtclog2.VideoRecvStreamConfig video_recv_stream_configs = 103;
  total_size += 2UL * this->_internal_video_recv_stream_configs_size();
  for (const auto& msg : this->_internal_video_recv_stream_configs()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .webrtc.rtclog2.VideoSendStreamConfig video_send_stream_configs = 104;
  total_size += 2UL * this->_internal_video_send_stream_configs_size();
  for (const auto& msg : this->_internal_video_send_stream_configs()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventStream::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EventStream*>(
      &from));
}

void EventStream::MergeFrom(const EventStream& from) {
  EventStream* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.EventStream)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_stream()->MergeFrom(from._internal_stream());
  _this->_internal_mutable_incoming_rtp_packets()->MergeFrom(from._internal_incoming_rtp_packets());
  _this->_internal_mutable_outgoing_rtp_packets()->MergeFrom(from._internal_outgoing_rtp_packets());
  _this->_internal_mutable_incoming_rtcp_packets()->MergeFrom(from._internal_incoming_rtcp_packets());
  _this->_internal_mutable_outgoing_rtcp_packets()->MergeFrom(from._internal_outgoing_rtcp_packets());
  _this->_internal_mutable_audio_playout_events()->MergeFrom(from._internal_audio_playout_events());
  _this->_internal_mutable_frame_decoded_events()->MergeFrom(from._internal_frame_decoded_events());
  _this->_internal_mutable_begin_log_events()->MergeFrom(from._internal_begin_log_events());
  _this->_internal_mutable_end_log_events()->MergeFrom(from._internal_end_log_events());
  _this->_internal_mutable_loss_based_bwe_updates()->MergeFrom(from._internal_loss_based_bwe_updates());
  _this->_internal_mutable_delay_based_bwe_updates()->MergeFrom(from._internal_delay_based_bwe_updates());
  _this->_internal_mutable_audio_network_adaptations()->MergeFrom(from._internal_audio_network_adaptations());
  _this->_internal_mutable_probe_clusters()->MergeFrom(from._internal_probe_clusters());
  _this->_internal_mutable_probe_success()->MergeFrom(from._internal_probe_success());
  _this->_internal_mutable_probe_failure()->MergeFrom(from._internal_probe_failure());
  _this->_internal_mutable_alr_states()->MergeFrom(from._internal_alr_states());
  _this->_internal_mutable_ice_candidate_configs()->MergeFrom(from._internal_ice_candidate_configs());
  _this->_internal_mutable_ice_candidate_events()->MergeFrom(from._internal_ice_candidate_events());
  _this->_internal_mutable_dtls_transport_state_events()->MergeFrom(from._internal_dtls_transport_state_events());
  _this->_internal_mutable_dtls_writable_states()->MergeFrom(from._internal_dtls_writable_states());
  _this->_internal_mutable_generic_packets_sent()->MergeFrom(from._internal_generic_packets_sent());
  _this->_internal_mutable_generic_packets_received()->MergeFrom(from._internal_generic_packets_received());
  _this->_internal_mutable_generic_acks_received()->MergeFrom(from._internal_generic_acks_received());
  _this->_internal_mutable_route_changes()->MergeFrom(from._internal_route_changes());
  _this->_internal_mutable_remote_estimates()->MergeFrom(from._internal_remote_estimates());
  _this->_internal_mutable_neteq_set_minimum_delay()->MergeFrom(from._internal_neteq_set_minimum_delay());
  _this->_internal_mutable_audio_recv_stream_configs()->MergeFrom(from._internal_audio_recv_stream_configs());
  _this->_internal_mutable_audio_send_stream_configs()->MergeFrom(from._internal_audio_send_stream_configs());
  _this->_internal_mutable_video_recv_stream_configs()->MergeFrom(from._internal_video_recv_stream_configs());
  _this->_internal_mutable_video_send_stream_configs()->MergeFrom(from._internal_video_send_stream_configs());
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EventStream::CopyFrom(const EventStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.EventStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventStream::IsInitialized() const {
  return true;
}

void EventStream::InternalSwap(EventStream* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_stream()->InternalSwap(other->_internal_mutable_stream());
  _internal_mutable_incoming_rtp_packets()->InternalSwap(other->_internal_mutable_incoming_rtp_packets());
  _internal_mutable_outgoing_rtp_packets()->InternalSwap(other->_internal_mutable_outgoing_rtp_packets());
  _internal_mutable_incoming_rtcp_packets()->InternalSwap(other->_internal_mutable_incoming_rtcp_packets());
  _internal_mutable_outgoing_rtcp_packets()->InternalSwap(other->_internal_mutable_outgoing_rtcp_packets());
  _internal_mutable_audio_playout_events()->InternalSwap(other->_internal_mutable_audio_playout_events());
  _internal_mutable_frame_decoded_events()->InternalSwap(other->_internal_mutable_frame_decoded_events());
  _internal_mutable_begin_log_events()->InternalSwap(other->_internal_mutable_begin_log_events());
  _internal_mutable_end_log_events()->InternalSwap(other->_internal_mutable_end_log_events());
  _internal_mutable_loss_based_bwe_updates()->InternalSwap(other->_internal_mutable_loss_based_bwe_updates());
  _internal_mutable_delay_based_bwe_updates()->InternalSwap(other->_internal_mutable_delay_based_bwe_updates());
  _internal_mutable_audio_network_adaptations()->InternalSwap(other->_internal_mutable_audio_network_adaptations());
  _internal_mutable_probe_clusters()->InternalSwap(other->_internal_mutable_probe_clusters());
  _internal_mutable_probe_success()->InternalSwap(other->_internal_mutable_probe_success());
  _internal_mutable_probe_failure()->InternalSwap(other->_internal_mutable_probe_failure());
  _internal_mutable_alr_states()->InternalSwap(other->_internal_mutable_alr_states());
  _internal_mutable_ice_candidate_configs()->InternalSwap(other->_internal_mutable_ice_candidate_configs());
  _internal_mutable_ice_candidate_events()->InternalSwap(other->_internal_mutable_ice_candidate_events());
  _internal_mutable_dtls_transport_state_events()->InternalSwap(other->_internal_mutable_dtls_transport_state_events());
  _internal_mutable_dtls_writable_states()->InternalSwap(other->_internal_mutable_dtls_writable_states());
  _internal_mutable_generic_packets_sent()->InternalSwap(other->_internal_mutable_generic_packets_sent());
  _internal_mutable_generic_packets_received()->InternalSwap(other->_internal_mutable_generic_packets_received());
  _internal_mutable_generic_acks_received()->InternalSwap(other->_internal_mutable_generic_acks_received());
  _internal_mutable_route_changes()->InternalSwap(other->_internal_mutable_route_changes());
  _internal_mutable_remote_estimates()->InternalSwap(other->_internal_mutable_remote_estimates());
  _internal_mutable_neteq_set_minimum_delay()->InternalSwap(other->_internal_mutable_neteq_set_minimum_delay());
  _internal_mutable_audio_recv_stream_configs()->InternalSwap(other->_internal_mutable_audio_recv_stream_configs());
  _internal_mutable_audio_send_stream_configs()->InternalSwap(other->_internal_mutable_audio_send_stream_configs());
  _internal_mutable_video_recv_stream_configs()->InternalSwap(other->_internal_mutable_video_recv_stream_configs());
  _internal_mutable_video_send_stream_configs()->InternalSwap(other->_internal_mutable_video_send_stream_configs());
}

std::string EventStream::GetTypeName() const {
  return "webrtc.rtclog2.EventStream";
}

// ===================================================================

class Event::_Internal {
 public:
};

Event::Event(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog2.Event)
}
Event::Event(const Event& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.Event)
}

inline void Event::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      /*decltype(_impl_._cached_size_)*/{}
  };
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.Event)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Event::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Event::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.Event)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* Event::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Event::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog2.Event)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog2.Event)
  return target;
}

::size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.Event)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Event*>(
      &from));
}

void Event::MergeFrom(const Event& from) {
  Event* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.Event)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string Event::GetTypeName() const {
  return "webrtc.rtclog2.Event";
}

// ===================================================================

class GenericPacketReceived::_Internal {
 public:
  using HasBits = decltype(std::declval<GenericPacketReceived>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GenericPacketReceived, _impl_._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_packet_number(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_packet_length(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_number_of_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_timestamp_ms_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_packet_number_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_packet_length_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

GenericPacketReceived::GenericPacketReceived(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog2.GenericPacketReceived)
}
GenericPacketReceived::GenericPacketReceived(const GenericPacketReceived& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GenericPacketReceived* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_ms_deltas_) {}

    , decltype(_impl_.packet_number_deltas_) {}

    , decltype(_impl_.packet_length_deltas_) {}

    , decltype(_impl_.timestamp_ms_) {}

    , decltype(_impl_.packet_number_) {}

    , decltype(_impl_.packet_length_) {}

    , decltype(_impl_.number_of_deltas_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.timestamp_ms_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_ms_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.timestamp_ms_deltas_.Set(from._internal_timestamp_ms_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.packet_number_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.packet_number_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.packet_number_deltas_.Set(from._internal_packet_number_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.packet_length_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.packet_length_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.packet_length_deltas_.Set(from._internal_packet_length_deltas(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_ms_, &from._impl_.timestamp_ms_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.number_of_deltas_) -
    reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.number_of_deltas_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.GenericPacketReceived)
}

inline void GenericPacketReceived::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_ms_deltas_) {}

    , decltype(_impl_.packet_number_deltas_) {}

    , decltype(_impl_.packet_length_deltas_) {}

    , decltype(_impl_.timestamp_ms_) { ::int64_t{0} }

    , decltype(_impl_.packet_number_) { ::int64_t{0} }

    , decltype(_impl_.packet_length_) { 0 }

    , decltype(_impl_.number_of_deltas_) { 0u }

  };
  _impl_.timestamp_ms_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_ms_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.packet_number_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.packet_number_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.packet_length_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.packet_length_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GenericPacketReceived::~GenericPacketReceived() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.GenericPacketReceived)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenericPacketReceived::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.timestamp_ms_deltas_.Destroy();
  _impl_.packet_number_deltas_.Destroy();
  _impl_.packet_length_deltas_.Destroy();
}

void GenericPacketReceived::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenericPacketReceived::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.GenericPacketReceived)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.timestamp_ms_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.packet_number_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.packet_length_deltas_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&_impl_.timestamp_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.number_of_deltas_) -
        reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.number_of_deltas_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GenericPacketReceived::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 packet_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_packet_number(&has_bits);
          _impl_.packet_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 packet_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_packet_length(&has_bits);
          _impl_.packet_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 number_of_deltas = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 128)) {
          _Internal::set_has_number_of_deltas(&has_bits);
          _impl_.number_of_deltas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes timestamp_ms_deltas = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_timestamp_ms_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes packet_number_deltas = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_packet_number_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes packet_length_deltas = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_packet_length_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GenericPacketReceived::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog2.GenericPacketReceived)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_timestamp_ms(), target);
  }

  // optional int64 packet_number = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_packet_number(), target);
  }

  // optional int32 packet_length = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_packet_length(), target);
  }

  // optional uint32 number_of_deltas = 16;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        16, this->_internal_number_of_deltas(), target);
  }

  // optional bytes timestamp_ms_deltas = 17;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_timestamp_ms_deltas();
    target = stream->WriteBytesMaybeAliased(17, _s, target);
  }

  // optional bytes packet_number_deltas = 18;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_packet_number_deltas();
    target = stream->WriteBytesMaybeAliased(18, _s, target);
  }

  // optional bytes packet_length_deltas = 19;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_packet_length_deltas();
    target = stream->WriteBytesMaybeAliased(19, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog2.GenericPacketReceived)
  return target;
}

::size_t GenericPacketReceived::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.GenericPacketReceived)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes timestamp_ms_deltas = 17;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_timestamp_ms_deltas());
    }

    // optional bytes packet_number_deltas = 18;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_packet_number_deltas());
    }

    // optional bytes packet_length_deltas = 19;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_packet_length_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp_ms());
    }

    // optional int64 packet_number = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_packet_number());
    }

    // optional int32 packet_length = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_packet_length());
    }

    // optional uint32 number_of_deltas = 16;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_number_of_deltas());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericPacketReceived::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GenericPacketReceived*>(
      &from));
}

void GenericPacketReceived::MergeFrom(const GenericPacketReceived& from) {
  GenericPacketReceived* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.GenericPacketReceived)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_timestamp_ms_deltas(from._internal_timestamp_ms_deltas());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_packet_number_deltas(from._internal_packet_number_deltas());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_packet_length_deltas(from._internal_packet_length_deltas());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.timestamp_ms_ = from._impl_.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.packet_number_ = from._impl_.packet_number_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.packet_length_ = from._impl_.packet_length_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.number_of_deltas_ = from._impl_.number_of_deltas_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GenericPacketReceived::CopyFrom(const GenericPacketReceived& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.GenericPacketReceived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericPacketReceived::IsInitialized() const {
  return true;
}

void GenericPacketReceived::InternalSwap(GenericPacketReceived* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_ms_deltas_, lhs_arena,
                                       &other->_impl_.timestamp_ms_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.packet_number_deltas_, lhs_arena,
                                       &other->_impl_.packet_number_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.packet_length_deltas_, lhs_arena,
                                       &other->_impl_.packet_length_deltas_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenericPacketReceived, _impl_.number_of_deltas_)
      + sizeof(GenericPacketReceived::_impl_.number_of_deltas_)
      - PROTOBUF_FIELD_OFFSET(GenericPacketReceived, _impl_.timestamp_ms_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_ms_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_ms_));
}

std::string GenericPacketReceived::GetTypeName() const {
  return "webrtc.rtclog2.GenericPacketReceived";
}

// ===================================================================

class GenericPacketSent::_Internal {
 public:
  using HasBits = decltype(std::declval<GenericPacketSent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GenericPacketSent, _impl_._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_packet_number(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_overhead_length(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_payload_length(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_padding_length(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_number_of_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_timestamp_ms_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_packet_number_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_overhead_length_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_payload_length_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_padding_length_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

GenericPacketSent::GenericPacketSent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog2.GenericPacketSent)
}
GenericPacketSent::GenericPacketSent(const GenericPacketSent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GenericPacketSent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_ms_deltas_) {}

    , decltype(_impl_.packet_number_deltas_) {}

    , decltype(_impl_.overhead_length_deltas_) {}

    , decltype(_impl_.payload_length_deltas_) {}

    , decltype(_impl_.padding_length_deltas_) {}

    , decltype(_impl_.timestamp_ms_) {}

    , decltype(_impl_.packet_number_) {}

    , decltype(_impl_.overhead_length_) {}

    , decltype(_impl_.payload_length_) {}

    , decltype(_impl_.padding_length_) {}

    , decltype(_impl_.number_of_deltas_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.timestamp_ms_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_ms_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.timestamp_ms_deltas_.Set(from._internal_timestamp_ms_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.packet_number_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.packet_number_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.packet_number_deltas_.Set(from._internal_packet_number_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.overhead_length_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.overhead_length_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.overhead_length_deltas_.Set(from._internal_overhead_length_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.payload_length_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payload_length_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.payload_length_deltas_.Set(from._internal_payload_length_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.padding_length_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.padding_length_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.padding_length_deltas_.Set(from._internal_padding_length_deltas(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_ms_, &from._impl_.timestamp_ms_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.number_of_deltas_) -
    reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.number_of_deltas_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.GenericPacketSent)
}

inline void GenericPacketSent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_ms_deltas_) {}

    , decltype(_impl_.packet_number_deltas_) {}

    , decltype(_impl_.overhead_length_deltas_) {}

    , decltype(_impl_.payload_length_deltas_) {}

    , decltype(_impl_.padding_length_deltas_) {}

    , decltype(_impl_.timestamp_ms_) { ::int64_t{0} }

    , decltype(_impl_.packet_number_) { ::int64_t{0} }

    , decltype(_impl_.overhead_length_) { 0 }

    , decltype(_impl_.payload_length_) { 0 }

    , decltype(_impl_.padding_length_) { 0 }

    , decltype(_impl_.number_of_deltas_) { 0u }

  };
  _impl_.timestamp_ms_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_ms_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.packet_number_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.packet_number_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.overhead_length_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.overhead_length_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payload_length_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payload_length_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.padding_length_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.padding_length_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GenericPacketSent::~GenericPacketSent() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.GenericPacketSent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenericPacketSent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.timestamp_ms_deltas_.Destroy();
  _impl_.packet_number_deltas_.Destroy();
  _impl_.overhead_length_deltas_.Destroy();
  _impl_.payload_length_deltas_.Destroy();
  _impl_.padding_length_deltas_.Destroy();
}

void GenericPacketSent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenericPacketSent::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.GenericPacketSent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.timestamp_ms_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.packet_number_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.overhead_length_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.payload_length_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.padding_length_deltas_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.timestamp_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.overhead_length_) -
        reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.overhead_length_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.payload_length_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.number_of_deltas_) -
        reinterpret_cast<char*>(&_impl_.payload_length_)) + sizeof(_impl_.number_of_deltas_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GenericPacketSent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 packet_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_packet_number(&has_bits);
          _impl_.packet_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 overhead_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_overhead_length(&has_bits);
          _impl_.overhead_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 payload_length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_payload_length(&has_bits);
          _impl_.payload_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 padding_length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_padding_length(&has_bits);
          _impl_.padding_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 number_of_deltas = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 128)) {
          _Internal::set_has_number_of_deltas(&has_bits);
          _impl_.number_of_deltas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes timestamp_ms_deltas = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_timestamp_ms_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes packet_number_deltas = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_packet_number_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes overhead_length_deltas = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_overhead_length_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes payload_length_deltas = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_payload_length_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes padding_length_deltas = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_padding_length_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GenericPacketSent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog2.GenericPacketSent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_timestamp_ms(), target);
  }

  // optional int64 packet_number = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_packet_number(), target);
  }

  // optional int32 overhead_length = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_overhead_length(), target);
  }

  // optional int32 payload_length = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_payload_length(), target);
  }

  // optional int32 padding_length = 5;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_padding_length(), target);
  }

  // optional uint32 number_of_deltas = 16;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        16, this->_internal_number_of_deltas(), target);
  }

  // optional bytes timestamp_ms_deltas = 17;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_timestamp_ms_deltas();
    target = stream->WriteBytesMaybeAliased(17, _s, target);
  }

  // optional bytes packet_number_deltas = 18;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_packet_number_deltas();
    target = stream->WriteBytesMaybeAliased(18, _s, target);
  }

  // optional bytes overhead_length_deltas = 19;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_overhead_length_deltas();
    target = stream->WriteBytesMaybeAliased(19, _s, target);
  }

  // optional bytes payload_length_deltas = 20;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_payload_length_deltas();
    target = stream->WriteBytesMaybeAliased(20, _s, target);
  }

  // optional bytes padding_length_deltas = 21;
  if (cached_has_bits & 0x00000010u) {
    const std::string& _s = this->_internal_padding_length_deltas();
    target = stream->WriteBytesMaybeAliased(21, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog2.GenericPacketSent)
  return target;
}

::size_t GenericPacketSent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.GenericPacketSent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes timestamp_ms_deltas = 17;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_timestamp_ms_deltas());
    }

    // optional bytes packet_number_deltas = 18;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_packet_number_deltas());
    }

    // optional bytes overhead_length_deltas = 19;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_overhead_length_deltas());
    }

    // optional bytes payload_length_deltas = 20;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_payload_length_deltas());
    }

    // optional bytes padding_length_deltas = 21;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_padding_length_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp_ms());
    }

    // optional int64 packet_number = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_packet_number());
    }

    // optional int32 overhead_length = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_overhead_length());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional int32 payload_length = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_payload_length());
    }

    // optional int32 padding_length = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_padding_length());
    }

    // optional uint32 number_of_deltas = 16;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_number_of_deltas());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericPacketSent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GenericPacketSent*>(
      &from));
}

void GenericPacketSent::MergeFrom(const GenericPacketSent& from) {
  GenericPacketSent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.GenericPacketSent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_timestamp_ms_deltas(from._internal_timestamp_ms_deltas());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_packet_number_deltas(from._internal_packet_number_deltas());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_overhead_length_deltas(from._internal_overhead_length_deltas());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_payload_length_deltas(from._internal_payload_length_deltas());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_padding_length_deltas(from._internal_padding_length_deltas());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.timestamp_ms_ = from._impl_.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.packet_number_ = from._impl_.packet_number_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.overhead_length_ = from._impl_.overhead_length_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.payload_length_ = from._impl_.payload_length_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.padding_length_ = from._impl_.padding_length_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.number_of_deltas_ = from._impl_.number_of_deltas_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GenericPacketSent::CopyFrom(const GenericPacketSent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.GenericPacketSent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericPacketSent::IsInitialized() const {
  return true;
}

void GenericPacketSent::InternalSwap(GenericPacketSent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_ms_deltas_, lhs_arena,
                                       &other->_impl_.timestamp_ms_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.packet_number_deltas_, lhs_arena,
                                       &other->_impl_.packet_number_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.overhead_length_deltas_, lhs_arena,
                                       &other->_impl_.overhead_length_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.payload_length_deltas_, lhs_arena,
                                       &other->_impl_.payload_length_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.padding_length_deltas_, lhs_arena,
                                       &other->_impl_.padding_length_deltas_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenericPacketSent, _impl_.number_of_deltas_)
      + sizeof(GenericPacketSent::_impl_.number_of_deltas_)
      - PROTOBUF_FIELD_OFFSET(GenericPacketSent, _impl_.timestamp_ms_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_ms_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_ms_));
}

std::string GenericPacketSent::GetTypeName() const {
  return "webrtc.rtclog2.GenericPacketSent";
}

// ===================================================================

class GenericAckReceived::_Internal {
 public:
  using HasBits = decltype(std::declval<GenericAckReceived>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GenericAckReceived, _impl_._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_packet_number(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_acked_packet_number(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_receive_acked_packet_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_number_of_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_timestamp_ms_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_packet_number_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_acked_packet_number_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_receive_acked_packet_time_ms_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

GenericAckReceived::GenericAckReceived(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog2.GenericAckReceived)
}
GenericAckReceived::GenericAckReceived(const GenericAckReceived& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GenericAckReceived* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_ms_deltas_) {}

    , decltype(_impl_.packet_number_deltas_) {}

    , decltype(_impl_.acked_packet_number_deltas_) {}

    , decltype(_impl_.receive_acked_packet_time_ms_deltas_) {}

    , decltype(_impl_.timestamp_ms_) {}

    , decltype(_impl_.packet_number_) {}

    , decltype(_impl_.acked_packet_number_) {}

    , decltype(_impl_.receive_acked_packet_time_ms_) {}

    , decltype(_impl_.number_of_deltas_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.timestamp_ms_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_ms_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.timestamp_ms_deltas_.Set(from._internal_timestamp_ms_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.packet_number_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.packet_number_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.packet_number_deltas_.Set(from._internal_packet_number_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.acked_packet_number_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.acked_packet_number_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.acked_packet_number_deltas_.Set(from._internal_acked_packet_number_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.receive_acked_packet_time_ms_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.receive_acked_packet_time_ms_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.receive_acked_packet_time_ms_deltas_.Set(from._internal_receive_acked_packet_time_ms_deltas(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_ms_, &from._impl_.timestamp_ms_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.number_of_deltas_) -
    reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.number_of_deltas_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.GenericAckReceived)
}

inline void GenericAckReceived::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_ms_deltas_) {}

    , decltype(_impl_.packet_number_deltas_) {}

    , decltype(_impl_.acked_packet_number_deltas_) {}

    , decltype(_impl_.receive_acked_packet_time_ms_deltas_) {}

    , decltype(_impl_.timestamp_ms_) { ::int64_t{0} }

    , decltype(_impl_.packet_number_) { ::int64_t{0} }

    , decltype(_impl_.acked_packet_number_) { ::int64_t{0} }

    , decltype(_impl_.receive_acked_packet_time_ms_) { ::int64_t{0} }

    , decltype(_impl_.number_of_deltas_) { 0u }

  };
  _impl_.timestamp_ms_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_ms_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.packet_number_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.packet_number_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.acked_packet_number_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.acked_packet_number_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.receive_acked_packet_time_ms_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.receive_acked_packet_time_ms_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GenericAckReceived::~GenericAckReceived() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.GenericAckReceived)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenericAckReceived::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.timestamp_ms_deltas_.Destroy();
  _impl_.packet_number_deltas_.Destroy();
  _impl_.acked_packet_number_deltas_.Destroy();
  _impl_.receive_acked_packet_time_ms_deltas_.Destroy();
}

void GenericAckReceived::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenericAckReceived::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.GenericAckReceived)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.timestamp_ms_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.packet_number_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.acked_packet_number_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.receive_acked_packet_time_ms_deltas_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.timestamp_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.receive_acked_packet_time_ms_) -
        reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.receive_acked_packet_time_ms_));
  }
  _impl_.number_of_deltas_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GenericAckReceived::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 packet_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_packet_number(&has_bits);
          _impl_.packet_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 acked_packet_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_acked_packet_number(&has_bits);
          _impl_.acked_packet_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 receive_acked_packet_time_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_receive_acked_packet_time_ms(&has_bits);
          _impl_.receive_acked_packet_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 number_of_deltas = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 128)) {
          _Internal::set_has_number_of_deltas(&has_bits);
          _impl_.number_of_deltas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes timestamp_ms_deltas = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_timestamp_ms_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes packet_number_deltas = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_packet_number_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes acked_packet_number_deltas = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_acked_packet_number_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes receive_acked_packet_time_ms_deltas = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_receive_acked_packet_time_ms_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GenericAckReceived::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog2.GenericAckReceived)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_timestamp_ms(), target);
  }

  // optional int64 packet_number = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_packet_number(), target);
  }

  // optional int64 acked_packet_number = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_acked_packet_number(), target);
  }

  // optional int64 receive_acked_packet_time_ms = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        4, this->_internal_receive_acked_packet_time_ms(), target);
  }

  // optional uint32 number_of_deltas = 16;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        16, this->_internal_number_of_deltas(), target);
  }

  // optional bytes timestamp_ms_deltas = 17;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_timestamp_ms_deltas();
    target = stream->WriteBytesMaybeAliased(17, _s, target);
  }

  // optional bytes packet_number_deltas = 18;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_packet_number_deltas();
    target = stream->WriteBytesMaybeAliased(18, _s, target);
  }

  // optional bytes acked_packet_number_deltas = 19;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_acked_packet_number_deltas();
    target = stream->WriteBytesMaybeAliased(19, _s, target);
  }

  // optional bytes receive_acked_packet_time_ms_deltas = 20;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_receive_acked_packet_time_ms_deltas();
    target = stream->WriteBytesMaybeAliased(20, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog2.GenericAckReceived)
  return target;
}

::size_t GenericAckReceived::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.GenericAckReceived)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes timestamp_ms_deltas = 17;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_timestamp_ms_deltas());
    }

    // optional bytes packet_number_deltas = 18;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_packet_number_deltas());
    }

    // optional bytes acked_packet_number_deltas = 19;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_acked_packet_number_deltas());
    }

    // optional bytes receive_acked_packet_time_ms_deltas = 20;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_receive_acked_packet_time_ms_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp_ms());
    }

    // optional int64 packet_number = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_packet_number());
    }

    // optional int64 acked_packet_number = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_acked_packet_number());
    }

    // optional int64 receive_acked_packet_time_ms = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_receive_acked_packet_time_ms());
    }

  }
  // optional uint32 number_of_deltas = 16;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                    this->_internal_number_of_deltas());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericAckReceived::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GenericAckReceived*>(
      &from));
}

void GenericAckReceived::MergeFrom(const GenericAckReceived& from) {
  GenericAckReceived* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.GenericAckReceived)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_timestamp_ms_deltas(from._internal_timestamp_ms_deltas());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_packet_number_deltas(from._internal_packet_number_deltas());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_acked_packet_number_deltas(from._internal_acked_packet_number_deltas());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_receive_acked_packet_time_ms_deltas(from._internal_receive_acked_packet_time_ms_deltas());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.timestamp_ms_ = from._impl_.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.packet_number_ = from._impl_.packet_number_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.acked_packet_number_ = from._impl_.acked_packet_number_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.receive_acked_packet_time_ms_ = from._impl_.receive_acked_packet_time_ms_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_number_of_deltas(from._internal_number_of_deltas());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GenericAckReceived::CopyFrom(const GenericAckReceived& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.GenericAckReceived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericAckReceived::IsInitialized() const {
  return true;
}

void GenericAckReceived::InternalSwap(GenericAckReceived* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_ms_deltas_, lhs_arena,
                                       &other->_impl_.timestamp_ms_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.packet_number_deltas_, lhs_arena,
                                       &other->_impl_.packet_number_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.acked_packet_number_deltas_, lhs_arena,
                                       &other->_impl_.acked_packet_number_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.receive_acked_packet_time_ms_deltas_, lhs_arena,
                                       &other->_impl_.receive_acked_packet_time_ms_deltas_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenericAckReceived, _impl_.number_of_deltas_)
      + sizeof(GenericAckReceived::_impl_.number_of_deltas_)
      - PROTOBUF_FIELD_OFFSET(GenericAckReceived, _impl_.timestamp_ms_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_ms_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_ms_));
}

std::string GenericAckReceived::GetTypeName() const {
  return "webrtc.rtclog2.GenericAckReceived";
}

// ===================================================================

class DependencyDescriptorsWireInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DependencyDescriptorsWireInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DependencyDescriptorsWireInfo, _impl_._has_bits_);
  static void set_has_start_end_bit(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_start_end_bit_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_template_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_template_id_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_frame_id_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_extended_infos(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

DependencyDescriptorsWireInfo::DependencyDescriptorsWireInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog2.DependencyDescriptorsWireInfo)
}
DependencyDescriptorsWireInfo::DependencyDescriptorsWireInfo(const DependencyDescriptorsWireInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  DependencyDescriptorsWireInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_end_bit_deltas_) {}

    , decltype(_impl_.template_id_deltas_) {}

    , decltype(_impl_.frame_id_deltas_) {}

    , decltype(_impl_.extended_infos_) {}

    , decltype(_impl_.start_end_bit_) {}

    , decltype(_impl_.template_id_) {}

    , decltype(_impl_.frame_id_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.start_end_bit_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.start_end_bit_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.start_end_bit_deltas_.Set(from._internal_start_end_bit_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.template_id_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.template_id_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.template_id_deltas_.Set(from._internal_template_id_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.frame_id_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.frame_id_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.frame_id_deltas_.Set(from._internal_frame_id_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.extended_infos_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.extended_infos_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.extended_infos_.Set(from._internal_extended_infos(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.start_end_bit_, &from._impl_.start_end_bit_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.frame_id_) -
    reinterpret_cast<char*>(&_impl_.start_end_bit_)) + sizeof(_impl_.frame_id_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.DependencyDescriptorsWireInfo)
}

inline void DependencyDescriptorsWireInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_end_bit_deltas_) {}

    , decltype(_impl_.template_id_deltas_) {}

    , decltype(_impl_.frame_id_deltas_) {}

    , decltype(_impl_.extended_infos_) {}

    , decltype(_impl_.start_end_bit_) { 0u }

    , decltype(_impl_.template_id_) { 0u }

    , decltype(_impl_.frame_id_) { 0u }

  };
  _impl_.start_end_bit_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.start_end_bit_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.template_id_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.template_id_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.frame_id_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.frame_id_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.extended_infos_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.extended_infos_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DependencyDescriptorsWireInfo::~DependencyDescriptorsWireInfo() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.DependencyDescriptorsWireInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DependencyDescriptorsWireInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.start_end_bit_deltas_.Destroy();
  _impl_.template_id_deltas_.Destroy();
  _impl_.frame_id_deltas_.Destroy();
  _impl_.extended_infos_.Destroy();
}

void DependencyDescriptorsWireInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DependencyDescriptorsWireInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.DependencyDescriptorsWireInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.start_end_bit_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.template_id_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.frame_id_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.extended_infos_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&_impl_.start_end_bit_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.frame_id_) -
        reinterpret_cast<char*>(&_impl_.start_end_bit_)) + sizeof(_impl_.frame_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DependencyDescriptorsWireInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 start_end_bit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_start_end_bit(&has_bits);
          _impl_.start_end_bit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes start_end_bit_deltas = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_start_end_bit_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 template_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_template_id(&has_bits);
          _impl_.template_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes template_id_deltas = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_template_id_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 frame_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_frame_id(&has_bits);
          _impl_.frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes frame_id_deltas = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_frame_id_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes extended_infos = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_extended_infos();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DependencyDescriptorsWireInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog2.DependencyDescriptorsWireInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 start_end_bit = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_start_end_bit(), target);
  }

  // optional bytes start_end_bit_deltas = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_start_end_bit_deltas();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // optional uint32 template_id = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_template_id(), target);
  }

  // optional bytes template_id_deltas = 4;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_template_id_deltas();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  // optional uint32 frame_id = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_frame_id(), target);
  }

  // optional bytes frame_id_deltas = 6;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_frame_id_deltas();
    target = stream->WriteBytesMaybeAliased(6, _s, target);
  }

  // optional bytes extended_infos = 7;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_extended_infos();
    target = stream->WriteBytesMaybeAliased(7, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog2.DependencyDescriptorsWireInfo)
  return target;
}

::size_t DependencyDescriptorsWireInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.DependencyDescriptorsWireInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes start_end_bit_deltas = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_start_end_bit_deltas());
    }

    // optional bytes template_id_deltas = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_template_id_deltas());
    }

    // optional bytes frame_id_deltas = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_frame_id_deltas());
    }

    // optional bytes extended_infos = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_extended_infos());
    }

    // optional uint32 start_end_bit = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_start_end_bit());
    }

    // optional uint32 template_id = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_template_id());
    }

    // optional uint32 frame_id = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_frame_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DependencyDescriptorsWireInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DependencyDescriptorsWireInfo*>(
      &from));
}

void DependencyDescriptorsWireInfo::MergeFrom(const DependencyDescriptorsWireInfo& from) {
  DependencyDescriptorsWireInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.DependencyDescriptorsWireInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_start_end_bit_deltas(from._internal_start_end_bit_deltas());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_template_id_deltas(from._internal_template_id_deltas());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_frame_id_deltas(from._internal_frame_id_deltas());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_extended_infos(from._internal_extended_infos());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.start_end_bit_ = from._impl_.start_end_bit_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.template_id_ = from._impl_.template_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.frame_id_ = from._impl_.frame_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DependencyDescriptorsWireInfo::CopyFrom(const DependencyDescriptorsWireInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.DependencyDescriptorsWireInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DependencyDescriptorsWireInfo::IsInitialized() const {
  return true;
}

void DependencyDescriptorsWireInfo::InternalSwap(DependencyDescriptorsWireInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.start_end_bit_deltas_, lhs_arena,
                                       &other->_impl_.start_end_bit_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.template_id_deltas_, lhs_arena,
                                       &other->_impl_.template_id_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.frame_id_deltas_, lhs_arena,
                                       &other->_impl_.frame_id_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.extended_infos_, lhs_arena,
                                       &other->_impl_.extended_infos_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DependencyDescriptorsWireInfo, _impl_.frame_id_)
      + sizeof(DependencyDescriptorsWireInfo::_impl_.frame_id_)
      - PROTOBUF_FIELD_OFFSET(DependencyDescriptorsWireInfo, _impl_.start_end_bit_)>(
          reinterpret_cast<char*>(&_impl_.start_end_bit_),
          reinterpret_cast<char*>(&other->_impl_.start_end_bit_));
}

std::string DependencyDescriptorsWireInfo::GetTypeName() const {
  return "webrtc.rtclog2.DependencyDescriptorsWireInfo";
}

// ===================================================================

class IncomingRtpPackets::_Internal {
 public:
  using HasBits = decltype(std::declval<IncomingRtpPackets>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(IncomingRtpPackets, _impl_._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_marker(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_payload_type(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_rtp_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_ssrc(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_payload_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_header_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_padding_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_number_of_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_transport_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_transmission_time_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_absolute_send_time(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_video_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_audio_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_voice_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::webrtc::rtclog2::DependencyDescriptorsWireInfo& dependency_descriptor(const IncomingRtpPackets* msg);
  static void set_has_dependency_descriptor(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_timestamp_ms_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_marker_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_payload_type_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sequence_number_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rtp_timestamp_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ssrc_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_payload_size_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_header_size_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_padding_size_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_transport_sequence_number_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_transmission_time_offset_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_absolute_send_time_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_video_rotation_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_audio_level_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_voice_activity_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

const ::webrtc::rtclog2::DependencyDescriptorsWireInfo&
IncomingRtpPackets::_Internal::dependency_descriptor(const IncomingRtpPackets* msg) {
  return *msg->_impl_.dependency_descriptor_;
}
IncomingRtpPackets::IncomingRtpPackets(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog2.IncomingRtpPackets)
}
IncomingRtpPackets::IncomingRtpPackets(const IncomingRtpPackets& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IncomingRtpPackets* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_ms_deltas_) {}

    , decltype(_impl_.marker_deltas_) {}

    , decltype(_impl_.payload_type_deltas_) {}

    , decltype(_impl_.sequence_number_deltas_) {}

    , decltype(_impl_.rtp_timestamp_deltas_) {}

    , decltype(_impl_.ssrc_deltas_) {}

    , decltype(_impl_.payload_size_deltas_) {}

    , decltype(_impl_.header_size_deltas_) {}

    , decltype(_impl_.padding_size_deltas_) {}

    , decltype(_impl_.transport_sequence_number_deltas_) {}

    , decltype(_impl_.transmission_time_offset_deltas_) {}

    , decltype(_impl_.absolute_send_time_deltas_) {}

    , decltype(_impl_.video_rotation_deltas_) {}

    , decltype(_impl_.audio_level_deltas_) {}

    , decltype(_impl_.voice_activity_deltas_) {}

    , decltype(_impl_.dependency_descriptor_){nullptr}
    , decltype(_impl_.timestamp_ms_) {}

    , decltype(_impl_.payload_type_) {}

    , decltype(_impl_.sequence_number_) {}

    , decltype(_impl_.rtp_timestamp_) {}

    , decltype(_impl_.ssrc_) {}

    , decltype(_impl_.payload_size_) {}

    , decltype(_impl_.header_size_) {}

    , decltype(_impl_.padding_size_) {}

    , decltype(_impl_.number_of_deltas_) {}

    , decltype(_impl_.marker_) {}

    , decltype(_impl_.voice_activity_) {}

    , decltype(_impl_.transport_sequence_number_) {}

    , decltype(_impl_.transmission_time_offset_) {}

    , decltype(_impl_.absolute_send_time_) {}

    , decltype(_impl_.video_rotation_) {}

    , decltype(_impl_.audio_level_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.timestamp_ms_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_ms_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.timestamp_ms_deltas_.Set(from._internal_timestamp_ms_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.marker_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.marker_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.marker_deltas_.Set(from._internal_marker_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.payload_type_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payload_type_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.payload_type_deltas_.Set(from._internal_payload_type_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.sequence_number_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sequence_number_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.sequence_number_deltas_.Set(from._internal_sequence_number_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.rtp_timestamp_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rtp_timestamp_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.rtp_timestamp_deltas_.Set(from._internal_rtp_timestamp_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.ssrc_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ssrc_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000020u) != 0) {
    _this->_impl_.ssrc_deltas_.Set(from._internal_ssrc_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.payload_size_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payload_size_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000040u) != 0) {
    _this->_impl_.payload_size_deltas_.Set(from._internal_payload_size_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.header_size_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.header_size_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000080u) != 0) {
    _this->_impl_.header_size_deltas_.Set(from._internal_header_size_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.padding_size_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.padding_size_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000100u) != 0) {
    _this->_impl_.padding_size_deltas_.Set(from._internal_padding_size_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.transport_sequence_number_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.transport_sequence_number_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000200u) != 0) {
    _this->_impl_.transport_sequence_number_deltas_.Set(from._internal_transport_sequence_number_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.transmission_time_offset_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.transmission_time_offset_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000400u) != 0) {
    _this->_impl_.transmission_time_offset_deltas_.Set(from._internal_transmission_time_offset_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.absolute_send_time_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.absolute_send_time_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000800u) != 0) {
    _this->_impl_.absolute_send_time_deltas_.Set(from._internal_absolute_send_time_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.video_rotation_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.video_rotation_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00001000u) != 0) {
    _this->_impl_.video_rotation_deltas_.Set(from._internal_video_rotation_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.audio_level_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.audio_level_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00002000u) != 0) {
    _this->_impl_.audio_level_deltas_.Set(from._internal_audio_level_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.voice_activity_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.voice_activity_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00004000u) != 0) {
    _this->_impl_.voice_activity_deltas_.Set(from._internal_voice_activity_deltas(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00008000u) != 0) {
    _this->_impl_.dependency_descriptor_ = new ::webrtc::rtclog2::DependencyDescriptorsWireInfo(*from._impl_.dependency_descriptor_);
  }
  ::memcpy(&_impl_.timestamp_ms_, &from._impl_.timestamp_ms_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.audio_level_) -
    reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.audio_level_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.IncomingRtpPackets)
}

inline void IncomingRtpPackets::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_ms_deltas_) {}

    , decltype(_impl_.marker_deltas_) {}

    , decltype(_impl_.payload_type_deltas_) {}

    , decltype(_impl_.sequence_number_deltas_) {}

    , decltype(_impl_.rtp_timestamp_deltas_) {}

    , decltype(_impl_.ssrc_deltas_) {}

    , decltype(_impl_.payload_size_deltas_) {}

    , decltype(_impl_.header_size_deltas_) {}

    , decltype(_impl_.padding_size_deltas_) {}

    , decltype(_impl_.transport_sequence_number_deltas_) {}

    , decltype(_impl_.transmission_time_offset_deltas_) {}

    , decltype(_impl_.absolute_send_time_deltas_) {}

    , decltype(_impl_.video_rotation_deltas_) {}

    , decltype(_impl_.audio_level_deltas_) {}

    , decltype(_impl_.voice_activity_deltas_) {}

    , decltype(_impl_.dependency_descriptor_){nullptr}
    , decltype(_impl_.timestamp_ms_) { ::int64_t{0} }

    , decltype(_impl_.payload_type_) { 0u }

    , decltype(_impl_.sequence_number_) { 0u }

    , decltype(_impl_.rtp_timestamp_) { 0u }

    , decltype(_impl_.ssrc_) { 0u }

    , decltype(_impl_.payload_size_) { 0u }

    , decltype(_impl_.header_size_) { 0u }

    , decltype(_impl_.padding_size_) { 0u }

    , decltype(_impl_.number_of_deltas_) { 0u }

    , decltype(_impl_.marker_) { false }

    , decltype(_impl_.voice_activity_) { false }

    , decltype(_impl_.transport_sequence_number_) { 0u }

    , decltype(_impl_.transmission_time_offset_) { 0 }

    , decltype(_impl_.absolute_send_time_) { 0u }

    , decltype(_impl_.video_rotation_) { 0u }

    , decltype(_impl_.audio_level_) { 0u }

  };
  _impl_.timestamp_ms_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_ms_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.marker_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.marker_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payload_type_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payload_type_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sequence_number_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sequence_number_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rtp_timestamp_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rtp_timestamp_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ssrc_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ssrc_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payload_size_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payload_size_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.header_size_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.header_size_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.padding_size_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.padding_size_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.transport_sequence_number_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.transport_sequence_number_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.transmission_time_offset_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.transmission_time_offset_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.absolute_send_time_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.absolute_send_time_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.video_rotation_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.video_rotation_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.audio_level_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.audio_level_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.voice_activity_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.voice_activity_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IncomingRtpPackets::~IncomingRtpPackets() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.IncomingRtpPackets)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IncomingRtpPackets::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.timestamp_ms_deltas_.Destroy();
  _impl_.marker_deltas_.Destroy();
  _impl_.payload_type_deltas_.Destroy();
  _impl_.sequence_number_deltas_.Destroy();
  _impl_.rtp_timestamp_deltas_.Destroy();
  _impl_.ssrc_deltas_.Destroy();
  _impl_.payload_size_deltas_.Destroy();
  _impl_.header_size_deltas_.Destroy();
  _impl_.padding_size_deltas_.Destroy();
  _impl_.transport_sequence_number_deltas_.Destroy();
  _impl_.transmission_time_offset_deltas_.Destroy();
  _impl_.absolute_send_time_deltas_.Destroy();
  _impl_.video_rotation_deltas_.Destroy();
  _impl_.audio_level_deltas_.Destroy();
  _impl_.voice_activity_deltas_.Destroy();
  if (this != internal_default_instance()) delete _impl_.dependency_descriptor_;
}

void IncomingRtpPackets::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IncomingRtpPackets::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.IncomingRtpPackets)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.timestamp_ms_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.marker_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.payload_type_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.sequence_number_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.rtp_timestamp_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.ssrc_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.payload_size_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.header_size_deltas_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.padding_size_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.transport_sequence_number_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.transmission_time_offset_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.absolute_send_time_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.video_rotation_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.audio_level_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.voice_activity_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00008000u) {
      ABSL_DCHECK(_impl_.dependency_descriptor_ != nullptr);
      _impl_.dependency_descriptor_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.timestamp_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.padding_size_) -
        reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.padding_size_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.number_of_deltas_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.audio_level_) -
        reinterpret_cast<char*>(&_impl_.number_of_deltas_)) + sizeof(_impl_.audio_level_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IncomingRtpPackets::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool marker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_marker(&has_bits);
          _impl_.marker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 payload_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_payload_type(&has_bits);
          _impl_.payload_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 sequence_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_sequence_number(&has_bits);
          _impl_.sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional fixed32 rtp_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 45)) {
          _Internal::set_has_rtp_timestamp(&has_bits);
          _impl_.rtp_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::uint32_t>(ptr);
          ptr += sizeof(::uint32_t);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional fixed32 ssrc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 53)) {
          _Internal::set_has_ssrc(&has_bits);
          _impl_.ssrc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::uint32_t>(ptr);
          ptr += sizeof(::uint32_t);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 payload_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_payload_size(&has_bits);
          _impl_.payload_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 header_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_header_size(&has_bits);
          _impl_.header_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 padding_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _Internal::set_has_padding_size(&has_bits);
          _impl_.padding_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 number_of_deltas = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _Internal::set_has_number_of_deltas(&has_bits);
          _impl_.number_of_deltas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 transport_sequence_number = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 120)) {
          _Internal::set_has_transport_sequence_number(&has_bits);
          _impl_.transport_sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 transmission_time_offset = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 128)) {
          _Internal::set_has_transmission_time_offset(&has_bits);
          _impl_.transmission_time_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 absolute_send_time = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 136)) {
          _Internal::set_has_absolute_send_time(&has_bits);
          _impl_.absolute_send_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 video_rotation = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 144)) {
          _Internal::set_has_video_rotation(&has_bits);
          _impl_.video_rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 audio_level = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 152)) {
          _Internal::set_has_audio_level(&has_bits);
          _impl_.audio_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool voice_activity = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 160)) {
          _Internal::set_has_voice_activity(&has_bits);
          _impl_.voice_activity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .webrtc.rtclog2.DependencyDescriptorsWireInfo dependency_descriptor = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_dependency_descriptor(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes timestamp_ms_deltas = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_timestamp_ms_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes marker_deltas = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_marker_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes payload_type_deltas = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_payload_type_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes sequence_number_deltas = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_sequence_number_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes rtp_timestamp_deltas = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_rtp_timestamp_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes ssrc_deltas = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_ssrc_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes payload_size_deltas = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_payload_size_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes header_size_deltas = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_header_size_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes padding_size_deltas = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_padding_size_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes transport_sequence_number_deltas = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_transport_sequence_number_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes transmission_time_offset_deltas = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_transmission_time_offset_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes absolute_send_time_deltas = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_absolute_send_time_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes video_rotation_deltas = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_video_rotation_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes audio_level_deltas = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_audio_level_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes voice_activity_deltas = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_voice_activity_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* IncomingRtpPackets::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog2.IncomingRtpPackets)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_timestamp_ms(), target);
  }

  // optional bool marker = 2;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_marker(), target);
  }

  // optional uint32 payload_type = 3;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_payload_type(), target);
  }

  // optional uint32 sequence_number = 4;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_sequence_number(), target);
  }

  // optional fixed32 rtp_timestamp = 5;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        5, this->_internal_rtp_timestamp(), target);
  }

  // optional fixed32 ssrc = 6;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        6, this->_internal_ssrc(), target);
  }

  // optional uint32 payload_size = 8;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this->_internal_payload_size(), target);
  }

  // optional uint32 header_size = 9;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_header_size(), target);
  }

  // optional uint32 padding_size = 10;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this->_internal_padding_size(), target);
  }

  // optional uint32 number_of_deltas = 11;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        11, this->_internal_number_of_deltas(), target);
  }

  // optional uint32 transport_sequence_number = 15;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        15, this->_internal_transport_sequence_number(), target);
  }

  // optional int32 transmission_time_offset = 16;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        16, this->_internal_transmission_time_offset(), target);
  }

  // optional uint32 absolute_send_time = 17;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        17, this->_internal_absolute_send_time(), target);
  }

  // optional uint32 video_rotation = 18;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        18, this->_internal_video_rotation(), target);
  }

  // optional uint32 audio_level = 19;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        19, this->_internal_audio_level(), target);
  }

  // optional bool voice_activity = 20;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        20, this->_internal_voice_activity(), target);
  }

  // optional .webrtc.rtclog2.DependencyDescriptorsWireInfo dependency_descriptor = 21;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::dependency_descriptor(this),
        _Internal::dependency_descriptor(this).GetCachedSize(), target, stream);
  }

  // optional bytes timestamp_ms_deltas = 101;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_timestamp_ms_deltas();
    target = stream->WriteBytesMaybeAliased(101, _s, target);
  }

  // optional bytes marker_deltas = 102;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_marker_deltas();
    target = stream->WriteBytesMaybeAliased(102, _s, target);
  }

  // optional bytes payload_type_deltas = 103;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_payload_type_deltas();
    target = stream->WriteBytesMaybeAliased(103, _s, target);
  }

  // optional bytes sequence_number_deltas = 104;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_sequence_number_deltas();
    target = stream->WriteBytesMaybeAliased(104, _s, target);
  }

  // optional bytes rtp_timestamp_deltas = 105;
  if (cached_has_bits & 0x00000010u) {
    const std::string& _s = this->_internal_rtp_timestamp_deltas();
    target = stream->WriteBytesMaybeAliased(105, _s, target);
  }

  // optional bytes ssrc_deltas = 106;
  if (cached_has_bits & 0x00000020u) {
    const std::string& _s = this->_internal_ssrc_deltas();
    target = stream->WriteBytesMaybeAliased(106, _s, target);
  }

  // optional bytes payload_size_deltas = 108;
  if (cached_has_bits & 0x00000040u) {
    const std::string& _s = this->_internal_payload_size_deltas();
    target = stream->WriteBytesMaybeAliased(108, _s, target);
  }

  // optional bytes header_size_deltas = 109;
  if (cached_has_bits & 0x00000080u) {
    const std::string& _s = this->_internal_header_size_deltas();
    target = stream->WriteBytesMaybeAliased(109, _s, target);
  }

  // optional bytes padding_size_deltas = 110;
  if (cached_has_bits & 0x00000100u) {
    const std::string& _s = this->_internal_padding_size_deltas();
    target = stream->WriteBytesMaybeAliased(110, _s, target);
  }

  // optional bytes transport_sequence_number_deltas = 115;
  if (cached_has_bits & 0x00000200u) {
    const std::string& _s = this->_internal_transport_sequence_number_deltas();
    target = stream->WriteBytesMaybeAliased(115, _s, target);
  }

  // optional bytes transmission_time_offset_deltas = 116;
  if (cached_has_bits & 0x00000400u) {
    const std::string& _s = this->_internal_transmission_time_offset_deltas();
    target = stream->WriteBytesMaybeAliased(116, _s, target);
  }

  // optional bytes absolute_send_time_deltas = 117;
  if (cached_has_bits & 0x00000800u) {
    const std::string& _s = this->_internal_absolute_send_time_deltas();
    target = stream->WriteBytesMaybeAliased(117, _s, target);
  }

  // optional bytes video_rotation_deltas = 118;
  if (cached_has_bits & 0x00001000u) {
    const std::string& _s = this->_internal_video_rotation_deltas();
    target = stream->WriteBytesMaybeAliased(118, _s, target);
  }

  // optional bytes audio_level_deltas = 119;
  if (cached_has_bits & 0x00002000u) {
    const std::string& _s = this->_internal_audio_level_deltas();
    target = stream->WriteBytesMaybeAliased(119, _s, target);
  }

  // optional bytes voice_activity_deltas = 120;
  if (cached_has_bits & 0x00004000u) {
    const std::string& _s = this->_internal_voice_activity_deltas();
    target = stream->WriteBytesMaybeAliased(120, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog2.IncomingRtpPackets)
  return target;
}

::size_t IncomingRtpPackets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.IncomingRtpPackets)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes timestamp_ms_deltas = 101;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_timestamp_ms_deltas());
    }

    // optional bytes marker_deltas = 102;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_marker_deltas());
    }

    // optional bytes payload_type_deltas = 103;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_payload_type_deltas());
    }

    // optional bytes sequence_number_deltas = 104;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_sequence_number_deltas());
    }

    // optional bytes rtp_timestamp_deltas = 105;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_rtp_timestamp_deltas());
    }

    // optional bytes ssrc_deltas = 106;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_ssrc_deltas());
    }

    // optional bytes payload_size_deltas = 108;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_payload_size_deltas());
    }

    // optional bytes header_size_deltas = 109;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_header_size_deltas());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bytes padding_size_deltas = 110;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_padding_size_deltas());
    }

    // optional bytes transport_sequence_number_deltas = 115;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_transport_sequence_number_deltas());
    }

    // optional bytes transmission_time_offset_deltas = 116;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_transmission_time_offset_deltas());
    }

    // optional bytes absolute_send_time_deltas = 117;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_absolute_send_time_deltas());
    }

    // optional bytes video_rotation_deltas = 118;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_video_rotation_deltas());
    }

    // optional bytes audio_level_deltas = 119;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_audio_level_deltas());
    }

    // optional bytes voice_activity_deltas = 120;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_voice_activity_deltas());
    }

    // optional .webrtc.rtclog2.DependencyDescriptorsWireInfo dependency_descriptor = 21;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dependency_descriptor_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00010000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp_ms());
    }

    // optional uint32 payload_type = 3;
    if (cached_has_bits & 0x00020000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_payload_type());
    }

    // optional uint32 sequence_number = 4;
    if (cached_has_bits & 0x00040000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_sequence_number());
    }

    // optional fixed32 rtp_timestamp = 5;
    if (cached_has_bits & 0x00080000u) {
      total_size += 5;
    }

    // optional fixed32 ssrc = 6;
    if (cached_has_bits & 0x00100000u) {
      total_size += 5;
    }

    // optional uint32 payload_size = 8;
    if (cached_has_bits & 0x00200000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_payload_size());
    }

    // optional uint32 header_size = 9;
    if (cached_has_bits & 0x00400000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_header_size());
    }

    // optional uint32 padding_size = 10;
    if (cached_has_bits & 0x00800000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_padding_size());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 number_of_deltas = 11;
    if (cached_has_bits & 0x01000000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_number_of_deltas());
    }

    // optional bool marker = 2;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2;
    }

    // optional bool voice_activity = 20;
    if (cached_has_bits & 0x04000000u) {
      total_size += 3;
    }

    // optional uint32 transport_sequence_number = 15;
    if (cached_has_bits & 0x08000000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_transport_sequence_number());
    }

    // optional int32 transmission_time_offset = 16;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_transmission_time_offset());
    }

    // optional uint32 absolute_send_time = 17;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_absolute_send_time());
    }

    // optional uint32 video_rotation = 18;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_video_rotation());
    }

    // optional uint32 audio_level = 19;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_audio_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IncomingRtpPackets::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IncomingRtpPackets*>(
      &from));
}

void IncomingRtpPackets::MergeFrom(const IncomingRtpPackets& from) {
  IncomingRtpPackets* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.IncomingRtpPackets)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_timestamp_ms_deltas(from._internal_timestamp_ms_deltas());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_marker_deltas(from._internal_marker_deltas());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_payload_type_deltas(from._internal_payload_type_deltas());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_sequence_number_deltas(from._internal_sequence_number_deltas());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_rtp_timestamp_deltas(from._internal_rtp_timestamp_deltas());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_ssrc_deltas(from._internal_ssrc_deltas());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_payload_size_deltas(from._internal_payload_size_deltas());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_header_size_deltas(from._internal_header_size_deltas());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_padding_size_deltas(from._internal_padding_size_deltas());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_set_transport_sequence_number_deltas(from._internal_transport_sequence_number_deltas());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_set_transmission_time_offset_deltas(from._internal_transmission_time_offset_deltas());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_set_absolute_send_time_deltas(from._internal_absolute_send_time_deltas());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_set_video_rotation_deltas(from._internal_video_rotation_deltas());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_set_audio_level_deltas(from._internal_audio_level_deltas());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_set_voice_activity_deltas(from._internal_voice_activity_deltas());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_dependency_descriptor()->::webrtc::rtclog2::DependencyDescriptorsWireInfo::MergeFrom(
          from._internal_dependency_descriptor());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.timestamp_ms_ = from._impl_.timestamp_ms_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.payload_type_ = from._impl_.payload_type_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.sequence_number_ = from._impl_.sequence_number_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.rtp_timestamp_ = from._impl_.rtp_timestamp_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.ssrc_ = from._impl_.ssrc_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.payload_size_ = from._impl_.payload_size_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.header_size_ = from._impl_.header_size_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.padding_size_ = from._impl_.padding_size_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.number_of_deltas_ = from._impl_.number_of_deltas_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.marker_ = from._impl_.marker_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.voice_activity_ = from._impl_.voice_activity_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.transport_sequence_number_ = from._impl_.transport_sequence_number_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.transmission_time_offset_ = from._impl_.transmission_time_offset_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.absolute_send_time_ = from._impl_.absolute_send_time_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.video_rotation_ = from._impl_.video_rotation_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.audio_level_ = from._impl_.audio_level_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IncomingRtpPackets::CopyFrom(const IncomingRtpPackets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.IncomingRtpPackets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncomingRtpPackets::IsInitialized() const {
  return true;
}

void IncomingRtpPackets::InternalSwap(IncomingRtpPackets* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_ms_deltas_, lhs_arena,
                                       &other->_impl_.timestamp_ms_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.marker_deltas_, lhs_arena,
                                       &other->_impl_.marker_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.payload_type_deltas_, lhs_arena,
                                       &other->_impl_.payload_type_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sequence_number_deltas_, lhs_arena,
                                       &other->_impl_.sequence_number_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rtp_timestamp_deltas_, lhs_arena,
                                       &other->_impl_.rtp_timestamp_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ssrc_deltas_, lhs_arena,
                                       &other->_impl_.ssrc_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.payload_size_deltas_, lhs_arena,
                                       &other->_impl_.payload_size_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.header_size_deltas_, lhs_arena,
                                       &other->_impl_.header_size_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.padding_size_deltas_, lhs_arena,
                                       &other->_impl_.padding_size_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.transport_sequence_number_deltas_, lhs_arena,
                                       &other->_impl_.transport_sequence_number_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.transmission_time_offset_deltas_, lhs_arena,
                                       &other->_impl_.transmission_time_offset_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.absolute_send_time_deltas_, lhs_arena,
                                       &other->_impl_.absolute_send_time_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.video_rotation_deltas_, lhs_arena,
                                       &other->_impl_.video_rotation_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.audio_level_deltas_, lhs_arena,
                                       &other->_impl_.audio_level_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.voice_activity_deltas_, lhs_arena,
                                       &other->_impl_.voice_activity_deltas_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IncomingRtpPackets, _impl_.audio_level_)
      + sizeof(IncomingRtpPackets::_impl_.audio_level_)
      - PROTOBUF_FIELD_OFFSET(IncomingRtpPackets, _impl_.dependency_descriptor_)>(
          reinterpret_cast<char*>(&_impl_.dependency_descriptor_),
          reinterpret_cast<char*>(&other->_impl_.dependency_descriptor_));
}

std::string IncomingRtpPackets::GetTypeName() const {
  return "webrtc.rtclog2.IncomingRtpPackets";
}

// ===================================================================

class OutgoingRtpPackets::_Internal {
 public:
  using HasBits = decltype(std::declval<OutgoingRtpPackets>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(OutgoingRtpPackets, _impl_._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_marker(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_payload_type(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_rtp_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_ssrc(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_payload_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_header_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_padding_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_number_of_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_transport_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_transmission_time_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_absolute_send_time(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_video_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_audio_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_voice_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::webrtc::rtclog2::DependencyDescriptorsWireInfo& dependency_descriptor(const OutgoingRtpPackets* msg);
  static void set_has_dependency_descriptor(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_timestamp_ms_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_marker_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_payload_type_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sequence_number_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rtp_timestamp_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ssrc_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_payload_size_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_header_size_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_padding_size_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_transport_sequence_number_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_transmission_time_offset_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_absolute_send_time_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_video_rotation_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_audio_level_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_voice_activity_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

const ::webrtc::rtclog2::DependencyDescriptorsWireInfo&
OutgoingRtpPackets::_Internal::dependency_descriptor(const OutgoingRtpPackets* msg) {
  return *msg->_impl_.dependency_descriptor_;
}
OutgoingRtpPackets::OutgoingRtpPackets(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog2.OutgoingRtpPackets)
}
OutgoingRtpPackets::OutgoingRtpPackets(const OutgoingRtpPackets& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  OutgoingRtpPackets* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_ms_deltas_) {}

    , decltype(_impl_.marker_deltas_) {}

    , decltype(_impl_.payload_type_deltas_) {}

    , decltype(_impl_.sequence_number_deltas_) {}

    , decltype(_impl_.rtp_timestamp_deltas_) {}

    , decltype(_impl_.ssrc_deltas_) {}

    , decltype(_impl_.payload_size_deltas_) {}

    , decltype(_impl_.header_size_deltas_) {}

    , decltype(_impl_.padding_size_deltas_) {}

    , decltype(_impl_.transport_sequence_number_deltas_) {}

    , decltype(_impl_.transmission_time_offset_deltas_) {}

    , decltype(_impl_.absolute_send_time_deltas_) {}

    , decltype(_impl_.video_rotation_deltas_) {}

    , decltype(_impl_.audio_level_deltas_) {}

    , decltype(_impl_.voice_activity_deltas_) {}

    , decltype(_impl_.dependency_descriptor_){nullptr}
    , decltype(_impl_.timestamp_ms_) {}

    , decltype(_impl_.payload_type_) {}

    , decltype(_impl_.sequence_number_) {}

    , decltype(_impl_.rtp_timestamp_) {}

    , decltype(_impl_.ssrc_) {}

    , decltype(_impl_.payload_size_) {}

    , decltype(_impl_.header_size_) {}

    , decltype(_impl_.padding_size_) {}

    , decltype(_impl_.number_of_deltas_) {}

    , decltype(_impl_.marker_) {}

    , decltype(_impl_.voice_activity_) {}

    , decltype(_impl_.transport_sequence_number_) {}

    , decltype(_impl_.transmission_time_offset_) {}

    , decltype(_impl_.absolute_send_time_) {}

    , decltype(_impl_.video_rotation_) {}

    , decltype(_impl_.audio_level_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.timestamp_ms_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_ms_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.timestamp_ms_deltas_.Set(from._internal_timestamp_ms_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.marker_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.marker_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.marker_deltas_.Set(from._internal_marker_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.payload_type_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payload_type_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.payload_type_deltas_.Set(from._internal_payload_type_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.sequence_number_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sequence_number_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.sequence_number_deltas_.Set(from._internal_sequence_number_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.rtp_timestamp_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rtp_timestamp_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.rtp_timestamp_deltas_.Set(from._internal_rtp_timestamp_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.ssrc_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ssrc_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000020u) != 0) {
    _this->_impl_.ssrc_deltas_.Set(from._internal_ssrc_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.payload_size_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payload_size_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000040u) != 0) {
    _this->_impl_.payload_size_deltas_.Set(from._internal_payload_size_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.header_size_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.header_size_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000080u) != 0) {
    _this->_impl_.header_size_deltas_.Set(from._internal_header_size_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.padding_size_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.padding_size_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000100u) != 0) {
    _this->_impl_.padding_size_deltas_.Set(from._internal_padding_size_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.transport_sequence_number_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.transport_sequence_number_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000200u) != 0) {
    _this->_impl_.transport_sequence_number_deltas_.Set(from._internal_transport_sequence_number_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.transmission_time_offset_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.transmission_time_offset_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000400u) != 0) {
    _this->_impl_.transmission_time_offset_deltas_.Set(from._internal_transmission_time_offset_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.absolute_send_time_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.absolute_send_time_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000800u) != 0) {
    _this->_impl_.absolute_send_time_deltas_.Set(from._internal_absolute_send_time_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.video_rotation_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.video_rotation_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00001000u) != 0) {
    _this->_impl_.video_rotation_deltas_.Set(from._internal_video_rotation_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.audio_level_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.audio_level_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00002000u) != 0) {
    _this->_impl_.audio_level_deltas_.Set(from._internal_audio_level_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.voice_activity_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.voice_activity_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00004000u) != 0) {
    _this->_impl_.voice_activity_deltas_.Set(from._internal_voice_activity_deltas(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00008000u) != 0) {
    _this->_impl_.dependency_descriptor_ = new ::webrtc::rtclog2::DependencyDescriptorsWireInfo(*from._impl_.dependency_descriptor_);
  }
  ::memcpy(&_impl_.timestamp_ms_, &from._impl_.timestamp_ms_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.audio_level_) -
    reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.audio_level_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.OutgoingRtpPackets)
}

inline void OutgoingRtpPackets::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_ms_deltas_) {}

    , decltype(_impl_.marker_deltas_) {}

    , decltype(_impl_.payload_type_deltas_) {}

    , decltype(_impl_.sequence_number_deltas_) {}

    , decltype(_impl_.rtp_timestamp_deltas_) {}

    , decltype(_impl_.ssrc_deltas_) {}

    , decltype(_impl_.payload_size_deltas_) {}

    , decltype(_impl_.header_size_deltas_) {}

    , decltype(_impl_.padding_size_deltas_) {}

    , decltype(_impl_.transport_sequence_number_deltas_) {}

    , decltype(_impl_.transmission_time_offset_deltas_) {}

    , decltype(_impl_.absolute_send_time_deltas_) {}

    , decltype(_impl_.video_rotation_deltas_) {}

    , decltype(_impl_.audio_level_deltas_) {}

    , decltype(_impl_.voice_activity_deltas_) {}

    , decltype(_impl_.dependency_descriptor_){nullptr}
    , decltype(_impl_.timestamp_ms_) { ::int64_t{0} }

    , decltype(_impl_.payload_type_) { 0u }

    , decltype(_impl_.sequence_number_) { 0u }

    , decltype(_impl_.rtp_timestamp_) { 0u }

    , decltype(_impl_.ssrc_) { 0u }

    , decltype(_impl_.payload_size_) { 0u }

    , decltype(_impl_.header_size_) { 0u }

    , decltype(_impl_.padding_size_) { 0u }

    , decltype(_impl_.number_of_deltas_) { 0u }

    , decltype(_impl_.marker_) { false }

    , decltype(_impl_.voice_activity_) { false }

    , decltype(_impl_.transport_sequence_number_) { 0u }

    , decltype(_impl_.transmission_time_offset_) { 0 }

    , decltype(_impl_.absolute_send_time_) { 0u }

    , decltype(_impl_.video_rotation_) { 0u }

    , decltype(_impl_.audio_level_) { 0u }

  };
  _impl_.timestamp_ms_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_ms_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.marker_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.marker_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payload_type_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payload_type_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sequence_number_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sequence_number_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rtp_timestamp_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rtp_timestamp_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ssrc_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ssrc_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payload_size_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payload_size_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.header_size_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.header_size_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.padding_size_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.padding_size_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.transport_sequence_number_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.transport_sequence_number_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.transmission_time_offset_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.transmission_time_offset_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.absolute_send_time_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.absolute_send_time_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.video_rotation_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.video_rotation_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.audio_level_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.audio_level_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.voice_activity_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.voice_activity_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OutgoingRtpPackets::~OutgoingRtpPackets() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.OutgoingRtpPackets)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OutgoingRtpPackets::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.timestamp_ms_deltas_.Destroy();
  _impl_.marker_deltas_.Destroy();
  _impl_.payload_type_deltas_.Destroy();
  _impl_.sequence_number_deltas_.Destroy();
  _impl_.rtp_timestamp_deltas_.Destroy();
  _impl_.ssrc_deltas_.Destroy();
  _impl_.payload_size_deltas_.Destroy();
  _impl_.header_size_deltas_.Destroy();
  _impl_.padding_size_deltas_.Destroy();
  _impl_.transport_sequence_number_deltas_.Destroy();
  _impl_.transmission_time_offset_deltas_.Destroy();
  _impl_.absolute_send_time_deltas_.Destroy();
  _impl_.video_rotation_deltas_.Destroy();
  _impl_.audio_level_deltas_.Destroy();
  _impl_.voice_activity_deltas_.Destroy();
  if (this != internal_default_instance()) delete _impl_.dependency_descriptor_;
}

void OutgoingRtpPackets::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OutgoingRtpPackets::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.OutgoingRtpPackets)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.timestamp_ms_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.marker_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.payload_type_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.sequence_number_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.rtp_timestamp_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.ssrc_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.payload_size_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.header_size_deltas_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.padding_size_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.transport_sequence_number_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.transmission_time_offset_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.absolute_send_time_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.video_rotation_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.audio_level_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.voice_activity_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00008000u) {
      ABSL_DCHECK(_impl_.dependency_descriptor_ != nullptr);
      _impl_.dependency_descriptor_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.timestamp_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.padding_size_) -
        reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.padding_size_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.number_of_deltas_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.audio_level_) -
        reinterpret_cast<char*>(&_impl_.number_of_deltas_)) + sizeof(_impl_.audio_level_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* OutgoingRtpPackets::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool marker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_marker(&has_bits);
          _impl_.marker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 payload_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_payload_type(&has_bits);
          _impl_.payload_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 sequence_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_sequence_number(&has_bits);
          _impl_.sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional fixed32 rtp_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 45)) {
          _Internal::set_has_rtp_timestamp(&has_bits);
          _impl_.rtp_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::uint32_t>(ptr);
          ptr += sizeof(::uint32_t);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional fixed32 ssrc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 53)) {
          _Internal::set_has_ssrc(&has_bits);
          _impl_.ssrc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::uint32_t>(ptr);
          ptr += sizeof(::uint32_t);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 payload_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_payload_size(&has_bits);
          _impl_.payload_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 header_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_header_size(&has_bits);
          _impl_.header_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 padding_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _Internal::set_has_padding_size(&has_bits);
          _impl_.padding_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 number_of_deltas = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _Internal::set_has_number_of_deltas(&has_bits);
          _impl_.number_of_deltas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 transport_sequence_number = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 120)) {
          _Internal::set_has_transport_sequence_number(&has_bits);
          _impl_.transport_sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 transmission_time_offset = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 128)) {
          _Internal::set_has_transmission_time_offset(&has_bits);
          _impl_.transmission_time_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 absolute_send_time = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 136)) {
          _Internal::set_has_absolute_send_time(&has_bits);
          _impl_.absolute_send_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 video_rotation = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 144)) {
          _Internal::set_has_video_rotation(&has_bits);
          _impl_.video_rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 audio_level = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 152)) {
          _Internal::set_has_audio_level(&has_bits);
          _impl_.audio_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool voice_activity = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 160)) {
          _Internal::set_has_voice_activity(&has_bits);
          _impl_.voice_activity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .webrtc.rtclog2.DependencyDescriptorsWireInfo dependency_descriptor = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_dependency_descriptor(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes timestamp_ms_deltas = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_timestamp_ms_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes marker_deltas = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_marker_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes payload_type_deltas = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_payload_type_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes sequence_number_deltas = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_sequence_number_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes rtp_timestamp_deltas = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_rtp_timestamp_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes ssrc_deltas = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_ssrc_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes payload_size_deltas = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_payload_size_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes header_size_deltas = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_header_size_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes padding_size_deltas = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_padding_size_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes transport_sequence_number_deltas = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_transport_sequence_number_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes transmission_time_offset_deltas = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_transmission_time_offset_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes absolute_send_time_deltas = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_absolute_send_time_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes video_rotation_deltas = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_video_rotation_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes audio_level_deltas = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_audio_level_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes voice_activity_deltas = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_voice_activity_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OutgoingRtpPackets::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog2.OutgoingRtpPackets)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_timestamp_ms(), target);
  }

  // optional bool marker = 2;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_marker(), target);
  }

  // optional uint32 payload_type = 3;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_payload_type(), target);
  }

  // optional uint32 sequence_number = 4;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_sequence_number(), target);
  }

  // optional fixed32 rtp_timestamp = 5;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        5, this->_internal_rtp_timestamp(), target);
  }

  // optional fixed32 ssrc = 6;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        6, this->_internal_ssrc(), target);
  }

  // optional uint32 payload_size = 8;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this->_internal_payload_size(), target);
  }

  // optional uint32 header_size = 9;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_header_size(), target);
  }

  // optional uint32 padding_size = 10;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this->_internal_padding_size(), target);
  }

  // optional uint32 number_of_deltas = 11;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        11, this->_internal_number_of_deltas(), target);
  }

  // optional uint32 transport_sequence_number = 15;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        15, this->_internal_transport_sequence_number(), target);
  }

  // optional int32 transmission_time_offset = 16;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        16, this->_internal_transmission_time_offset(), target);
  }

  // optional uint32 absolute_send_time = 17;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        17, this->_internal_absolute_send_time(), target);
  }

  // optional uint32 video_rotation = 18;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        18, this->_internal_video_rotation(), target);
  }

  // optional uint32 audio_level = 19;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        19, this->_internal_audio_level(), target);
  }

  // optional bool voice_activity = 20;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        20, this->_internal_voice_activity(), target);
  }

  // optional .webrtc.rtclog2.DependencyDescriptorsWireInfo dependency_descriptor = 21;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::dependency_descriptor(this),
        _Internal::dependency_descriptor(this).GetCachedSize(), target, stream);
  }

  // optional bytes timestamp_ms_deltas = 101;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_timestamp_ms_deltas();
    target = stream->WriteBytesMaybeAliased(101, _s, target);
  }

  // optional bytes marker_deltas = 102;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_marker_deltas();
    target = stream->WriteBytesMaybeAliased(102, _s, target);
  }

  // optional bytes payload_type_deltas = 103;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_payload_type_deltas();
    target = stream->WriteBytesMaybeAliased(103, _s, target);
  }

  // optional bytes sequence_number_deltas = 104;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_sequence_number_deltas();
    target = stream->WriteBytesMaybeAliased(104, _s, target);
  }

  // optional bytes rtp_timestamp_deltas = 105;
  if (cached_has_bits & 0x00000010u) {
    const std::string& _s = this->_internal_rtp_timestamp_deltas();
    target = stream->WriteBytesMaybeAliased(105, _s, target);
  }

  // optional bytes ssrc_deltas = 106;
  if (cached_has_bits & 0x00000020u) {
    const std::string& _s = this->_internal_ssrc_deltas();
    target = stream->WriteBytesMaybeAliased(106, _s, target);
  }

  // optional bytes payload_size_deltas = 108;
  if (cached_has_bits & 0x00000040u) {
    const std::string& _s = this->_internal_payload_size_deltas();
    target = stream->WriteBytesMaybeAliased(108, _s, target);
  }

  // optional bytes header_size_deltas = 109;
  if (cached_has_bits & 0x00000080u) {
    const std::string& _s = this->_internal_header_size_deltas();
    target = stream->WriteBytesMaybeAliased(109, _s, target);
  }

  // optional bytes padding_size_deltas = 110;
  if (cached_has_bits & 0x00000100u) {
    const std::string& _s = this->_internal_padding_size_deltas();
    target = stream->WriteBytesMaybeAliased(110, _s, target);
  }

  // optional bytes transport_sequence_number_deltas = 115;
  if (cached_has_bits & 0x00000200u) {
    const std::string& _s = this->_internal_transport_sequence_number_deltas();
    target = stream->WriteBytesMaybeAliased(115, _s, target);
  }

  // optional bytes transmission_time_offset_deltas = 116;
  if (cached_has_bits & 0x00000400u) {
    const std::string& _s = this->_internal_transmission_time_offset_deltas();
    target = stream->WriteBytesMaybeAliased(116, _s, target);
  }

  // optional bytes absolute_send_time_deltas = 117;
  if (cached_has_bits & 0x00000800u) {
    const std::string& _s = this->_internal_absolute_send_time_deltas();
    target = stream->WriteBytesMaybeAliased(117, _s, target);
  }

  // optional bytes video_rotation_deltas = 118;
  if (cached_has_bits & 0x00001000u) {
    const std::string& _s = this->_internal_video_rotation_deltas();
    target = stream->WriteBytesMaybeAliased(118, _s, target);
  }

  // optional bytes audio_level_deltas = 119;
  if (cached_has_bits & 0x00002000u) {
    const std::string& _s = this->_internal_audio_level_deltas();
    target = stream->WriteBytesMaybeAliased(119, _s, target);
  }

  // optional bytes voice_activity_deltas = 120;
  if (cached_has_bits & 0x00004000u) {
    const std::string& _s = this->_internal_voice_activity_deltas();
    target = stream->WriteBytesMaybeAliased(120, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog2.OutgoingRtpPackets)
  return target;
}

::size_t OutgoingRtpPackets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.OutgoingRtpPackets)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes timestamp_ms_deltas = 101;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_timestamp_ms_deltas());
    }

    // optional bytes marker_deltas = 102;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_marker_deltas());
    }

    // optional bytes payload_type_deltas = 103;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_payload_type_deltas());
    }

    // optional bytes sequence_number_deltas = 104;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_sequence_number_deltas());
    }

    // optional bytes rtp_timestamp_deltas = 105;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_rtp_timestamp_deltas());
    }

    // optional bytes ssrc_deltas = 106;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_ssrc_deltas());
    }

    // optional bytes payload_size_deltas = 108;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_payload_size_deltas());
    }

    // optional bytes header_size_deltas = 109;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_header_size_deltas());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bytes padding_size_deltas = 110;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_padding_size_deltas());
    }

    // optional bytes transport_sequence_number_deltas = 115;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_transport_sequence_number_deltas());
    }

    // optional bytes transmission_time_offset_deltas = 116;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_transmission_time_offset_deltas());
    }

    // optional bytes absolute_send_time_deltas = 117;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_absolute_send_time_deltas());
    }

    // optional bytes video_rotation_deltas = 118;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_video_rotation_deltas());
    }

    // optional bytes audio_level_deltas = 119;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_audio_level_deltas());
    }

    // optional bytes voice_activity_deltas = 120;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_voice_activity_deltas());
    }

    // optional .webrtc.rtclog2.DependencyDescriptorsWireInfo dependency_descriptor = 21;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dependency_descriptor_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00010000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp_ms());
    }

    // optional uint32 payload_type = 3;
    if (cached_has_bits & 0x00020000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_payload_type());
    }

    // optional uint32 sequence_number = 4;
    if (cached_has_bits & 0x00040000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_sequence_number());
    }

    // optional fixed32 rtp_timestamp = 5;
    if (cached_has_bits & 0x00080000u) {
      total_size += 5;
    }

    // optional fixed32 ssrc = 6;
    if (cached_has_bits & 0x00100000u) {
      total_size += 5;
    }

    // optional uint32 payload_size = 8;
    if (cached_has_bits & 0x00200000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_payload_size());
    }

    // optional uint32 header_size = 9;
    if (cached_has_bits & 0x00400000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_header_size());
    }

    // optional uint32 padding_size = 10;
    if (cached_has_bits & 0x00800000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_padding_size());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 number_of_deltas = 11;
    if (cached_has_bits & 0x01000000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_number_of_deltas());
    }

    // optional bool marker = 2;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2;
    }

    // optional bool voice_activity = 20;
    if (cached_has_bits & 0x04000000u) {
      total_size += 3;
    }

    // optional uint32 transport_sequence_number = 15;
    if (cached_has_bits & 0x08000000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_transport_sequence_number());
    }

    // optional int32 transmission_time_offset = 16;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_transmission_time_offset());
    }

    // optional uint32 absolute_send_time = 17;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_absolute_send_time());
    }

    // optional uint32 video_rotation = 18;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_video_rotation());
    }

    // optional uint32 audio_level = 19;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_audio_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OutgoingRtpPackets::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const OutgoingRtpPackets*>(
      &from));
}

void OutgoingRtpPackets::MergeFrom(const OutgoingRtpPackets& from) {
  OutgoingRtpPackets* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.OutgoingRtpPackets)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_timestamp_ms_deltas(from._internal_timestamp_ms_deltas());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_marker_deltas(from._internal_marker_deltas());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_payload_type_deltas(from._internal_payload_type_deltas());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_sequence_number_deltas(from._internal_sequence_number_deltas());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_rtp_timestamp_deltas(from._internal_rtp_timestamp_deltas());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_ssrc_deltas(from._internal_ssrc_deltas());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_payload_size_deltas(from._internal_payload_size_deltas());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_header_size_deltas(from._internal_header_size_deltas());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_padding_size_deltas(from._internal_padding_size_deltas());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_set_transport_sequence_number_deltas(from._internal_transport_sequence_number_deltas());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_set_transmission_time_offset_deltas(from._internal_transmission_time_offset_deltas());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_set_absolute_send_time_deltas(from._internal_absolute_send_time_deltas());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_set_video_rotation_deltas(from._internal_video_rotation_deltas());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_set_audio_level_deltas(from._internal_audio_level_deltas());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_set_voice_activity_deltas(from._internal_voice_activity_deltas());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_dependency_descriptor()->::webrtc::rtclog2::DependencyDescriptorsWireInfo::MergeFrom(
          from._internal_dependency_descriptor());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.timestamp_ms_ = from._impl_.timestamp_ms_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.payload_type_ = from._impl_.payload_type_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.sequence_number_ = from._impl_.sequence_number_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.rtp_timestamp_ = from._impl_.rtp_timestamp_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.ssrc_ = from._impl_.ssrc_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.payload_size_ = from._impl_.payload_size_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.header_size_ = from._impl_.header_size_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.padding_size_ = from._impl_.padding_size_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.number_of_deltas_ = from._impl_.number_of_deltas_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.marker_ = from._impl_.marker_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.voice_activity_ = from._impl_.voice_activity_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.transport_sequence_number_ = from._impl_.transport_sequence_number_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.transmission_time_offset_ = from._impl_.transmission_time_offset_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.absolute_send_time_ = from._impl_.absolute_send_time_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.video_rotation_ = from._impl_.video_rotation_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.audio_level_ = from._impl_.audio_level_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void OutgoingRtpPackets::CopyFrom(const OutgoingRtpPackets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.OutgoingRtpPackets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutgoingRtpPackets::IsInitialized() const {
  return true;
}

void OutgoingRtpPackets::InternalSwap(OutgoingRtpPackets* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_ms_deltas_, lhs_arena,
                                       &other->_impl_.timestamp_ms_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.marker_deltas_, lhs_arena,
                                       &other->_impl_.marker_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.payload_type_deltas_, lhs_arena,
                                       &other->_impl_.payload_type_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sequence_number_deltas_, lhs_arena,
                                       &other->_impl_.sequence_number_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rtp_timestamp_deltas_, lhs_arena,
                                       &other->_impl_.rtp_timestamp_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ssrc_deltas_, lhs_arena,
                                       &other->_impl_.ssrc_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.payload_size_deltas_, lhs_arena,
                                       &other->_impl_.payload_size_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.header_size_deltas_, lhs_arena,
                                       &other->_impl_.header_size_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.padding_size_deltas_, lhs_arena,
                                       &other->_impl_.padding_size_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.transport_sequence_number_deltas_, lhs_arena,
                                       &other->_impl_.transport_sequence_number_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.transmission_time_offset_deltas_, lhs_arena,
                                       &other->_impl_.transmission_time_offset_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.absolute_send_time_deltas_, lhs_arena,
                                       &other->_impl_.absolute_send_time_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.video_rotation_deltas_, lhs_arena,
                                       &other->_impl_.video_rotation_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.audio_level_deltas_, lhs_arena,
                                       &other->_impl_.audio_level_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.voice_activity_deltas_, lhs_arena,
                                       &other->_impl_.voice_activity_deltas_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OutgoingRtpPackets, _impl_.audio_level_)
      + sizeof(OutgoingRtpPackets::_impl_.audio_level_)
      - PROTOBUF_FIELD_OFFSET(OutgoingRtpPackets, _impl_.dependency_descriptor_)>(
          reinterpret_cast<char*>(&_impl_.dependency_descriptor_),
          reinterpret_cast<char*>(&other->_impl_.dependency_descriptor_));
}

std::string OutgoingRtpPackets::GetTypeName() const {
  return "webrtc.rtclog2.OutgoingRtpPackets";
}

// ===================================================================

class IncomingRtcpPackets::_Internal {
 public:
  using HasBits = decltype(std::declval<IncomingRtcpPackets>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(IncomingRtcpPackets, _impl_._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_raw_packet(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_number_of_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_timestamp_ms_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_raw_packet_blobs(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

IncomingRtcpPackets::IncomingRtcpPackets(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog2.IncomingRtcpPackets)
}
IncomingRtcpPackets::IncomingRtcpPackets(const IncomingRtcpPackets& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IncomingRtcpPackets* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.raw_packet_) {}

    , decltype(_impl_.timestamp_ms_deltas_) {}

    , decltype(_impl_.raw_packet_blobs_) {}

    , decltype(_impl_.timestamp_ms_) {}

    , decltype(_impl_.number_of_deltas_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.raw_packet_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.raw_packet_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.raw_packet_.Set(from._internal_raw_packet(), _this->GetArenaForAllocation());
  }
  _impl_.timestamp_ms_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_ms_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.timestamp_ms_deltas_.Set(from._internal_timestamp_ms_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.raw_packet_blobs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.raw_packet_blobs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.raw_packet_blobs_.Set(from._internal_raw_packet_blobs(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_ms_, &from._impl_.timestamp_ms_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.number_of_deltas_) -
    reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.number_of_deltas_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.IncomingRtcpPackets)
}

inline void IncomingRtcpPackets::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.raw_packet_) {}

    , decltype(_impl_.timestamp_ms_deltas_) {}

    , decltype(_impl_.raw_packet_blobs_) {}

    , decltype(_impl_.timestamp_ms_) { ::int64_t{0} }

    , decltype(_impl_.number_of_deltas_) { 0u }

  };
  _impl_.raw_packet_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.raw_packet_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timestamp_ms_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_ms_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.raw_packet_blobs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.raw_packet_blobs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IncomingRtcpPackets::~IncomingRtcpPackets() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.IncomingRtcpPackets)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IncomingRtcpPackets::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.raw_packet_.Destroy();
  _impl_.timestamp_ms_deltas_.Destroy();
  _impl_.raw_packet_blobs_.Destroy();
}

void IncomingRtcpPackets::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IncomingRtcpPackets::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.IncomingRtcpPackets)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.raw_packet_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.timestamp_ms_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.raw_packet_blobs_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.timestamp_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.number_of_deltas_) -
        reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.number_of_deltas_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IncomingRtcpPackets::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes raw_packet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_raw_packet();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 number_of_deltas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_number_of_deltas(&has_bits);
          _impl_.number_of_deltas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes timestamp_ms_deltas = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_timestamp_ms_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes raw_packet_blobs = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_raw_packet_blobs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* IncomingRtcpPackets::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog2.IncomingRtcpPackets)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_timestamp_ms(), target);
  }

  // optional bytes raw_packet = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_raw_packet();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // optional uint32 number_of_deltas = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_number_of_deltas(), target);
  }

  // optional bytes timestamp_ms_deltas = 101;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_timestamp_ms_deltas();
    target = stream->WriteBytesMaybeAliased(101, _s, target);
  }

  // optional bytes raw_packet_blobs = 102;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_raw_packet_blobs();
    target = stream->WriteBytesMaybeAliased(102, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog2.IncomingRtcpPackets)
  return target;
}

::size_t IncomingRtcpPackets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.IncomingRtcpPackets)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes raw_packet = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_raw_packet());
    }

    // optional bytes timestamp_ms_deltas = 101;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_timestamp_ms_deltas());
    }

    // optional bytes raw_packet_blobs = 102;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_raw_packet_blobs());
    }

    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp_ms());
    }

    // optional uint32 number_of_deltas = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_number_of_deltas());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IncomingRtcpPackets::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IncomingRtcpPackets*>(
      &from));
}

void IncomingRtcpPackets::MergeFrom(const IncomingRtcpPackets& from) {
  IncomingRtcpPackets* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.IncomingRtcpPackets)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_raw_packet(from._internal_raw_packet());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_timestamp_ms_deltas(from._internal_timestamp_ms_deltas());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_raw_packet_blobs(from._internal_raw_packet_blobs());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.timestamp_ms_ = from._impl_.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.number_of_deltas_ = from._impl_.number_of_deltas_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IncomingRtcpPackets::CopyFrom(const IncomingRtcpPackets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.IncomingRtcpPackets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncomingRtcpPackets::IsInitialized() const {
  return true;
}

void IncomingRtcpPackets::InternalSwap(IncomingRtcpPackets* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.raw_packet_, lhs_arena,
                                       &other->_impl_.raw_packet_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_ms_deltas_, lhs_arena,
                                       &other->_impl_.timestamp_ms_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.raw_packet_blobs_, lhs_arena,
                                       &other->_impl_.raw_packet_blobs_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IncomingRtcpPackets, _impl_.number_of_deltas_)
      + sizeof(IncomingRtcpPackets::_impl_.number_of_deltas_)
      - PROTOBUF_FIELD_OFFSET(IncomingRtcpPackets, _impl_.timestamp_ms_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_ms_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_ms_));
}

std::string IncomingRtcpPackets::GetTypeName() const {
  return "webrtc.rtclog2.IncomingRtcpPackets";
}

// ===================================================================

class OutgoingRtcpPackets::_Internal {
 public:
  using HasBits = decltype(std::declval<OutgoingRtcpPackets>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(OutgoingRtcpPackets, _impl_._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_raw_packet(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_number_of_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_timestamp_ms_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_raw_packet_blobs(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

OutgoingRtcpPackets::OutgoingRtcpPackets(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog2.OutgoingRtcpPackets)
}
OutgoingRtcpPackets::OutgoingRtcpPackets(const OutgoingRtcpPackets& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  OutgoingRtcpPackets* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.raw_packet_) {}

    , decltype(_impl_.timestamp_ms_deltas_) {}

    , decltype(_impl_.raw_packet_blobs_) {}

    , decltype(_impl_.timestamp_ms_) {}

    , decltype(_impl_.number_of_deltas_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.raw_packet_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.raw_packet_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.raw_packet_.Set(from._internal_raw_packet(), _this->GetArenaForAllocation());
  }
  _impl_.timestamp_ms_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_ms_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.timestamp_ms_deltas_.Set(from._internal_timestamp_ms_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.raw_packet_blobs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.raw_packet_blobs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.raw_packet_blobs_.Set(from._internal_raw_packet_blobs(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_ms_, &from._impl_.timestamp_ms_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.number_of_deltas_) -
    reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.number_of_deltas_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.OutgoingRtcpPackets)
}

inline void OutgoingRtcpPackets::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.raw_packet_) {}

    , decltype(_impl_.timestamp_ms_deltas_) {}

    , decltype(_impl_.raw_packet_blobs_) {}

    , decltype(_impl_.timestamp_ms_) { ::int64_t{0} }

    , decltype(_impl_.number_of_deltas_) { 0u }

  };
  _impl_.raw_packet_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.raw_packet_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timestamp_ms_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_ms_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.raw_packet_blobs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.raw_packet_blobs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OutgoingRtcpPackets::~OutgoingRtcpPackets() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.OutgoingRtcpPackets)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OutgoingRtcpPackets::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.raw_packet_.Destroy();
  _impl_.timestamp_ms_deltas_.Destroy();
  _impl_.raw_packet_blobs_.Destroy();
}

void OutgoingRtcpPackets::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OutgoingRtcpPackets::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.OutgoingRtcpPackets)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.raw_packet_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.timestamp_ms_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.raw_packet_blobs_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.timestamp_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.number_of_deltas_) -
        reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.number_of_deltas_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* OutgoingRtcpPackets::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes raw_packet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_raw_packet();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 number_of_deltas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_number_of_deltas(&has_bits);
          _impl_.number_of_deltas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes timestamp_ms_deltas = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_timestamp_ms_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes raw_packet_blobs = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_raw_packet_blobs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OutgoingRtcpPackets::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog2.OutgoingRtcpPackets)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_timestamp_ms(), target);
  }

  // optional bytes raw_packet = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_raw_packet();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // optional uint32 number_of_deltas = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_number_of_deltas(), target);
  }

  // optional bytes timestamp_ms_deltas = 101;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_timestamp_ms_deltas();
    target = stream->WriteBytesMaybeAliased(101, _s, target);
  }

  // optional bytes raw_packet_blobs = 102;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_raw_packet_blobs();
    target = stream->WriteBytesMaybeAliased(102, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog2.OutgoingRtcpPackets)
  return target;
}

::size_t OutgoingRtcpPackets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.OutgoingRtcpPackets)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes raw_packet = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_raw_packet());
    }

    // optional bytes timestamp_ms_deltas = 101;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_timestamp_ms_deltas());
    }

    // optional bytes raw_packet_blobs = 102;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_raw_packet_blobs());
    }

    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp_ms());
    }

    // optional uint32 number_of_deltas = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_number_of_deltas());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OutgoingRtcpPackets::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const OutgoingRtcpPackets*>(
      &from));
}

void OutgoingRtcpPackets::MergeFrom(const OutgoingRtcpPackets& from) {
  OutgoingRtcpPackets* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.OutgoingRtcpPackets)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_raw_packet(from._internal_raw_packet());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_timestamp_ms_deltas(from._internal_timestamp_ms_deltas());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_raw_packet_blobs(from._internal_raw_packet_blobs());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.timestamp_ms_ = from._impl_.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.number_of_deltas_ = from._impl_.number_of_deltas_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void OutgoingRtcpPackets::CopyFrom(const OutgoingRtcpPackets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.OutgoingRtcpPackets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutgoingRtcpPackets::IsInitialized() const {
  return true;
}

void OutgoingRtcpPackets::InternalSwap(OutgoingRtcpPackets* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.raw_packet_, lhs_arena,
                                       &other->_impl_.raw_packet_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_ms_deltas_, lhs_arena,
                                       &other->_impl_.timestamp_ms_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.raw_packet_blobs_, lhs_arena,
                                       &other->_impl_.raw_packet_blobs_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OutgoingRtcpPackets, _impl_.number_of_deltas_)
      + sizeof(OutgoingRtcpPackets::_impl_.number_of_deltas_)
      - PROTOBUF_FIELD_OFFSET(OutgoingRtcpPackets, _impl_.timestamp_ms_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_ms_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_ms_));
}

std::string OutgoingRtcpPackets::GetTypeName() const {
  return "webrtc.rtclog2.OutgoingRtcpPackets";
}

// ===================================================================

class AudioPlayoutEvents::_Internal {
 public:
  using HasBits = decltype(std::declval<AudioPlayoutEvents>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AudioPlayoutEvents, _impl_._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_local_ssrc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_number_of_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_timestamp_ms_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_local_ssrc_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AudioPlayoutEvents::AudioPlayoutEvents(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog2.AudioPlayoutEvents)
}
AudioPlayoutEvents::AudioPlayoutEvents(const AudioPlayoutEvents& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  AudioPlayoutEvents* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_ms_deltas_) {}

    , decltype(_impl_.local_ssrc_deltas_) {}

    , decltype(_impl_.timestamp_ms_) {}

    , decltype(_impl_.local_ssrc_) {}

    , decltype(_impl_.number_of_deltas_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.timestamp_ms_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_ms_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.timestamp_ms_deltas_.Set(from._internal_timestamp_ms_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.local_ssrc_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.local_ssrc_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.local_ssrc_deltas_.Set(from._internal_local_ssrc_deltas(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_ms_, &from._impl_.timestamp_ms_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.number_of_deltas_) -
    reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.number_of_deltas_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.AudioPlayoutEvents)
}

inline void AudioPlayoutEvents::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_ms_deltas_) {}

    , decltype(_impl_.local_ssrc_deltas_) {}

    , decltype(_impl_.timestamp_ms_) { ::int64_t{0} }

    , decltype(_impl_.local_ssrc_) { 0u }

    , decltype(_impl_.number_of_deltas_) { 0u }

  };
  _impl_.timestamp_ms_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_ms_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.local_ssrc_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.local_ssrc_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AudioPlayoutEvents::~AudioPlayoutEvents() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.AudioPlayoutEvents)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AudioPlayoutEvents::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.timestamp_ms_deltas_.Destroy();
  _impl_.local_ssrc_deltas_.Destroy();
}

void AudioPlayoutEvents::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AudioPlayoutEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.AudioPlayoutEvents)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.timestamp_ms_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.local_ssrc_deltas_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.timestamp_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.number_of_deltas_) -
        reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.number_of_deltas_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AudioPlayoutEvents::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 local_ssrc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_local_ssrc(&has_bits);
          _impl_.local_ssrc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 number_of_deltas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_number_of_deltas(&has_bits);
          _impl_.number_of_deltas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes timestamp_ms_deltas = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_timestamp_ms_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes local_ssrc_deltas = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_local_ssrc_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AudioPlayoutEvents::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog2.AudioPlayoutEvents)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_timestamp_ms(), target);
  }

  // optional uint32 local_ssrc = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_local_ssrc(), target);
  }

  // optional uint32 number_of_deltas = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_number_of_deltas(), target);
  }

  // optional bytes timestamp_ms_deltas = 101;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_timestamp_ms_deltas();
    target = stream->WriteBytesMaybeAliased(101, _s, target);
  }

  // optional bytes local_ssrc_deltas = 102;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_local_ssrc_deltas();
    target = stream->WriteBytesMaybeAliased(102, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog2.AudioPlayoutEvents)
  return target;
}

::size_t AudioPlayoutEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.AudioPlayoutEvents)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes timestamp_ms_deltas = 101;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_timestamp_ms_deltas());
    }

    // optional bytes local_ssrc_deltas = 102;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_local_ssrc_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp_ms());
    }

    // optional uint32 local_ssrc = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_local_ssrc());
    }

    // optional uint32 number_of_deltas = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_number_of_deltas());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioPlayoutEvents::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AudioPlayoutEvents*>(
      &from));
}

void AudioPlayoutEvents::MergeFrom(const AudioPlayoutEvents& from) {
  AudioPlayoutEvents* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.AudioPlayoutEvents)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_timestamp_ms_deltas(from._internal_timestamp_ms_deltas());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_local_ssrc_deltas(from._internal_local_ssrc_deltas());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.timestamp_ms_ = from._impl_.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.local_ssrc_ = from._impl_.local_ssrc_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.number_of_deltas_ = from._impl_.number_of_deltas_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AudioPlayoutEvents::CopyFrom(const AudioPlayoutEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.AudioPlayoutEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioPlayoutEvents::IsInitialized() const {
  return true;
}

void AudioPlayoutEvents::InternalSwap(AudioPlayoutEvents* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_ms_deltas_, lhs_arena,
                                       &other->_impl_.timestamp_ms_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.local_ssrc_deltas_, lhs_arena,
                                       &other->_impl_.local_ssrc_deltas_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioPlayoutEvents, _impl_.number_of_deltas_)
      + sizeof(AudioPlayoutEvents::_impl_.number_of_deltas_)
      - PROTOBUF_FIELD_OFFSET(AudioPlayoutEvents, _impl_.timestamp_ms_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_ms_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_ms_));
}

std::string AudioPlayoutEvents::GetTypeName() const {
  return "webrtc.rtclog2.AudioPlayoutEvents";
}

// ===================================================================

class NetEqSetMinimumDelay::_Internal {
 public:
  using HasBits = decltype(std::declval<NetEqSetMinimumDelay>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(NetEqSetMinimumDelay, _impl_._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_remote_ssrc(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_minimum_delay_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_number_of_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_timestamp_ms_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_remote_ssrc_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_minimum_delay_ms_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

NetEqSetMinimumDelay::NetEqSetMinimumDelay(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog2.NetEqSetMinimumDelay)
}
NetEqSetMinimumDelay::NetEqSetMinimumDelay(const NetEqSetMinimumDelay& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  NetEqSetMinimumDelay* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_ms_deltas_) {}

    , decltype(_impl_.remote_ssrc_deltas_) {}

    , decltype(_impl_.minimum_delay_ms_deltas_) {}

    , decltype(_impl_.timestamp_ms_) {}

    , decltype(_impl_.remote_ssrc_) {}

    , decltype(_impl_.minimum_delay_ms_) {}

    , decltype(_impl_.number_of_deltas_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.timestamp_ms_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_ms_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.timestamp_ms_deltas_.Set(from._internal_timestamp_ms_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.remote_ssrc_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.remote_ssrc_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.remote_ssrc_deltas_.Set(from._internal_remote_ssrc_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.minimum_delay_ms_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.minimum_delay_ms_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.minimum_delay_ms_deltas_.Set(from._internal_minimum_delay_ms_deltas(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_ms_, &from._impl_.timestamp_ms_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.number_of_deltas_) -
    reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.number_of_deltas_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.NetEqSetMinimumDelay)
}

inline void NetEqSetMinimumDelay::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_ms_deltas_) {}

    , decltype(_impl_.remote_ssrc_deltas_) {}

    , decltype(_impl_.minimum_delay_ms_deltas_) {}

    , decltype(_impl_.timestamp_ms_) { ::int64_t{0} }

    , decltype(_impl_.remote_ssrc_) { 0u }

    , decltype(_impl_.minimum_delay_ms_) { 0 }

    , decltype(_impl_.number_of_deltas_) { 0u }

  };
  _impl_.timestamp_ms_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_ms_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.remote_ssrc_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.remote_ssrc_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.minimum_delay_ms_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.minimum_delay_ms_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NetEqSetMinimumDelay::~NetEqSetMinimumDelay() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.NetEqSetMinimumDelay)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetEqSetMinimumDelay::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.timestamp_ms_deltas_.Destroy();
  _impl_.remote_ssrc_deltas_.Destroy();
  _impl_.minimum_delay_ms_deltas_.Destroy();
}

void NetEqSetMinimumDelay::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetEqSetMinimumDelay::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.NetEqSetMinimumDelay)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.timestamp_ms_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.remote_ssrc_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.minimum_delay_ms_deltas_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&_impl_.timestamp_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.number_of_deltas_) -
        reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.number_of_deltas_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* NetEqSetMinimumDelay::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional fixed32 remote_ssrc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 21)) {
          _Internal::set_has_remote_ssrc(&has_bits);
          _impl_.remote_ssrc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::uint32_t>(ptr);
          ptr += sizeof(::uint32_t);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 minimum_delay_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_minimum_delay_ms(&has_bits);
          _impl_.minimum_delay_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 number_of_deltas = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_number_of_deltas(&has_bits);
          _impl_.number_of_deltas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes timestamp_ms_deltas = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_timestamp_ms_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes remote_ssrc_deltas = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_remote_ssrc_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes minimum_delay_ms_deltas = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_minimum_delay_ms_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* NetEqSetMinimumDelay::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog2.NetEqSetMinimumDelay)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_timestamp_ms(), target);
  }

  // optional fixed32 remote_ssrc = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        2, this->_internal_remote_ssrc(), target);
  }

  // optional int32 minimum_delay_ms = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_minimum_delay_ms(), target);
  }

  // optional uint32 number_of_deltas = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_number_of_deltas(), target);
  }

  // optional bytes timestamp_ms_deltas = 101;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_timestamp_ms_deltas();
    target = stream->WriteBytesMaybeAliased(101, _s, target);
  }

  // optional bytes remote_ssrc_deltas = 102;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_remote_ssrc_deltas();
    target = stream->WriteBytesMaybeAliased(102, _s, target);
  }

  // optional bytes minimum_delay_ms_deltas = 103;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_minimum_delay_ms_deltas();
    target = stream->WriteBytesMaybeAliased(103, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog2.NetEqSetMinimumDelay)
  return target;
}

::size_t NetEqSetMinimumDelay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.NetEqSetMinimumDelay)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes timestamp_ms_deltas = 101;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_timestamp_ms_deltas());
    }

    // optional bytes remote_ssrc_deltas = 102;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_remote_ssrc_deltas());
    }

    // optional bytes minimum_delay_ms_deltas = 103;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_minimum_delay_ms_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp_ms());
    }

    // optional fixed32 remote_ssrc = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 5;
    }

    // optional int32 minimum_delay_ms = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_minimum_delay_ms());
    }

    // optional uint32 number_of_deltas = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_number_of_deltas());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetEqSetMinimumDelay::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const NetEqSetMinimumDelay*>(
      &from));
}

void NetEqSetMinimumDelay::MergeFrom(const NetEqSetMinimumDelay& from) {
  NetEqSetMinimumDelay* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.NetEqSetMinimumDelay)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_timestamp_ms_deltas(from._internal_timestamp_ms_deltas());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_remote_ssrc_deltas(from._internal_remote_ssrc_deltas());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_minimum_delay_ms_deltas(from._internal_minimum_delay_ms_deltas());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.timestamp_ms_ = from._impl_.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.remote_ssrc_ = from._impl_.remote_ssrc_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.minimum_delay_ms_ = from._impl_.minimum_delay_ms_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.number_of_deltas_ = from._impl_.number_of_deltas_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void NetEqSetMinimumDelay::CopyFrom(const NetEqSetMinimumDelay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.NetEqSetMinimumDelay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetEqSetMinimumDelay::IsInitialized() const {
  return true;
}

void NetEqSetMinimumDelay::InternalSwap(NetEqSetMinimumDelay* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_ms_deltas_, lhs_arena,
                                       &other->_impl_.timestamp_ms_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.remote_ssrc_deltas_, lhs_arena,
                                       &other->_impl_.remote_ssrc_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.minimum_delay_ms_deltas_, lhs_arena,
                                       &other->_impl_.minimum_delay_ms_deltas_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetEqSetMinimumDelay, _impl_.number_of_deltas_)
      + sizeof(NetEqSetMinimumDelay::_impl_.number_of_deltas_)
      - PROTOBUF_FIELD_OFFSET(NetEqSetMinimumDelay, _impl_.timestamp_ms_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_ms_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_ms_));
}

std::string NetEqSetMinimumDelay::GetTypeName() const {
  return "webrtc.rtclog2.NetEqSetMinimumDelay";
}

// ===================================================================

class FrameDecodedEvents::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameDecodedEvents>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FrameDecodedEvents, _impl_._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ssrc(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_render_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_codec(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_qp(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_number_of_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_timestamp_ms_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ssrc_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_render_time_ms_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_width_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_height_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_codec_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_qp_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

FrameDecodedEvents::FrameDecodedEvents(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog2.FrameDecodedEvents)
}
FrameDecodedEvents::FrameDecodedEvents(const FrameDecodedEvents& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  FrameDecodedEvents* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_ms_deltas_) {}

    , decltype(_impl_.ssrc_deltas_) {}

    , decltype(_impl_.render_time_ms_deltas_) {}

    , decltype(_impl_.width_deltas_) {}

    , decltype(_impl_.height_deltas_) {}

    , decltype(_impl_.codec_deltas_) {}

    , decltype(_impl_.qp_deltas_) {}

    , decltype(_impl_.timestamp_ms_) {}

    , decltype(_impl_.render_time_ms_) {}

    , decltype(_impl_.ssrc_) {}

    , decltype(_impl_.width_) {}

    , decltype(_impl_.height_) {}

    , decltype(_impl_.codec_) {}

    , decltype(_impl_.qp_) {}

    , decltype(_impl_.number_of_deltas_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.timestamp_ms_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_ms_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.timestamp_ms_deltas_.Set(from._internal_timestamp_ms_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.ssrc_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ssrc_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.ssrc_deltas_.Set(from._internal_ssrc_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.render_time_ms_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.render_time_ms_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.render_time_ms_deltas_.Set(from._internal_render_time_ms_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.width_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.width_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.width_deltas_.Set(from._internal_width_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.height_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.height_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.height_deltas_.Set(from._internal_height_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.codec_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.codec_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000020u) != 0) {
    _this->_impl_.codec_deltas_.Set(from._internal_codec_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.qp_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.qp_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000040u) != 0) {
    _this->_impl_.qp_deltas_.Set(from._internal_qp_deltas(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_ms_, &from._impl_.timestamp_ms_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.number_of_deltas_) -
    reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.number_of_deltas_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.FrameDecodedEvents)
}

inline void FrameDecodedEvents::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_ms_deltas_) {}

    , decltype(_impl_.ssrc_deltas_) {}

    , decltype(_impl_.render_time_ms_deltas_) {}

    , decltype(_impl_.width_deltas_) {}

    , decltype(_impl_.height_deltas_) {}

    , decltype(_impl_.codec_deltas_) {}

    , decltype(_impl_.qp_deltas_) {}

    , decltype(_impl_.timestamp_ms_) { ::int64_t{0} }

    , decltype(_impl_.render_time_ms_) { ::int64_t{0} }

    , decltype(_impl_.ssrc_) { 0u }

    , decltype(_impl_.width_) { 0 }

    , decltype(_impl_.height_) { 0 }

    , decltype(_impl_.codec_) { 0 }

    , decltype(_impl_.qp_) { 0u }

    , decltype(_impl_.number_of_deltas_) { 0u }

  };
  _impl_.timestamp_ms_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_ms_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ssrc_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ssrc_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.render_time_ms_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.render_time_ms_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.width_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.width_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.height_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.height_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.codec_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.codec_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.qp_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.qp_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FrameDecodedEvents::~FrameDecodedEvents() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.FrameDecodedEvents)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FrameDecodedEvents::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.timestamp_ms_deltas_.Destroy();
  _impl_.ssrc_deltas_.Destroy();
  _impl_.render_time_ms_deltas_.Destroy();
  _impl_.width_deltas_.Destroy();
  _impl_.height_deltas_.Destroy();
  _impl_.codec_deltas_.Destroy();
  _impl_.qp_deltas_.Destroy();
}

void FrameDecodedEvents::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FrameDecodedEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.FrameDecodedEvents)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.timestamp_ms_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.ssrc_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.render_time_ms_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.width_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.height_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.codec_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.qp_deltas_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.timestamp_ms_ = ::int64_t{0};
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&_impl_.render_time_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.number_of_deltas_) -
        reinterpret_cast<char*>(&_impl_.render_time_ms_)) + sizeof(_impl_.number_of_deltas_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FrameDecodedEvents::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional fixed32 ssrc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 21)) {
          _Internal::set_has_ssrc(&has_bits);
          _impl_.ssrc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::uint32_t>(ptr);
          ptr += sizeof(::uint32_t);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 render_time_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_render_time_ms(&has_bits);
          _impl_.render_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .webrtc.rtclog2.FrameDecodedEvents.Codec codec = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::webrtc::rtclog2::FrameDecodedEvents_Codec_IsValid(static_cast<int>(val)))) {
            _internal_set_codec(static_cast<::webrtc::rtclog2::FrameDecodedEvents_Codec>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 qp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_qp(&has_bits);
          _impl_.qp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 number_of_deltas = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 120)) {
          _Internal::set_has_number_of_deltas(&has_bits);
          _impl_.number_of_deltas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes timestamp_ms_deltas = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_timestamp_ms_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes ssrc_deltas = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_ssrc_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes render_time_ms_deltas = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_render_time_ms_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes width_deltas = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_width_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes height_deltas = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_height_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes codec_deltas = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_codec_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes qp_deltas = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_qp_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FrameDecodedEvents::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog2.FrameDecodedEvents)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_timestamp_ms(), target);
  }

  // optional fixed32 ssrc = 2;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        2, this->_internal_ssrc(), target);
  }

  // optional int64 render_time_ms = 3;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_render_time_ms(), target);
  }

  // optional int32 width = 4;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_width(), target);
  }

  // optional int32 height = 5;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_height(), target);
  }

  // optional .webrtc.rtclog2.FrameDecodedEvents.Codec codec = 6;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_codec(), target);
  }

  // optional uint32 qp = 7;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_qp(), target);
  }

  // optional uint32 number_of_deltas = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        15, this->_internal_number_of_deltas(), target);
  }

  // optional bytes timestamp_ms_deltas = 101;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_timestamp_ms_deltas();
    target = stream->WriteBytesMaybeAliased(101, _s, target);
  }

  // optional bytes ssrc_deltas = 102;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_ssrc_deltas();
    target = stream->WriteBytesMaybeAliased(102, _s, target);
  }

  // optional bytes render_time_ms_deltas = 103;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_render_time_ms_deltas();
    target = stream->WriteBytesMaybeAliased(103, _s, target);
  }

  // optional bytes width_deltas = 104;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_width_deltas();
    target = stream->WriteBytesMaybeAliased(104, _s, target);
  }

  // optional bytes height_deltas = 105;
  if (cached_has_bits & 0x00000010u) {
    const std::string& _s = this->_internal_height_deltas();
    target = stream->WriteBytesMaybeAliased(105, _s, target);
  }

  // optional bytes codec_deltas = 106;
  if (cached_has_bits & 0x00000020u) {
    const std::string& _s = this->_internal_codec_deltas();
    target = stream->WriteBytesMaybeAliased(106, _s, target);
  }

  // optional bytes qp_deltas = 107;
  if (cached_has_bits & 0x00000040u) {
    const std::string& _s = this->_internal_qp_deltas();
    target = stream->WriteBytesMaybeAliased(107, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog2.FrameDecodedEvents)
  return target;
}

::size_t FrameDecodedEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.FrameDecodedEvents)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes timestamp_ms_deltas = 101;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_timestamp_ms_deltas());
    }

    // optional bytes ssrc_deltas = 102;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_ssrc_deltas());
    }

    // optional bytes render_time_ms_deltas = 103;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_render_time_ms_deltas());
    }

    // optional bytes width_deltas = 104;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_width_deltas());
    }

    // optional bytes height_deltas = 105;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_height_deltas());
    }

    // optional bytes codec_deltas = 106;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_codec_deltas());
    }

    // optional bytes qp_deltas = 107;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_qp_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp_ms());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional int64 render_time_ms = 3;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_render_time_ms());
    }

    // optional fixed32 ssrc = 2;
    if (cached_has_bits & 0x00000200u) {
      total_size += 5;
    }

    // optional int32 width = 4;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_width());
    }

    // optional int32 height = 5;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_height());
    }

    // optional .webrtc.rtclog2.FrameDecodedEvents.Codec codec = 6;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_codec());
    }

    // optional uint32 qp = 7;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_qp());
    }

    // optional uint32 number_of_deltas = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_number_of_deltas());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameDecodedEvents::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FrameDecodedEvents*>(
      &from));
}

void FrameDecodedEvents::MergeFrom(const FrameDecodedEvents& from) {
  FrameDecodedEvents* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.FrameDecodedEvents)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_timestamp_ms_deltas(from._internal_timestamp_ms_deltas());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_ssrc_deltas(from._internal_ssrc_deltas());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_render_time_ms_deltas(from._internal_render_time_ms_deltas());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_width_deltas(from._internal_width_deltas());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_height_deltas(from._internal_height_deltas());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_codec_deltas(from._internal_codec_deltas());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_qp_deltas(from._internal_qp_deltas());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.timestamp_ms_ = from._impl_.timestamp_ms_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.render_time_ms_ = from._impl_.render_time_ms_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.ssrc_ = from._impl_.ssrc_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.codec_ = from._impl_.codec_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.qp_ = from._impl_.qp_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.number_of_deltas_ = from._impl_.number_of_deltas_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FrameDecodedEvents::CopyFrom(const FrameDecodedEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.FrameDecodedEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameDecodedEvents::IsInitialized() const {
  return true;
}

void FrameDecodedEvents::InternalSwap(FrameDecodedEvents* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_ms_deltas_, lhs_arena,
                                       &other->_impl_.timestamp_ms_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ssrc_deltas_, lhs_arena,
                                       &other->_impl_.ssrc_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.render_time_ms_deltas_, lhs_arena,
                                       &other->_impl_.render_time_ms_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.width_deltas_, lhs_arena,
                                       &other->_impl_.width_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.height_deltas_, lhs_arena,
                                       &other->_impl_.height_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.codec_deltas_, lhs_arena,
                                       &other->_impl_.codec_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.qp_deltas_, lhs_arena,
                                       &other->_impl_.qp_deltas_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameDecodedEvents, _impl_.number_of_deltas_)
      + sizeof(FrameDecodedEvents::_impl_.number_of_deltas_)
      - PROTOBUF_FIELD_OFFSET(FrameDecodedEvents, _impl_.timestamp_ms_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_ms_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_ms_));
}

std::string FrameDecodedEvents::GetTypeName() const {
  return "webrtc.rtclog2.FrameDecodedEvents";
}

// ===================================================================

class BeginLogEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BeginLogEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BeginLogEvent, _impl_._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_utc_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BeginLogEvent::BeginLogEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog2.BeginLogEvent)
}
BeginLogEvent::BeginLogEvent(const BeginLogEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.BeginLogEvent)
}

inline void BeginLogEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_ms_) { ::int64_t{0} }

    , decltype(_impl_.utc_time_ms_) { ::int64_t{0} }

    , decltype(_impl_.version_) { 0u }

  };
}

BeginLogEvent::~BeginLogEvent() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.BeginLogEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BeginLogEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void BeginLogEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BeginLogEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.BeginLogEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.timestamp_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.version_) -
        reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.version_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BeginLogEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 utc_time_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_utc_time_ms(&has_bits);
          _impl_.utc_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BeginLogEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog2.BeginLogEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_timestamp_ms(), target);
  }

  // optional uint32 version = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_version(), target);
  }

  // optional int64 utc_time_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_utc_time_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog2.BeginLogEvent)
  return target;
}

::size_t BeginLogEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.BeginLogEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp_ms());
    }

    // optional int64 utc_time_ms = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_utc_time_ms());
    }

    // optional uint32 version = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeginLogEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BeginLogEvent*>(
      &from));
}

void BeginLogEvent::MergeFrom(const BeginLogEvent& from) {
  BeginLogEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.BeginLogEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.timestamp_ms_ = from._impl_.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.utc_time_ms_ = from._impl_.utc_time_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BeginLogEvent::CopyFrom(const BeginLogEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.BeginLogEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginLogEvent::IsInitialized() const {
  return true;
}

void BeginLogEvent::InternalSwap(BeginLogEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BeginLogEvent, _impl_.version_)
      + sizeof(BeginLogEvent::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(BeginLogEvent, _impl_.timestamp_ms_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_ms_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_ms_));
}

std::string BeginLogEvent::GetTypeName() const {
  return "webrtc.rtclog2.BeginLogEvent";
}

// ===================================================================

class EndLogEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<EndLogEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EndLogEvent, _impl_._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EndLogEvent::EndLogEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog2.EndLogEvent)
}
EndLogEvent::EndLogEvent(const EndLogEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.EndLogEvent)
}

inline void EndLogEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_ms_) { ::int64_t{0} }

  };
}

EndLogEvent::~EndLogEvent() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.EndLogEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EndLogEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EndLogEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EndLogEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.EndLogEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.timestamp_ms_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EndLogEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EndLogEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog2.EndLogEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_timestamp_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog2.EndLogEvent)
  return target;
}

::size_t EndLogEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.EndLogEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 timestamp_ms = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_timestamp_ms());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndLogEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EndLogEvent*>(
      &from));
}

void EndLogEvent::MergeFrom(const EndLogEvent& from) {
  EndLogEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.EndLogEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_timestamp_ms(from._internal_timestamp_ms());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EndLogEvent::CopyFrom(const EndLogEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.EndLogEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndLogEvent::IsInitialized() const {
  return true;
}

void EndLogEvent::InternalSwap(EndLogEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.timestamp_ms_, other->_impl_.timestamp_ms_);
}

std::string EndLogEvent::GetTypeName() const {
  return "webrtc.rtclog2.EndLogEvent";
}

// ===================================================================

class LossBasedBweUpdates::_Internal {
 public:
  using HasBits = decltype(std::declval<LossBasedBweUpdates>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LossBasedBweUpdates, _impl_._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_bitrate_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fraction_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_total_packets(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_number_of_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_timestamp_ms_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bitrate_bps_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fraction_loss_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_total_packets_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

LossBasedBweUpdates::LossBasedBweUpdates(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog2.LossBasedBweUpdates)
}
LossBasedBweUpdates::LossBasedBweUpdates(const LossBasedBweUpdates& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  LossBasedBweUpdates* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_ms_deltas_) {}

    , decltype(_impl_.bitrate_bps_deltas_) {}

    , decltype(_impl_.fraction_loss_deltas_) {}

    , decltype(_impl_.total_packets_deltas_) {}

    , decltype(_impl_.timestamp_ms_) {}

    , decltype(_impl_.bitrate_bps_) {}

    , decltype(_impl_.fraction_loss_) {}

    , decltype(_impl_.total_packets_) {}

    , decltype(_impl_.number_of_deltas_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.timestamp_ms_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_ms_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.timestamp_ms_deltas_.Set(from._internal_timestamp_ms_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.bitrate_bps_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bitrate_bps_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.bitrate_bps_deltas_.Set(from._internal_bitrate_bps_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.fraction_loss_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fraction_loss_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.fraction_loss_deltas_.Set(from._internal_fraction_loss_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.total_packets_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.total_packets_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.total_packets_deltas_.Set(from._internal_total_packets_deltas(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_ms_, &from._impl_.timestamp_ms_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.number_of_deltas_) -
    reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.number_of_deltas_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.LossBasedBweUpdates)
}

inline void LossBasedBweUpdates::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_ms_deltas_) {}

    , decltype(_impl_.bitrate_bps_deltas_) {}

    , decltype(_impl_.fraction_loss_deltas_) {}

    , decltype(_impl_.total_packets_deltas_) {}

    , decltype(_impl_.timestamp_ms_) { ::int64_t{0} }

    , decltype(_impl_.bitrate_bps_) { 0u }

    , decltype(_impl_.fraction_loss_) { 0u }

    , decltype(_impl_.total_packets_) { 0u }

    , decltype(_impl_.number_of_deltas_) { 0u }

  };
  _impl_.timestamp_ms_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_ms_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bitrate_bps_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bitrate_bps_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fraction_loss_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fraction_loss_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.total_packets_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.total_packets_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LossBasedBweUpdates::~LossBasedBweUpdates() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.LossBasedBweUpdates)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LossBasedBweUpdates::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.timestamp_ms_deltas_.Destroy();
  _impl_.bitrate_bps_deltas_.Destroy();
  _impl_.fraction_loss_deltas_.Destroy();
  _impl_.total_packets_deltas_.Destroy();
}

void LossBasedBweUpdates::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LossBasedBweUpdates::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.LossBasedBweUpdates)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.timestamp_ms_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.bitrate_bps_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.fraction_loss_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.total_packets_deltas_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.timestamp_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.total_packets_) -
        reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.total_packets_));
  }
  _impl_.number_of_deltas_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LossBasedBweUpdates::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 bitrate_bps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_bitrate_bps(&has_bits);
          _impl_.bitrate_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 fraction_loss = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_fraction_loss(&has_bits);
          _impl_.fraction_loss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 total_packets = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_total_packets(&has_bits);
          _impl_.total_packets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 number_of_deltas = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_number_of_deltas(&has_bits);
          _impl_.number_of_deltas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes timestamp_ms_deltas = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_timestamp_ms_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes bitrate_bps_deltas = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_bitrate_bps_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes fraction_loss_deltas = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_fraction_loss_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes total_packets_deltas = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_total_packets_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LossBasedBweUpdates::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog2.LossBasedBweUpdates)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_timestamp_ms(), target);
  }

  // optional uint32 bitrate_bps = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_bitrate_bps(), target);
  }

  // optional uint32 fraction_loss = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_fraction_loss(), target);
  }

  // optional uint32 total_packets = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_total_packets(), target);
  }

  // optional uint32 number_of_deltas = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_number_of_deltas(), target);
  }

  // optional bytes timestamp_ms_deltas = 101;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_timestamp_ms_deltas();
    target = stream->WriteBytesMaybeAliased(101, _s, target);
  }

  // optional bytes bitrate_bps_deltas = 102;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_bitrate_bps_deltas();
    target = stream->WriteBytesMaybeAliased(102, _s, target);
  }

  // optional bytes fraction_loss_deltas = 103;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_fraction_loss_deltas();
    target = stream->WriteBytesMaybeAliased(103, _s, target);
  }

  // optional bytes total_packets_deltas = 104;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_total_packets_deltas();
    target = stream->WriteBytesMaybeAliased(104, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog2.LossBasedBweUpdates)
  return target;
}

::size_t LossBasedBweUpdates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.LossBasedBweUpdates)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes timestamp_ms_deltas = 101;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_timestamp_ms_deltas());
    }

    // optional bytes bitrate_bps_deltas = 102;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_bitrate_bps_deltas());
    }

    // optional bytes fraction_loss_deltas = 103;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_fraction_loss_deltas());
    }

    // optional bytes total_packets_deltas = 104;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_total_packets_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp_ms());
    }

    // optional uint32 bitrate_bps = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_bitrate_bps());
    }

    // optional uint32 fraction_loss = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_fraction_loss());
    }

    // optional uint32 total_packets = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_total_packets());
    }

  }
  // optional uint32 number_of_deltas = 5;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_number_of_deltas());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LossBasedBweUpdates::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LossBasedBweUpdates*>(
      &from));
}

void LossBasedBweUpdates::MergeFrom(const LossBasedBweUpdates& from) {
  LossBasedBweUpdates* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.LossBasedBweUpdates)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_timestamp_ms_deltas(from._internal_timestamp_ms_deltas());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_bitrate_bps_deltas(from._internal_bitrate_bps_deltas());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_fraction_loss_deltas(from._internal_fraction_loss_deltas());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_total_packets_deltas(from._internal_total_packets_deltas());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.timestamp_ms_ = from._impl_.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.bitrate_bps_ = from._impl_.bitrate_bps_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.fraction_loss_ = from._impl_.fraction_loss_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.total_packets_ = from._impl_.total_packets_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_number_of_deltas(from._internal_number_of_deltas());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LossBasedBweUpdates::CopyFrom(const LossBasedBweUpdates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.LossBasedBweUpdates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LossBasedBweUpdates::IsInitialized() const {
  return true;
}

void LossBasedBweUpdates::InternalSwap(LossBasedBweUpdates* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_ms_deltas_, lhs_arena,
                                       &other->_impl_.timestamp_ms_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bitrate_bps_deltas_, lhs_arena,
                                       &other->_impl_.bitrate_bps_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fraction_loss_deltas_, lhs_arena,
                                       &other->_impl_.fraction_loss_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.total_packets_deltas_, lhs_arena,
                                       &other->_impl_.total_packets_deltas_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LossBasedBweUpdates, _impl_.number_of_deltas_)
      + sizeof(LossBasedBweUpdates::_impl_.number_of_deltas_)
      - PROTOBUF_FIELD_OFFSET(LossBasedBweUpdates, _impl_.timestamp_ms_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_ms_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_ms_));
}

std::string LossBasedBweUpdates::GetTypeName() const {
  return "webrtc.rtclog2.LossBasedBweUpdates";
}

// ===================================================================

class DelayBasedBweUpdates::_Internal {
 public:
  using HasBits = decltype(std::declval<DelayBasedBweUpdates>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DelayBasedBweUpdates, _impl_._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bitrate_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_detector_state(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_number_of_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_timestamp_ms_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bitrate_bps_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_detector_state_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

DelayBasedBweUpdates::DelayBasedBweUpdates(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog2.DelayBasedBweUpdates)
}
DelayBasedBweUpdates::DelayBasedBweUpdates(const DelayBasedBweUpdates& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  DelayBasedBweUpdates* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_ms_deltas_) {}

    , decltype(_impl_.bitrate_bps_deltas_) {}

    , decltype(_impl_.detector_state_deltas_) {}

    , decltype(_impl_.timestamp_ms_) {}

    , decltype(_impl_.bitrate_bps_) {}

    , decltype(_impl_.detector_state_) {}

    , decltype(_impl_.number_of_deltas_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.timestamp_ms_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_ms_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.timestamp_ms_deltas_.Set(from._internal_timestamp_ms_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.bitrate_bps_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bitrate_bps_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.bitrate_bps_deltas_.Set(from._internal_bitrate_bps_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.detector_state_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.detector_state_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.detector_state_deltas_.Set(from._internal_detector_state_deltas(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_ms_, &from._impl_.timestamp_ms_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.number_of_deltas_) -
    reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.number_of_deltas_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.DelayBasedBweUpdates)
}

inline void DelayBasedBweUpdates::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_ms_deltas_) {}

    , decltype(_impl_.bitrate_bps_deltas_) {}

    , decltype(_impl_.detector_state_deltas_) {}

    , decltype(_impl_.timestamp_ms_) { ::int64_t{0} }

    , decltype(_impl_.bitrate_bps_) { 0u }

    , decltype(_impl_.detector_state_) { 0 }

    , decltype(_impl_.number_of_deltas_) { 0u }

  };
  _impl_.timestamp_ms_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_ms_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bitrate_bps_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bitrate_bps_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.detector_state_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.detector_state_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DelayBasedBweUpdates::~DelayBasedBweUpdates() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.DelayBasedBweUpdates)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DelayBasedBweUpdates::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.timestamp_ms_deltas_.Destroy();
  _impl_.bitrate_bps_deltas_.Destroy();
  _impl_.detector_state_deltas_.Destroy();
}

void DelayBasedBweUpdates::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DelayBasedBweUpdates::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.DelayBasedBweUpdates)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.timestamp_ms_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.bitrate_bps_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.detector_state_deltas_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&_impl_.timestamp_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.number_of_deltas_) -
        reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.number_of_deltas_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DelayBasedBweUpdates::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 bitrate_bps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_bitrate_bps(&has_bits);
          _impl_.bitrate_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .webrtc.rtclog2.DelayBasedBweUpdates.DetectorState detector_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::webrtc::rtclog2::DelayBasedBweUpdates_DetectorState_IsValid(static_cast<int>(val)))) {
            _internal_set_detector_state(static_cast<::webrtc::rtclog2::DelayBasedBweUpdates_DetectorState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 number_of_deltas = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_number_of_deltas(&has_bits);
          _impl_.number_of_deltas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes timestamp_ms_deltas = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_timestamp_ms_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes bitrate_bps_deltas = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_bitrate_bps_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes detector_state_deltas = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_detector_state_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DelayBasedBweUpdates::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog2.DelayBasedBweUpdates)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_timestamp_ms(), target);
  }

  // optional uint32 bitrate_bps = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_bitrate_bps(), target);
  }

  // optional .webrtc.rtclog2.DelayBasedBweUpdates.DetectorState detector_state = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_detector_state(), target);
  }

  // optional uint32 number_of_deltas = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_number_of_deltas(), target);
  }

  // optional bytes timestamp_ms_deltas = 101;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_timestamp_ms_deltas();
    target = stream->WriteBytesMaybeAliased(101, _s, target);
  }

  // optional bytes bitrate_bps_deltas = 102;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_bitrate_bps_deltas();
    target = stream->WriteBytesMaybeAliased(102, _s, target);
  }

  // optional bytes detector_state_deltas = 103;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_detector_state_deltas();
    target = stream->WriteBytesMaybeAliased(103, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog2.DelayBasedBweUpdates)
  return target;
}

::size_t DelayBasedBweUpdates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.DelayBasedBweUpdates)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes timestamp_ms_deltas = 101;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_timestamp_ms_deltas());
    }

    // optional bytes bitrate_bps_deltas = 102;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_bitrate_bps_deltas());
    }

    // optional bytes detector_state_deltas = 103;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_detector_state_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp_ms());
    }

    // optional uint32 bitrate_bps = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_bitrate_bps());
    }

    // optional .webrtc.rtclog2.DelayBasedBweUpdates.DetectorState detector_state = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_detector_state());
    }

    // optional uint32 number_of_deltas = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_number_of_deltas());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelayBasedBweUpdates::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DelayBasedBweUpdates*>(
      &from));
}

void DelayBasedBweUpdates::MergeFrom(const DelayBasedBweUpdates& from) {
  DelayBasedBweUpdates* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.DelayBasedBweUpdates)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_timestamp_ms_deltas(from._internal_timestamp_ms_deltas());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_bitrate_bps_deltas(from._internal_bitrate_bps_deltas());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_detector_state_deltas(from._internal_detector_state_deltas());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.timestamp_ms_ = from._impl_.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.bitrate_bps_ = from._impl_.bitrate_bps_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.detector_state_ = from._impl_.detector_state_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.number_of_deltas_ = from._impl_.number_of_deltas_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DelayBasedBweUpdates::CopyFrom(const DelayBasedBweUpdates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.DelayBasedBweUpdates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelayBasedBweUpdates::IsInitialized() const {
  return true;
}

void DelayBasedBweUpdates::InternalSwap(DelayBasedBweUpdates* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_ms_deltas_, lhs_arena,
                                       &other->_impl_.timestamp_ms_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bitrate_bps_deltas_, lhs_arena,
                                       &other->_impl_.bitrate_bps_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.detector_state_deltas_, lhs_arena,
                                       &other->_impl_.detector_state_deltas_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DelayBasedBweUpdates, _impl_.number_of_deltas_)
      + sizeof(DelayBasedBweUpdates::_impl_.number_of_deltas_)
      - PROTOBUF_FIELD_OFFSET(DelayBasedBweUpdates, _impl_.timestamp_ms_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_ms_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_ms_));
}

std::string DelayBasedBweUpdates::GetTypeName() const {
  return "webrtc.rtclog2.DelayBasedBweUpdates";
}

// ===================================================================

class RtpHeaderExtensionConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<RtpHeaderExtensionConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RtpHeaderExtensionConfig, _impl_._has_bits_);
  static void set_has_transmission_time_offset_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_absolute_send_time_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_transport_sequence_number_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_video_rotation_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_audio_level_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dependency_descriptor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

RtpHeaderExtensionConfig::RtpHeaderExtensionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog2.RtpHeaderExtensionConfig)
}
RtpHeaderExtensionConfig::RtpHeaderExtensionConfig(const RtpHeaderExtensionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.RtpHeaderExtensionConfig)
}

inline void RtpHeaderExtensionConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transmission_time_offset_id_) { 0 }

    , decltype(_impl_.absolute_send_time_id_) { 0 }

    , decltype(_impl_.transport_sequence_number_id_) { 0 }

    , decltype(_impl_.video_rotation_id_) { 0 }

    , decltype(_impl_.audio_level_id_) { 0 }

    , decltype(_impl_.dependency_descriptor_id_) { 0 }

  };
}

RtpHeaderExtensionConfig::~RtpHeaderExtensionConfig() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.RtpHeaderExtensionConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RtpHeaderExtensionConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void RtpHeaderExtensionConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RtpHeaderExtensionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.RtpHeaderExtensionConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.transmission_time_offset_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.dependency_descriptor_id_) -
        reinterpret_cast<char*>(&_impl_.transmission_time_offset_id_)) + sizeof(_impl_.dependency_descriptor_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RtpHeaderExtensionConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 transmission_time_offset_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_transmission_time_offset_id(&has_bits);
          _impl_.transmission_time_offset_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 absolute_send_time_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_absolute_send_time_id(&has_bits);
          _impl_.absolute_send_time_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 transport_sequence_number_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_transport_sequence_number_id(&has_bits);
          _impl_.transport_sequence_number_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 video_rotation_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_video_rotation_id(&has_bits);
          _impl_.video_rotation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 audio_level_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_audio_level_id(&has_bits);
          _impl_.audio_level_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 dependency_descriptor_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_dependency_descriptor_id(&has_bits);
          _impl_.dependency_descriptor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RtpHeaderExtensionConfig::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog2.RtpHeaderExtensionConfig)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 transmission_time_offset_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_transmission_time_offset_id(), target);
  }

  // optional int32 absolute_send_time_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_absolute_send_time_id(), target);
  }

  // optional int32 transport_sequence_number_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_transport_sequence_number_id(), target);
  }

  // optional int32 video_rotation_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_video_rotation_id(), target);
  }

  // optional int32 audio_level_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_audio_level_id(), target);
  }

  // optional int32 dependency_descriptor_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        6, this->_internal_dependency_descriptor_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog2.RtpHeaderExtensionConfig)
  return target;
}

::size_t RtpHeaderExtensionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.RtpHeaderExtensionConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 transmission_time_offset_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_transmission_time_offset_id());
    }

    // optional int32 absolute_send_time_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_absolute_send_time_id());
    }

    // optional int32 transport_sequence_number_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_transport_sequence_number_id());
    }

    // optional int32 video_rotation_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_video_rotation_id());
    }

    // optional int32 audio_level_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_audio_level_id());
    }

    // optional int32 dependency_descriptor_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_dependency_descriptor_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RtpHeaderExtensionConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RtpHeaderExtensionConfig*>(
      &from));
}

void RtpHeaderExtensionConfig::MergeFrom(const RtpHeaderExtensionConfig& from) {
  RtpHeaderExtensionConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.RtpHeaderExtensionConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.transmission_time_offset_id_ = from._impl_.transmission_time_offset_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.absolute_send_time_id_ = from._impl_.absolute_send_time_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.transport_sequence_number_id_ = from._impl_.transport_sequence_number_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.video_rotation_id_ = from._impl_.video_rotation_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.audio_level_id_ = from._impl_.audio_level_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.dependency_descriptor_id_ = from._impl_.dependency_descriptor_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RtpHeaderExtensionConfig::CopyFrom(const RtpHeaderExtensionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.RtpHeaderExtensionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtpHeaderExtensionConfig::IsInitialized() const {
  return true;
}

void RtpHeaderExtensionConfig::InternalSwap(RtpHeaderExtensionConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RtpHeaderExtensionConfig, _impl_.dependency_descriptor_id_)
      + sizeof(RtpHeaderExtensionConfig::_impl_.dependency_descriptor_id_)
      - PROTOBUF_FIELD_OFFSET(RtpHeaderExtensionConfig, _impl_.transmission_time_offset_id_)>(
          reinterpret_cast<char*>(&_impl_.transmission_time_offset_id_),
          reinterpret_cast<char*>(&other->_impl_.transmission_time_offset_id_));
}

std::string RtpHeaderExtensionConfig::GetTypeName() const {
  return "webrtc.rtclog2.RtpHeaderExtensionConfig";
}

// ===================================================================

class VideoRecvStreamConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoRecvStreamConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(VideoRecvStreamConfig, _impl_._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_remote_ssrc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_local_ssrc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rtx_ssrc(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::webrtc::rtclog2::RtpHeaderExtensionConfig& header_extensions(const VideoRecvStreamConfig* msg);
  static void set_has_header_extensions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::webrtc::rtclog2::RtpHeaderExtensionConfig&
VideoRecvStreamConfig::_Internal::header_extensions(const VideoRecvStreamConfig* msg) {
  return *msg->_impl_.header_extensions_;
}
VideoRecvStreamConfig::VideoRecvStreamConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog2.VideoRecvStreamConfig)
}
VideoRecvStreamConfig::VideoRecvStreamConfig(const VideoRecvStreamConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  VideoRecvStreamConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_extensions_){nullptr}
    , decltype(_impl_.timestamp_ms_) {}

    , decltype(_impl_.remote_ssrc_) {}

    , decltype(_impl_.local_ssrc_) {}

    , decltype(_impl_.rtx_ssrc_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.header_extensions_ = new ::webrtc::rtclog2::RtpHeaderExtensionConfig(*from._impl_.header_extensions_);
  }
  ::memcpy(&_impl_.timestamp_ms_, &from._impl_.timestamp_ms_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.rtx_ssrc_) -
    reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.rtx_ssrc_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.VideoRecvStreamConfig)
}

inline void VideoRecvStreamConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_extensions_){nullptr}
    , decltype(_impl_.timestamp_ms_) { ::int64_t{0} }

    , decltype(_impl_.remote_ssrc_) { 0u }

    , decltype(_impl_.local_ssrc_) { 0u }

    , decltype(_impl_.rtx_ssrc_) { 0u }

  };
}

VideoRecvStreamConfig::~VideoRecvStreamConfig() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.VideoRecvStreamConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoRecvStreamConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_extensions_;
}

void VideoRecvStreamConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoRecvStreamConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.VideoRecvStreamConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.header_extensions_ != nullptr);
    _impl_.header_extensions_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.timestamp_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.rtx_ssrc_) -
        reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.rtx_ssrc_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* VideoRecvStreamConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 remote_ssrc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_remote_ssrc(&has_bits);
          _impl_.remote_ssrc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 local_ssrc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_local_ssrc(&has_bits);
          _impl_.local_ssrc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 rtx_ssrc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_rtx_ssrc(&has_bits);
          _impl_.rtx_ssrc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_extensions(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* VideoRecvStreamConfig::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog2.VideoRecvStreamConfig)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_timestamp_ms(), target);
  }

  // optional uint32 remote_ssrc = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_remote_ssrc(), target);
  }

  // optional uint32 local_ssrc = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_local_ssrc(), target);
  }

  // optional uint32 rtx_ssrc = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_rtx_ssrc(), target);
  }

  // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::header_extensions(this),
        _Internal::header_extensions(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog2.VideoRecvStreamConfig)
  return target;
}

::size_t VideoRecvStreamConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.VideoRecvStreamConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_extensions_);
    }

    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp_ms());
    }

    // optional uint32 remote_ssrc = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_remote_ssrc());
    }

    // optional uint32 local_ssrc = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_local_ssrc());
    }

    // optional uint32 rtx_ssrc = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_rtx_ssrc());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoRecvStreamConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VideoRecvStreamConfig*>(
      &from));
}

void VideoRecvStreamConfig::MergeFrom(const VideoRecvStreamConfig& from) {
  VideoRecvStreamConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.VideoRecvStreamConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header_extensions()->::webrtc::rtclog2::RtpHeaderExtensionConfig::MergeFrom(
          from._internal_header_extensions());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.timestamp_ms_ = from._impl_.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.remote_ssrc_ = from._impl_.remote_ssrc_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.local_ssrc_ = from._impl_.local_ssrc_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.rtx_ssrc_ = from._impl_.rtx_ssrc_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VideoRecvStreamConfig::CopyFrom(const VideoRecvStreamConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.VideoRecvStreamConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoRecvStreamConfig::IsInitialized() const {
  return true;
}

void VideoRecvStreamConfig::InternalSwap(VideoRecvStreamConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoRecvStreamConfig, _impl_.rtx_ssrc_)
      + sizeof(VideoRecvStreamConfig::_impl_.rtx_ssrc_)
      - PROTOBUF_FIELD_OFFSET(VideoRecvStreamConfig, _impl_.header_extensions_)>(
          reinterpret_cast<char*>(&_impl_.header_extensions_),
          reinterpret_cast<char*>(&other->_impl_.header_extensions_));
}

std::string VideoRecvStreamConfig::GetTypeName() const {
  return "webrtc.rtclog2.VideoRecvStreamConfig";
}

// ===================================================================

class VideoSendStreamConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoSendStreamConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(VideoSendStreamConfig, _impl_._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ssrc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rtx_ssrc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::webrtc::rtclog2::RtpHeaderExtensionConfig& header_extensions(const VideoSendStreamConfig* msg);
  static void set_has_header_extensions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::webrtc::rtclog2::RtpHeaderExtensionConfig&
VideoSendStreamConfig::_Internal::header_extensions(const VideoSendStreamConfig* msg) {
  return *msg->_impl_.header_extensions_;
}
VideoSendStreamConfig::VideoSendStreamConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog2.VideoSendStreamConfig)
}
VideoSendStreamConfig::VideoSendStreamConfig(const VideoSendStreamConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  VideoSendStreamConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_extensions_){nullptr}
    , decltype(_impl_.timestamp_ms_) {}

    , decltype(_impl_.ssrc_) {}

    , decltype(_impl_.rtx_ssrc_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.header_extensions_ = new ::webrtc::rtclog2::RtpHeaderExtensionConfig(*from._impl_.header_extensions_);
  }
  ::memcpy(&_impl_.timestamp_ms_, &from._impl_.timestamp_ms_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.rtx_ssrc_) -
    reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.rtx_ssrc_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.VideoSendStreamConfig)
}

inline void VideoSendStreamConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_extensions_){nullptr}
    , decltype(_impl_.timestamp_ms_) { ::int64_t{0} }

    , decltype(_impl_.ssrc_) { 0u }

    , decltype(_impl_.rtx_ssrc_) { 0u }

  };
}

VideoSendStreamConfig::~VideoSendStreamConfig() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.VideoSendStreamConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoSendStreamConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_extensions_;
}

void VideoSendStreamConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoSendStreamConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.VideoSendStreamConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.header_extensions_ != nullptr);
    _impl_.header_extensions_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.timestamp_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.rtx_ssrc_) -
        reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.rtx_ssrc_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* VideoSendStreamConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 ssrc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_ssrc(&has_bits);
          _impl_.ssrc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 rtx_ssrc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_rtx_ssrc(&has_bits);
          _impl_.rtx_ssrc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_extensions(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* VideoSendStreamConfig::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog2.VideoSendStreamConfig)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_timestamp_ms(), target);
  }

  // optional uint32 ssrc = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_ssrc(), target);
  }

  // optional uint32 rtx_ssrc = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_rtx_ssrc(), target);
  }

  // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::header_extensions(this),
        _Internal::header_extensions(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog2.VideoSendStreamConfig)
  return target;
}

::size_t VideoSendStreamConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.VideoSendStreamConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_extensions_);
    }

    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp_ms());
    }

    // optional uint32 ssrc = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_ssrc());
    }

    // optional uint32 rtx_ssrc = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_rtx_ssrc());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoSendStreamConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VideoSendStreamConfig*>(
      &from));
}

void VideoSendStreamConfig::MergeFrom(const VideoSendStreamConfig& from) {
  VideoSendStreamConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.VideoSendStreamConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header_extensions()->::webrtc::rtclog2::RtpHeaderExtensionConfig::MergeFrom(
          from._internal_header_extensions());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.timestamp_ms_ = from._impl_.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ssrc_ = from._impl_.ssrc_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.rtx_ssrc_ = from._impl_.rtx_ssrc_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VideoSendStreamConfig::CopyFrom(const VideoSendStreamConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.VideoSendStreamConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoSendStreamConfig::IsInitialized() const {
  return true;
}

void VideoSendStreamConfig::InternalSwap(VideoSendStreamConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoSendStreamConfig, _impl_.rtx_ssrc_)
      + sizeof(VideoSendStreamConfig::_impl_.rtx_ssrc_)
      - PROTOBUF_FIELD_OFFSET(VideoSendStreamConfig, _impl_.header_extensions_)>(
          reinterpret_cast<char*>(&_impl_.header_extensions_),
          reinterpret_cast<char*>(&other->_impl_.header_extensions_));
}

std::string VideoSendStreamConfig::GetTypeName() const {
  return "webrtc.rtclog2.VideoSendStreamConfig";
}

// ===================================================================

class AudioRecvStreamConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<AudioRecvStreamConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AudioRecvStreamConfig, _impl_._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_remote_ssrc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_local_ssrc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::webrtc::rtclog2::RtpHeaderExtensionConfig& header_extensions(const AudioRecvStreamConfig* msg);
  static void set_has_header_extensions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::webrtc::rtclog2::RtpHeaderExtensionConfig&
AudioRecvStreamConfig::_Internal::header_extensions(const AudioRecvStreamConfig* msg) {
  return *msg->_impl_.header_extensions_;
}
AudioRecvStreamConfig::AudioRecvStreamConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog2.AudioRecvStreamConfig)
}
AudioRecvStreamConfig::AudioRecvStreamConfig(const AudioRecvStreamConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  AudioRecvStreamConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_extensions_){nullptr}
    , decltype(_impl_.timestamp_ms_) {}

    , decltype(_impl_.remote_ssrc_) {}

    , decltype(_impl_.local_ssrc_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.header_extensions_ = new ::webrtc::rtclog2::RtpHeaderExtensionConfig(*from._impl_.header_extensions_);
  }
  ::memcpy(&_impl_.timestamp_ms_, &from._impl_.timestamp_ms_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.local_ssrc_) -
    reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.local_ssrc_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.AudioRecvStreamConfig)
}

inline void AudioRecvStreamConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_extensions_){nullptr}
    , decltype(_impl_.timestamp_ms_) { ::int64_t{0} }

    , decltype(_impl_.remote_ssrc_) { 0u }

    , decltype(_impl_.local_ssrc_) { 0u }

  };
}

AudioRecvStreamConfig::~AudioRecvStreamConfig() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.AudioRecvStreamConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AudioRecvStreamConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_extensions_;
}

void AudioRecvStreamConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AudioRecvStreamConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.AudioRecvStreamConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.header_extensions_ != nullptr);
    _impl_.header_extensions_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.timestamp_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.local_ssrc_) -
        reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.local_ssrc_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AudioRecvStreamConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 remote_ssrc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_remote_ssrc(&has_bits);
          _impl_.remote_ssrc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 local_ssrc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_local_ssrc(&has_bits);
          _impl_.local_ssrc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_extensions(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AudioRecvStreamConfig::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog2.AudioRecvStreamConfig)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_timestamp_ms(), target);
  }

  // optional uint32 remote_ssrc = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_remote_ssrc(), target);
  }

  // optional uint32 local_ssrc = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_local_ssrc(), target);
  }

  // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::header_extensions(this),
        _Internal::header_extensions(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog2.AudioRecvStreamConfig)
  return target;
}

::size_t AudioRecvStreamConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.AudioRecvStreamConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_extensions_);
    }

    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp_ms());
    }

    // optional uint32 remote_ssrc = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_remote_ssrc());
    }

    // optional uint32 local_ssrc = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_local_ssrc());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioRecvStreamConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AudioRecvStreamConfig*>(
      &from));
}

void AudioRecvStreamConfig::MergeFrom(const AudioRecvStreamConfig& from) {
  AudioRecvStreamConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.AudioRecvStreamConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header_extensions()->::webrtc::rtclog2::RtpHeaderExtensionConfig::MergeFrom(
          from._internal_header_extensions());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.timestamp_ms_ = from._impl_.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.remote_ssrc_ = from._impl_.remote_ssrc_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.local_ssrc_ = from._impl_.local_ssrc_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AudioRecvStreamConfig::CopyFrom(const AudioRecvStreamConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.AudioRecvStreamConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioRecvStreamConfig::IsInitialized() const {
  return true;
}

void AudioRecvStreamConfig::InternalSwap(AudioRecvStreamConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioRecvStreamConfig, _impl_.local_ssrc_)
      + sizeof(AudioRecvStreamConfig::_impl_.local_ssrc_)
      - PROTOBUF_FIELD_OFFSET(AudioRecvStreamConfig, _impl_.header_extensions_)>(
          reinterpret_cast<char*>(&_impl_.header_extensions_),
          reinterpret_cast<char*>(&other->_impl_.header_extensions_));
}

std::string AudioRecvStreamConfig::GetTypeName() const {
  return "webrtc.rtclog2.AudioRecvStreamConfig";
}

// ===================================================================

class AudioSendStreamConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<AudioSendStreamConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AudioSendStreamConfig, _impl_._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ssrc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::webrtc::rtclog2::RtpHeaderExtensionConfig& header_extensions(const AudioSendStreamConfig* msg);
  static void set_has_header_extensions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::webrtc::rtclog2::RtpHeaderExtensionConfig&
AudioSendStreamConfig::_Internal::header_extensions(const AudioSendStreamConfig* msg) {
  return *msg->_impl_.header_extensions_;
}
AudioSendStreamConfig::AudioSendStreamConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog2.AudioSendStreamConfig)
}
AudioSendStreamConfig::AudioSendStreamConfig(const AudioSendStreamConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  AudioSendStreamConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_extensions_){nullptr}
    , decltype(_impl_.timestamp_ms_) {}

    , decltype(_impl_.ssrc_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.header_extensions_ = new ::webrtc::rtclog2::RtpHeaderExtensionConfig(*from._impl_.header_extensions_);
  }
  ::memcpy(&_impl_.timestamp_ms_, &from._impl_.timestamp_ms_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.ssrc_) -
    reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.ssrc_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.AudioSendStreamConfig)
}

inline void AudioSendStreamConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_extensions_){nullptr}
    , decltype(_impl_.timestamp_ms_) { ::int64_t{0} }

    , decltype(_impl_.ssrc_) { 0u }

  };
}

AudioSendStreamConfig::~AudioSendStreamConfig() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.AudioSendStreamConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AudioSendStreamConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_extensions_;
}

void AudioSendStreamConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AudioSendStreamConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.AudioSendStreamConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.header_extensions_ != nullptr);
    _impl_.header_extensions_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.timestamp_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ssrc_) -
        reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.ssrc_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AudioSendStreamConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 ssrc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_ssrc(&has_bits);
          _impl_.ssrc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_extensions(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AudioSendStreamConfig::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog2.AudioSendStreamConfig)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_timestamp_ms(), target);
  }

  // optional uint32 ssrc = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_ssrc(), target);
  }

  // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::header_extensions(this),
        _Internal::header_extensions(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog2.AudioSendStreamConfig)
  return target;
}

::size_t AudioSendStreamConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.AudioSendStreamConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_extensions_);
    }

    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp_ms());
    }

    // optional uint32 ssrc = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_ssrc());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioSendStreamConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AudioSendStreamConfig*>(
      &from));
}

void AudioSendStreamConfig::MergeFrom(const AudioSendStreamConfig& from) {
  AudioSendStreamConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.AudioSendStreamConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header_extensions()->::webrtc::rtclog2::RtpHeaderExtensionConfig::MergeFrom(
          from._internal_header_extensions());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.timestamp_ms_ = from._impl_.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ssrc_ = from._impl_.ssrc_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AudioSendStreamConfig::CopyFrom(const AudioSendStreamConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.AudioSendStreamConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioSendStreamConfig::IsInitialized() const {
  return true;
}

void AudioSendStreamConfig::InternalSwap(AudioSendStreamConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioSendStreamConfig, _impl_.ssrc_)
      + sizeof(AudioSendStreamConfig::_impl_.ssrc_)
      - PROTOBUF_FIELD_OFFSET(AudioSendStreamConfig, _impl_.header_extensions_)>(
          reinterpret_cast<char*>(&_impl_.header_extensions_),
          reinterpret_cast<char*>(&other->_impl_.header_extensions_));
}

std::string AudioSendStreamConfig::GetTypeName() const {
  return "webrtc.rtclog2.AudioSendStreamConfig";
}

// ===================================================================

class AudioNetworkAdaptations::_Internal {
 public:
  using HasBits = decltype(std::declval<AudioNetworkAdaptations>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AudioNetworkAdaptations, _impl_._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_bitrate_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_frame_length_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_uplink_packet_loss_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_enable_fec(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_enable_dtx(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_num_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_number_of_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_timestamp_ms_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bitrate_bps_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_frame_length_ms_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uplink_packet_loss_fraction_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_enable_fec_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_enable_dtx_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_num_channels_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

AudioNetworkAdaptations::AudioNetworkAdaptations(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog2.AudioNetworkAdaptations)
}
AudioNetworkAdaptations::AudioNetworkAdaptations(const AudioNetworkAdaptations& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  AudioNetworkAdaptations* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_ms_deltas_) {}

    , decltype(_impl_.bitrate_bps_deltas_) {}

    , decltype(_impl_.frame_length_ms_deltas_) {}

    , decltype(_impl_.uplink_packet_loss_fraction_deltas_) {}

    , decltype(_impl_.enable_fec_deltas_) {}

    , decltype(_impl_.enable_dtx_deltas_) {}

    , decltype(_impl_.num_channels_deltas_) {}

    , decltype(_impl_.timestamp_ms_) {}

    , decltype(_impl_.bitrate_bps_) {}

    , decltype(_impl_.frame_length_ms_) {}

    , decltype(_impl_.uplink_packet_loss_fraction_) {}

    , decltype(_impl_.enable_fec_) {}

    , decltype(_impl_.enable_dtx_) {}

    , decltype(_impl_.num_channels_) {}

    , decltype(_impl_.number_of_deltas_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.timestamp_ms_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_ms_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.timestamp_ms_deltas_.Set(from._internal_timestamp_ms_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.bitrate_bps_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bitrate_bps_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.bitrate_bps_deltas_.Set(from._internal_bitrate_bps_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.frame_length_ms_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.frame_length_ms_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.frame_length_ms_deltas_.Set(from._internal_frame_length_ms_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.uplink_packet_loss_fraction_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.uplink_packet_loss_fraction_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.uplink_packet_loss_fraction_deltas_.Set(from._internal_uplink_packet_loss_fraction_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.enable_fec_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.enable_fec_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.enable_fec_deltas_.Set(from._internal_enable_fec_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.enable_dtx_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.enable_dtx_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000020u) != 0) {
    _this->_impl_.enable_dtx_deltas_.Set(from._internal_enable_dtx_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.num_channels_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.num_channels_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000040u) != 0) {
    _this->_impl_.num_channels_deltas_.Set(from._internal_num_channels_deltas(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_ms_, &from._impl_.timestamp_ms_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.number_of_deltas_) -
    reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.number_of_deltas_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.AudioNetworkAdaptations)
}

inline void AudioNetworkAdaptations::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_ms_deltas_) {}

    , decltype(_impl_.bitrate_bps_deltas_) {}

    , decltype(_impl_.frame_length_ms_deltas_) {}

    , decltype(_impl_.uplink_packet_loss_fraction_deltas_) {}

    , decltype(_impl_.enable_fec_deltas_) {}

    , decltype(_impl_.enable_dtx_deltas_) {}

    , decltype(_impl_.num_channels_deltas_) {}

    , decltype(_impl_.timestamp_ms_) { ::int64_t{0} }

    , decltype(_impl_.bitrate_bps_) { 0 }

    , decltype(_impl_.frame_length_ms_) { 0 }

    , decltype(_impl_.uplink_packet_loss_fraction_) { 0u }

    , decltype(_impl_.enable_fec_) { false }

    , decltype(_impl_.enable_dtx_) { false }

    , decltype(_impl_.num_channels_) { 0u }

    , decltype(_impl_.number_of_deltas_) { 0u }

  };
  _impl_.timestamp_ms_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_ms_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bitrate_bps_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bitrate_bps_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.frame_length_ms_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.frame_length_ms_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uplink_packet_loss_fraction_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.uplink_packet_loss_fraction_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.enable_fec_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.enable_fec_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.enable_dtx_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.enable_dtx_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.num_channels_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.num_channels_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AudioNetworkAdaptations::~AudioNetworkAdaptations() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.AudioNetworkAdaptations)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AudioNetworkAdaptations::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.timestamp_ms_deltas_.Destroy();
  _impl_.bitrate_bps_deltas_.Destroy();
  _impl_.frame_length_ms_deltas_.Destroy();
  _impl_.uplink_packet_loss_fraction_deltas_.Destroy();
  _impl_.enable_fec_deltas_.Destroy();
  _impl_.enable_dtx_deltas_.Destroy();
  _impl_.num_channels_deltas_.Destroy();
}

void AudioNetworkAdaptations::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AudioNetworkAdaptations::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.AudioNetworkAdaptations)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.timestamp_ms_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.bitrate_bps_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.frame_length_ms_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.uplink_packet_loss_fraction_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.enable_fec_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.enable_dtx_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.num_channels_deltas_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.timestamp_ms_ = ::int64_t{0};
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&_impl_.bitrate_bps_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.number_of_deltas_) -
        reinterpret_cast<char*>(&_impl_.bitrate_bps_)) + sizeof(_impl_.number_of_deltas_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AudioNetworkAdaptations::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 bitrate_bps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_bitrate_bps(&has_bits);
          _impl_.bitrate_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 frame_length_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_frame_length_ms(&has_bits);
          _impl_.frame_length_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 uplink_packet_loss_fraction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_uplink_packet_loss_fraction(&has_bits);
          _impl_.uplink_packet_loss_fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool enable_fec = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_enable_fec(&has_bits);
          _impl_.enable_fec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool enable_dtx = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_enable_dtx(&has_bits);
          _impl_.enable_dtx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 num_channels = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_num_channels(&has_bits);
          _impl_.num_channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 number_of_deltas = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_number_of_deltas(&has_bits);
          _impl_.number_of_deltas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes timestamp_ms_deltas = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_timestamp_ms_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes bitrate_bps_deltas = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_bitrate_bps_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes frame_length_ms_deltas = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_frame_length_ms_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes uplink_packet_loss_fraction_deltas = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_uplink_packet_loss_fraction_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes enable_fec_deltas = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_enable_fec_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes enable_dtx_deltas = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_enable_dtx_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes num_channels_deltas = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_num_channels_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AudioNetworkAdaptations::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog2.AudioNetworkAdaptations)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_timestamp_ms(), target);
  }

  // optional int32 bitrate_bps = 2;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_bitrate_bps(), target);
  }

  // optional int32 frame_length_ms = 3;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_frame_length_ms(), target);
  }

  // optional uint32 uplink_packet_loss_fraction = 4;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_uplink_packet_loss_fraction(), target);
  }

  // optional bool enable_fec = 5;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_enable_fec(), target);
  }

  // optional bool enable_dtx = 6;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_enable_dtx(), target);
  }

  // optional uint32 num_channels = 7;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_num_channels(), target);
  }

  // optional uint32 number_of_deltas = 8;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this->_internal_number_of_deltas(), target);
  }

  // optional bytes timestamp_ms_deltas = 101;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_timestamp_ms_deltas();
    target = stream->WriteBytesMaybeAliased(101, _s, target);
  }

  // optional bytes bitrate_bps_deltas = 102;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_bitrate_bps_deltas();
    target = stream->WriteBytesMaybeAliased(102, _s, target);
  }

  // optional bytes frame_length_ms_deltas = 103;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_frame_length_ms_deltas();
    target = stream->WriteBytesMaybeAliased(103, _s, target);
  }

  // optional bytes uplink_packet_loss_fraction_deltas = 104;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_uplink_packet_loss_fraction_deltas();
    target = stream->WriteBytesMaybeAliased(104, _s, target);
  }

  // optional bytes enable_fec_deltas = 105;
  if (cached_has_bits & 0x00000010u) {
    const std::string& _s = this->_internal_enable_fec_deltas();
    target = stream->WriteBytesMaybeAliased(105, _s, target);
  }

  // optional bytes enable_dtx_deltas = 106;
  if (cached_has_bits & 0x00000020u) {
    const std::string& _s = this->_internal_enable_dtx_deltas();
    target = stream->WriteBytesMaybeAliased(106, _s, target);
  }

  // optional bytes num_channels_deltas = 107;
  if (cached_has_bits & 0x00000040u) {
    const std::string& _s = this->_internal_num_channels_deltas();
    target = stream->WriteBytesMaybeAliased(107, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog2.AudioNetworkAdaptations)
  return target;
}

::size_t AudioNetworkAdaptations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.AudioNetworkAdaptations)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes timestamp_ms_deltas = 101;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_timestamp_ms_deltas());
    }

    // optional bytes bitrate_bps_deltas = 102;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_bitrate_bps_deltas());
    }

    // optional bytes frame_length_ms_deltas = 103;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_frame_length_ms_deltas());
    }

    // optional bytes uplink_packet_loss_fraction_deltas = 104;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_uplink_packet_loss_fraction_deltas());
    }

    // optional bytes enable_fec_deltas = 105;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_enable_fec_deltas());
    }

    // optional bytes enable_dtx_deltas = 106;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_enable_dtx_deltas());
    }

    // optional bytes num_channels_deltas = 107;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_num_channels_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp_ms());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional int32 bitrate_bps = 2;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_bitrate_bps());
    }

    // optional int32 frame_length_ms = 3;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_frame_length_ms());
    }

    // optional uint32 uplink_packet_loss_fraction = 4;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_uplink_packet_loss_fraction());
    }

    // optional bool enable_fec = 5;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2;
    }

    // optional bool enable_dtx = 6;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2;
    }

    // optional uint32 num_channels = 7;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_num_channels());
    }

    // optional uint32 number_of_deltas = 8;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_number_of_deltas());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioNetworkAdaptations::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AudioNetworkAdaptations*>(
      &from));
}

void AudioNetworkAdaptations::MergeFrom(const AudioNetworkAdaptations& from) {
  AudioNetworkAdaptations* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.AudioNetworkAdaptations)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_timestamp_ms_deltas(from._internal_timestamp_ms_deltas());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_bitrate_bps_deltas(from._internal_bitrate_bps_deltas());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_frame_length_ms_deltas(from._internal_frame_length_ms_deltas());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_uplink_packet_loss_fraction_deltas(from._internal_uplink_packet_loss_fraction_deltas());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_enable_fec_deltas(from._internal_enable_fec_deltas());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_enable_dtx_deltas(from._internal_enable_dtx_deltas());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_num_channels_deltas(from._internal_num_channels_deltas());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.timestamp_ms_ = from._impl_.timestamp_ms_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.bitrate_bps_ = from._impl_.bitrate_bps_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.frame_length_ms_ = from._impl_.frame_length_ms_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.uplink_packet_loss_fraction_ = from._impl_.uplink_packet_loss_fraction_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.enable_fec_ = from._impl_.enable_fec_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.enable_dtx_ = from._impl_.enable_dtx_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.num_channels_ = from._impl_.num_channels_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.number_of_deltas_ = from._impl_.number_of_deltas_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AudioNetworkAdaptations::CopyFrom(const AudioNetworkAdaptations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.AudioNetworkAdaptations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioNetworkAdaptations::IsInitialized() const {
  return true;
}

void AudioNetworkAdaptations::InternalSwap(AudioNetworkAdaptations* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_ms_deltas_, lhs_arena,
                                       &other->_impl_.timestamp_ms_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bitrate_bps_deltas_, lhs_arena,
                                       &other->_impl_.bitrate_bps_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.frame_length_ms_deltas_, lhs_arena,
                                       &other->_impl_.frame_length_ms_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uplink_packet_loss_fraction_deltas_, lhs_arena,
                                       &other->_impl_.uplink_packet_loss_fraction_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.enable_fec_deltas_, lhs_arena,
                                       &other->_impl_.enable_fec_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.enable_dtx_deltas_, lhs_arena,
                                       &other->_impl_.enable_dtx_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.num_channels_deltas_, lhs_arena,
                                       &other->_impl_.num_channels_deltas_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioNetworkAdaptations, _impl_.number_of_deltas_)
      + sizeof(AudioNetworkAdaptations::_impl_.number_of_deltas_)
      - PROTOBUF_FIELD_OFFSET(AudioNetworkAdaptations, _impl_.timestamp_ms_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_ms_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_ms_));
}

std::string AudioNetworkAdaptations::GetTypeName() const {
  return "webrtc.rtclog2.AudioNetworkAdaptations";
}

// ===================================================================

class BweProbeCluster::_Internal {
 public:
  using HasBits = decltype(std::declval<BweProbeCluster>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BweProbeCluster, _impl_._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bitrate_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_min_packets(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_min_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

BweProbeCluster::BweProbeCluster(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog2.BweProbeCluster)
}
BweProbeCluster::BweProbeCluster(const BweProbeCluster& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.BweProbeCluster)
}

inline void BweProbeCluster::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_ms_) { ::int64_t{0} }

    , decltype(_impl_.id_) { 0u }

    , decltype(_impl_.bitrate_bps_) { 0u }

    , decltype(_impl_.min_packets_) { 0u }

    , decltype(_impl_.min_bytes_) { 0u }

  };
}

BweProbeCluster::~BweProbeCluster() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.BweProbeCluster)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BweProbeCluster::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void BweProbeCluster::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BweProbeCluster::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.BweProbeCluster)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.timestamp_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.min_bytes_) -
        reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.min_bytes_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BweProbeCluster::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 bitrate_bps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_bitrate_bps(&has_bits);
          _impl_.bitrate_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 min_packets = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_min_packets(&has_bits);
          _impl_.min_packets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 min_bytes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_min_bytes(&has_bits);
          _impl_.min_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BweProbeCluster::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog2.BweProbeCluster)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_timestamp_ms(), target);
  }

  // optional uint32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_id(), target);
  }

  // optional uint32 bitrate_bps = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_bitrate_bps(), target);
  }

  // optional uint32 min_packets = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_min_packets(), target);
  }

  // optional uint32 min_bytes = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_min_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog2.BweProbeCluster)
  return target;
}

::size_t BweProbeCluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.BweProbeCluster)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp_ms());
    }

    // optional uint32 id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_id());
    }

    // optional uint32 bitrate_bps = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_bitrate_bps());
    }

    // optional uint32 min_packets = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_min_packets());
    }

    // optional uint32 min_bytes = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_min_bytes());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BweProbeCluster::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BweProbeCluster*>(
      &from));
}

void BweProbeCluster::MergeFrom(const BweProbeCluster& from) {
  BweProbeCluster* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.BweProbeCluster)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.timestamp_ms_ = from._impl_.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.bitrate_bps_ = from._impl_.bitrate_bps_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.min_packets_ = from._impl_.min_packets_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.min_bytes_ = from._impl_.min_bytes_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BweProbeCluster::CopyFrom(const BweProbeCluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.BweProbeCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BweProbeCluster::IsInitialized() const {
  return true;
}

void BweProbeCluster::InternalSwap(BweProbeCluster* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BweProbeCluster, _impl_.min_bytes_)
      + sizeof(BweProbeCluster::_impl_.min_bytes_)
      - PROTOBUF_FIELD_OFFSET(BweProbeCluster, _impl_.timestamp_ms_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_ms_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_ms_));
}

std::string BweProbeCluster::GetTypeName() const {
  return "webrtc.rtclog2.BweProbeCluster";
}

// ===================================================================

class BweProbeResultSuccess::_Internal {
 public:
  using HasBits = decltype(std::declval<BweProbeResultSuccess>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BweProbeResultSuccess, _impl_._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bitrate_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

BweProbeResultSuccess::BweProbeResultSuccess(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog2.BweProbeResultSuccess)
}
BweProbeResultSuccess::BweProbeResultSuccess(const BweProbeResultSuccess& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.BweProbeResultSuccess)
}

inline void BweProbeResultSuccess::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_ms_) { ::int64_t{0} }

    , decltype(_impl_.id_) { 0u }

    , decltype(_impl_.bitrate_bps_) { 0u }

  };
}

BweProbeResultSuccess::~BweProbeResultSuccess() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.BweProbeResultSuccess)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BweProbeResultSuccess::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void BweProbeResultSuccess::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BweProbeResultSuccess::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.BweProbeResultSuccess)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.timestamp_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.bitrate_bps_) -
        reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.bitrate_bps_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BweProbeResultSuccess::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 bitrate_bps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_bitrate_bps(&has_bits);
          _impl_.bitrate_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BweProbeResultSuccess::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog2.BweProbeResultSuccess)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_timestamp_ms(), target);
  }

  // optional uint32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_id(), target);
  }

  // optional uint32 bitrate_bps = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_bitrate_bps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog2.BweProbeResultSuccess)
  return target;
}

::size_t BweProbeResultSuccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.BweProbeResultSuccess)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp_ms());
    }

    // optional uint32 id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_id());
    }

    // optional uint32 bitrate_bps = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_bitrate_bps());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BweProbeResultSuccess::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BweProbeResultSuccess*>(
      &from));
}

void BweProbeResultSuccess::MergeFrom(const BweProbeResultSuccess& from) {
  BweProbeResultSuccess* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.BweProbeResultSuccess)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.timestamp_ms_ = from._impl_.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.bitrate_bps_ = from._impl_.bitrate_bps_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BweProbeResultSuccess::CopyFrom(const BweProbeResultSuccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.BweProbeResultSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BweProbeResultSuccess::IsInitialized() const {
  return true;
}

void BweProbeResultSuccess::InternalSwap(BweProbeResultSuccess* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BweProbeResultSuccess, _impl_.bitrate_bps_)
      + sizeof(BweProbeResultSuccess::_impl_.bitrate_bps_)
      - PROTOBUF_FIELD_OFFSET(BweProbeResultSuccess, _impl_.timestamp_ms_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_ms_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_ms_));
}

std::string BweProbeResultSuccess::GetTypeName() const {
  return "webrtc.rtclog2.BweProbeResultSuccess";
}

// ===================================================================

class BweProbeResultFailure::_Internal {
 public:
  using HasBits = decltype(std::declval<BweProbeResultFailure>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BweProbeResultFailure, _impl_._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_failure(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

BweProbeResultFailure::BweProbeResultFailure(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog2.BweProbeResultFailure)
}
BweProbeResultFailure::BweProbeResultFailure(const BweProbeResultFailure& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.BweProbeResultFailure)
}

inline void BweProbeResultFailure::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_ms_) { ::int64_t{0} }

    , decltype(_impl_.id_) { 0u }

    , decltype(_impl_.failure_) { 0 }

  };
}

BweProbeResultFailure::~BweProbeResultFailure() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.BweProbeResultFailure)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BweProbeResultFailure::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void BweProbeResultFailure::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BweProbeResultFailure::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.BweProbeResultFailure)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.timestamp_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.failure_) -
        reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.failure_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BweProbeResultFailure::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .webrtc.rtclog2.BweProbeResultFailure.FailureReason failure = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::webrtc::rtclog2::BweProbeResultFailure_FailureReason_IsValid(static_cast<int>(val)))) {
            _internal_set_failure(static_cast<::webrtc::rtclog2::BweProbeResultFailure_FailureReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BweProbeResultFailure::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog2.BweProbeResultFailure)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_timestamp_ms(), target);
  }

  // optional uint32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_id(), target);
  }

  // optional .webrtc.rtclog2.BweProbeResultFailure.FailureReason failure = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_failure(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog2.BweProbeResultFailure)
  return target;
}

::size_t BweProbeResultFailure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.BweProbeResultFailure)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp_ms());
    }

    // optional uint32 id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_id());
    }

    // optional .webrtc.rtclog2.BweProbeResultFailure.FailureReason failure = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_failure());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BweProbeResultFailure::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BweProbeResultFailure*>(
      &from));
}

void BweProbeResultFailure::MergeFrom(const BweProbeResultFailure& from) {
  BweProbeResultFailure* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.BweProbeResultFailure)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.timestamp_ms_ = from._impl_.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.failure_ = from._impl_.failure_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BweProbeResultFailure::CopyFrom(const BweProbeResultFailure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.BweProbeResultFailure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BweProbeResultFailure::IsInitialized() const {
  return true;
}

void BweProbeResultFailure::InternalSwap(BweProbeResultFailure* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BweProbeResultFailure, _impl_.failure_)
      + sizeof(BweProbeResultFailure::_impl_.failure_)
      - PROTOBUF_FIELD_OFFSET(BweProbeResultFailure, _impl_.timestamp_ms_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_ms_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_ms_));
}

std::string BweProbeResultFailure::GetTypeName() const {
  return "webrtc.rtclog2.BweProbeResultFailure";
}

// ===================================================================

class AlrState::_Internal {
 public:
  using HasBits = decltype(std::declval<AlrState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AlrState, _impl_._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_in_alr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AlrState::AlrState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog2.AlrState)
}
AlrState::AlrState(const AlrState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.AlrState)
}

inline void AlrState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_ms_) { ::int64_t{0} }

    , decltype(_impl_.in_alr_) { false }

  };
}

AlrState::~AlrState() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.AlrState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AlrState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void AlrState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AlrState::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.AlrState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.timestamp_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.in_alr_) -
        reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.in_alr_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AlrState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool in_alr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_in_alr(&has_bits);
          _impl_.in_alr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AlrState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog2.AlrState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_timestamp_ms(), target);
  }

  // optional bool in_alr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_in_alr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog2.AlrState)
  return target;
}

::size_t AlrState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.AlrState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp_ms());
    }

    // optional bool in_alr = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlrState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AlrState*>(
      &from));
}

void AlrState::MergeFrom(const AlrState& from) {
  AlrState* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.AlrState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.timestamp_ms_ = from._impl_.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.in_alr_ = from._impl_.in_alr_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AlrState::CopyFrom(const AlrState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.AlrState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlrState::IsInitialized() const {
  return true;
}

void AlrState::InternalSwap(AlrState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AlrState, _impl_.in_alr_)
      + sizeof(AlrState::_impl_.in_alr_)
      - PROTOBUF_FIELD_OFFSET(AlrState, _impl_.timestamp_ms_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_ms_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_ms_));
}

std::string AlrState::GetTypeName() const {
  return "webrtc.rtclog2.AlrState";
}

// ===================================================================

class IceCandidatePairConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<IceCandidatePairConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(IceCandidatePairConfig, _impl_._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_config_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_candidate_pair_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_local_candidate_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_local_relay_protocol(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_local_network_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_local_address_family(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_remote_candidate_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_remote_address_family(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_candidate_pair_protocol(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

IceCandidatePairConfig::IceCandidatePairConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog2.IceCandidatePairConfig)
}
IceCandidatePairConfig::IceCandidatePairConfig(const IceCandidatePairConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.IceCandidatePairConfig)
}

inline void IceCandidatePairConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_ms_) { ::int64_t{0} }

    , decltype(_impl_.config_type_) { 0 }

    , decltype(_impl_.candidate_pair_id_) { 0u }

    , decltype(_impl_.local_candidate_type_) { 0 }

    , decltype(_impl_.local_relay_protocol_) { 0 }

    , decltype(_impl_.local_network_type_) { 0 }

    , decltype(_impl_.local_address_family_) { 0 }

    , decltype(_impl_.remote_candidate_type_) { 0 }

    , decltype(_impl_.remote_address_family_) { 0 }

    , decltype(_impl_.candidate_pair_protocol_) { 0 }

  };
}

IceCandidatePairConfig::~IceCandidatePairConfig() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.IceCandidatePairConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IceCandidatePairConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void IceCandidatePairConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IceCandidatePairConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.IceCandidatePairConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.timestamp_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.remote_candidate_type_) -
        reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.remote_candidate_type_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.remote_address_family_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.candidate_pair_protocol_) -
        reinterpret_cast<char*>(&_impl_.remote_address_family_)) + sizeof(_impl_.candidate_pair_protocol_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IceCandidatePairConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidatePairConfigType config_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::webrtc::rtclog2::IceCandidatePairConfig_IceCandidatePairConfigType_IsValid(static_cast<int>(val)))) {
            _internal_set_config_type(static_cast<::webrtc::rtclog2::IceCandidatePairConfig_IceCandidatePairConfigType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 candidate_pair_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_candidate_pair_id(&has_bits);
          _impl_.candidate_pair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidateType local_candidate_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType_IsValid(static_cast<int>(val)))) {
            _internal_set_local_candidate_type(static_cast<::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .webrtc.rtclog2.IceCandidatePairConfig.Protocol local_relay_protocol = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::webrtc::rtclog2::IceCandidatePairConfig_Protocol_IsValid(static_cast<int>(val)))) {
            _internal_set_local_relay_protocol(static_cast<::webrtc::rtclog2::IceCandidatePairConfig_Protocol>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .webrtc.rtclog2.IceCandidatePairConfig.NetworkType local_network_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::webrtc::rtclog2::IceCandidatePairConfig_NetworkType_IsValid(static_cast<int>(val)))) {
            _internal_set_local_network_type(static_cast<::webrtc::rtclog2::IceCandidatePairConfig_NetworkType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .webrtc.rtclog2.IceCandidatePairConfig.AddressFamily local_address_family = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily_IsValid(static_cast<int>(val)))) {
            _internal_set_local_address_family(static_cast<::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidateType remote_candidate_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType_IsValid(static_cast<int>(val)))) {
            _internal_set_remote_candidate_type(static_cast<::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .webrtc.rtclog2.IceCandidatePairConfig.AddressFamily remote_address_family = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily_IsValid(static_cast<int>(val)))) {
            _internal_set_remote_address_family(static_cast<::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .webrtc.rtclog2.IceCandidatePairConfig.Protocol candidate_pair_protocol = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::webrtc::rtclog2::IceCandidatePairConfig_Protocol_IsValid(static_cast<int>(val)))) {
            _internal_set_candidate_pair_protocol(static_cast<::webrtc::rtclog2::IceCandidatePairConfig_Protocol>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* IceCandidatePairConfig::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog2.IceCandidatePairConfig)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_timestamp_ms(), target);
  }

  // optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidatePairConfigType config_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_config_type(), target);
  }

  // optional uint32 candidate_pair_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_candidate_pair_id(), target);
  }

  // optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidateType local_candidate_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_local_candidate_type(), target);
  }

  // optional .webrtc.rtclog2.IceCandidatePairConfig.Protocol local_relay_protocol = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_local_relay_protocol(), target);
  }

  // optional .webrtc.rtclog2.IceCandidatePairConfig.NetworkType local_network_type = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_local_network_type(), target);
  }

  // optional .webrtc.rtclog2.IceCandidatePairConfig.AddressFamily local_address_family = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_local_address_family(), target);
  }

  // optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidateType remote_candidate_type = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        8, this->_internal_remote_candidate_type(), target);
  }

  // optional .webrtc.rtclog2.IceCandidatePairConfig.AddressFamily remote_address_family = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        9, this->_internal_remote_address_family(), target);
  }

  // optional .webrtc.rtclog2.IceCandidatePairConfig.Protocol candidate_pair_protocol = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        10, this->_internal_candidate_pair_protocol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog2.IceCandidatePairConfig)
  return target;
}

::size_t IceCandidatePairConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.IceCandidatePairConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp_ms());
    }

    // optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidatePairConfigType config_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_config_type());
    }

    // optional uint32 candidate_pair_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_candidate_pair_id());
    }

    // optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidateType local_candidate_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_local_candidate_type());
    }

    // optional .webrtc.rtclog2.IceCandidatePairConfig.Protocol local_relay_protocol = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_local_relay_protocol());
    }

    // optional .webrtc.rtclog2.IceCandidatePairConfig.NetworkType local_network_type = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_local_network_type());
    }

    // optional .webrtc.rtclog2.IceCandidatePairConfig.AddressFamily local_address_family = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_local_address_family());
    }

    // optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidateType remote_candidate_type = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_remote_candidate_type());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .webrtc.rtclog2.IceCandidatePairConfig.AddressFamily remote_address_family = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_remote_address_family());
    }

    // optional .webrtc.rtclog2.IceCandidatePairConfig.Protocol candidate_pair_protocol = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_candidate_pair_protocol());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IceCandidatePairConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IceCandidatePairConfig*>(
      &from));
}

void IceCandidatePairConfig::MergeFrom(const IceCandidatePairConfig& from) {
  IceCandidatePairConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.IceCandidatePairConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.timestamp_ms_ = from._impl_.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.config_type_ = from._impl_.config_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.candidate_pair_id_ = from._impl_.candidate_pair_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.local_candidate_type_ = from._impl_.local_candidate_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.local_relay_protocol_ = from._impl_.local_relay_protocol_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.local_network_type_ = from._impl_.local_network_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.local_address_family_ = from._impl_.local_address_family_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.remote_candidate_type_ = from._impl_.remote_candidate_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.remote_address_family_ = from._impl_.remote_address_family_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.candidate_pair_protocol_ = from._impl_.candidate_pair_protocol_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IceCandidatePairConfig::CopyFrom(const IceCandidatePairConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.IceCandidatePairConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IceCandidatePairConfig::IsInitialized() const {
  return true;
}

void IceCandidatePairConfig::InternalSwap(IceCandidatePairConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IceCandidatePairConfig, _impl_.candidate_pair_protocol_)
      + sizeof(IceCandidatePairConfig::_impl_.candidate_pair_protocol_)
      - PROTOBUF_FIELD_OFFSET(IceCandidatePairConfig, _impl_.timestamp_ms_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_ms_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_ms_));
}

std::string IceCandidatePairConfig::GetTypeName() const {
  return "webrtc.rtclog2.IceCandidatePairConfig";
}

// ===================================================================

class IceCandidatePairEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<IceCandidatePairEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(IceCandidatePairEvent, _impl_._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_candidate_pair_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_transaction_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

IceCandidatePairEvent::IceCandidatePairEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog2.IceCandidatePairEvent)
}
IceCandidatePairEvent::IceCandidatePairEvent(const IceCandidatePairEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.IceCandidatePairEvent)
}

inline void IceCandidatePairEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_ms_) { ::int64_t{0} }

    , decltype(_impl_.event_type_) { 0 }

    , decltype(_impl_.candidate_pair_id_) { 0u }

    , decltype(_impl_.transaction_id_) { 0u }

  };
}

IceCandidatePairEvent::~IceCandidatePairEvent() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.IceCandidatePairEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IceCandidatePairEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void IceCandidatePairEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IceCandidatePairEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.IceCandidatePairEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.timestamp_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.transaction_id_) -
        reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.transaction_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IceCandidatePairEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .webrtc.rtclog2.IceCandidatePairEvent.IceCandidatePairEventType event_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::webrtc::rtclog2::IceCandidatePairEvent_IceCandidatePairEventType_IsValid(static_cast<int>(val)))) {
            _internal_set_event_type(static_cast<::webrtc::rtclog2::IceCandidatePairEvent_IceCandidatePairEventType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 candidate_pair_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_candidate_pair_id(&has_bits);
          _impl_.candidate_pair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 transaction_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_transaction_id(&has_bits);
          _impl_.transaction_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* IceCandidatePairEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog2.IceCandidatePairEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_timestamp_ms(), target);
  }

  // optional .webrtc.rtclog2.IceCandidatePairEvent.IceCandidatePairEventType event_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_event_type(), target);
  }

  // optional uint32 candidate_pair_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_candidate_pair_id(), target);
  }

  // optional uint32 transaction_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_transaction_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog2.IceCandidatePairEvent)
  return target;
}

::size_t IceCandidatePairEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.IceCandidatePairEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp_ms());
    }

    // optional .webrtc.rtclog2.IceCandidatePairEvent.IceCandidatePairEventType event_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_event_type());
    }

    // optional uint32 candidate_pair_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_candidate_pair_id());
    }

    // optional uint32 transaction_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_transaction_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IceCandidatePairEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IceCandidatePairEvent*>(
      &from));
}

void IceCandidatePairEvent::MergeFrom(const IceCandidatePairEvent& from) {
  IceCandidatePairEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.IceCandidatePairEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.timestamp_ms_ = from._impl_.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.event_type_ = from._impl_.event_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.candidate_pair_id_ = from._impl_.candidate_pair_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.transaction_id_ = from._impl_.transaction_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IceCandidatePairEvent::CopyFrom(const IceCandidatePairEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.IceCandidatePairEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IceCandidatePairEvent::IsInitialized() const {
  return true;
}

void IceCandidatePairEvent::InternalSwap(IceCandidatePairEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IceCandidatePairEvent, _impl_.transaction_id_)
      + sizeof(IceCandidatePairEvent::_impl_.transaction_id_)
      - PROTOBUF_FIELD_OFFSET(IceCandidatePairEvent, _impl_.timestamp_ms_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_ms_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_ms_));
}

std::string IceCandidatePairEvent::GetTypeName() const {
  return "webrtc.rtclog2.IceCandidatePairEvent";
}

// ===================================================================

class DtlsTransportStateEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<DtlsTransportStateEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DtlsTransportStateEvent, _impl_._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dtls_transport_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DtlsTransportStateEvent::DtlsTransportStateEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog2.DtlsTransportStateEvent)
}
DtlsTransportStateEvent::DtlsTransportStateEvent(const DtlsTransportStateEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.DtlsTransportStateEvent)
}

inline void DtlsTransportStateEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_ms_) { ::int64_t{0} }

    , decltype(_impl_.dtls_transport_state_) { 0 }

  };
}

DtlsTransportStateEvent::~DtlsTransportStateEvent() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.DtlsTransportStateEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DtlsTransportStateEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void DtlsTransportStateEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DtlsTransportStateEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.DtlsTransportStateEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.timestamp_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.dtls_transport_state_) -
        reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.dtls_transport_state_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DtlsTransportStateEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .webrtc.rtclog2.DtlsTransportStateEvent.DtlsTransportState dtls_transport_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::webrtc::rtclog2::DtlsTransportStateEvent_DtlsTransportState_IsValid(static_cast<int>(val)))) {
            _internal_set_dtls_transport_state(static_cast<::webrtc::rtclog2::DtlsTransportStateEvent_DtlsTransportState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DtlsTransportStateEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog2.DtlsTransportStateEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_timestamp_ms(), target);
  }

  // optional .webrtc.rtclog2.DtlsTransportStateEvent.DtlsTransportState dtls_transport_state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_dtls_transport_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog2.DtlsTransportStateEvent)
  return target;
}

::size_t DtlsTransportStateEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.DtlsTransportStateEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp_ms());
    }

    // optional .webrtc.rtclog2.DtlsTransportStateEvent.DtlsTransportState dtls_transport_state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_dtls_transport_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DtlsTransportStateEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DtlsTransportStateEvent*>(
      &from));
}

void DtlsTransportStateEvent::MergeFrom(const DtlsTransportStateEvent& from) {
  DtlsTransportStateEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.DtlsTransportStateEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.timestamp_ms_ = from._impl_.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.dtls_transport_state_ = from._impl_.dtls_transport_state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DtlsTransportStateEvent::CopyFrom(const DtlsTransportStateEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.DtlsTransportStateEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DtlsTransportStateEvent::IsInitialized() const {
  return true;
}

void DtlsTransportStateEvent::InternalSwap(DtlsTransportStateEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DtlsTransportStateEvent, _impl_.dtls_transport_state_)
      + sizeof(DtlsTransportStateEvent::_impl_.dtls_transport_state_)
      - PROTOBUF_FIELD_OFFSET(DtlsTransportStateEvent, _impl_.timestamp_ms_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_ms_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_ms_));
}

std::string DtlsTransportStateEvent::GetTypeName() const {
  return "webrtc.rtclog2.DtlsTransportStateEvent";
}

// ===================================================================

class DtlsWritableState::_Internal {
 public:
  using HasBits = decltype(std::declval<DtlsWritableState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DtlsWritableState, _impl_._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_writable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DtlsWritableState::DtlsWritableState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog2.DtlsWritableState)
}
DtlsWritableState::DtlsWritableState(const DtlsWritableState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.DtlsWritableState)
}

inline void DtlsWritableState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_ms_) { ::int64_t{0} }

    , decltype(_impl_.writable_) { false }

  };
}

DtlsWritableState::~DtlsWritableState() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.DtlsWritableState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DtlsWritableState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void DtlsWritableState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DtlsWritableState::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.DtlsWritableState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.timestamp_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.writable_) -
        reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.writable_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DtlsWritableState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool writable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_writable(&has_bits);
          _impl_.writable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DtlsWritableState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog2.DtlsWritableState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_timestamp_ms(), target);
  }

  // optional bool writable = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_writable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog2.DtlsWritableState)
  return target;
}

::size_t DtlsWritableState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.DtlsWritableState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp_ms());
    }

    // optional bool writable = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DtlsWritableState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DtlsWritableState*>(
      &from));
}

void DtlsWritableState::MergeFrom(const DtlsWritableState& from) {
  DtlsWritableState* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.DtlsWritableState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.timestamp_ms_ = from._impl_.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.writable_ = from._impl_.writable_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DtlsWritableState::CopyFrom(const DtlsWritableState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.DtlsWritableState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DtlsWritableState::IsInitialized() const {
  return true;
}

void DtlsWritableState::InternalSwap(DtlsWritableState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DtlsWritableState, _impl_.writable_)
      + sizeof(DtlsWritableState::_impl_.writable_)
      - PROTOBUF_FIELD_OFFSET(DtlsWritableState, _impl_.timestamp_ms_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_ms_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_ms_));
}

std::string DtlsWritableState::GetTypeName() const {
  return "webrtc.rtclog2.DtlsWritableState";
}

// ===================================================================

class RouteChange::_Internal {
 public:
  using HasBits = decltype(std::declval<RouteChange>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RouteChange, _impl_._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_connected(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_overhead(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

RouteChange::RouteChange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog2.RouteChange)
}
RouteChange::RouteChange(const RouteChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.RouteChange)
}

inline void RouteChange::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_ms_) { ::int64_t{0} }

    , decltype(_impl_.connected_) { false }

    , decltype(_impl_.overhead_) { 0u }

  };
}

RouteChange::~RouteChange() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.RouteChange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RouteChange::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void RouteChange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RouteChange::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.RouteChange)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.timestamp_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.overhead_) -
        reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.overhead_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RouteChange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool connected = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_connected(&has_bits);
          _impl_.connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 overhead = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_overhead(&has_bits);
          _impl_.overhead_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RouteChange::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog2.RouteChange)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_timestamp_ms(), target);
  }

  // optional bool connected = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_connected(), target);
  }

  // optional uint32 overhead = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_overhead(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog2.RouteChange)
  return target;
}

::size_t RouteChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.RouteChange)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp_ms());
    }

    // optional bool connected = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

    // optional uint32 overhead = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_overhead());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RouteChange*>(
      &from));
}

void RouteChange::MergeFrom(const RouteChange& from) {
  RouteChange* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.RouteChange)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.timestamp_ms_ = from._impl_.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.connected_ = from._impl_.connected_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.overhead_ = from._impl_.overhead_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RouteChange::CopyFrom(const RouteChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.RouteChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteChange::IsInitialized() const {
  return true;
}

void RouteChange::InternalSwap(RouteChange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteChange, _impl_.overhead_)
      + sizeof(RouteChange::_impl_.overhead_)
      - PROTOBUF_FIELD_OFFSET(RouteChange, _impl_.timestamp_ms_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_ms_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_ms_));
}

std::string RouteChange::GetTypeName() const {
  return "webrtc.rtclog2.RouteChange";
}

// ===================================================================

class RemoteEstimates::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoteEstimates>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RemoteEstimates, _impl_._has_bits_);
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_link_capacity_lower_kbps(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_link_capacity_upper_kbps(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_number_of_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_timestamp_ms_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_link_capacity_lower_kbps_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_link_capacity_upper_kbps_deltas(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

RemoteEstimates::RemoteEstimates(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog2.RemoteEstimates)
}
RemoteEstimates::RemoteEstimates(const RemoteEstimates& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  RemoteEstimates* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_ms_deltas_) {}

    , decltype(_impl_.link_capacity_lower_kbps_deltas_) {}

    , decltype(_impl_.link_capacity_upper_kbps_deltas_) {}

    , decltype(_impl_.timestamp_ms_) {}

    , decltype(_impl_.link_capacity_lower_kbps_) {}

    , decltype(_impl_.link_capacity_upper_kbps_) {}

    , decltype(_impl_.number_of_deltas_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.timestamp_ms_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_ms_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.timestamp_ms_deltas_.Set(from._internal_timestamp_ms_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.link_capacity_lower_kbps_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.link_capacity_lower_kbps_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.link_capacity_lower_kbps_deltas_.Set(from._internal_link_capacity_lower_kbps_deltas(), _this->GetArenaForAllocation());
  }
  _impl_.link_capacity_upper_kbps_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.link_capacity_upper_kbps_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.link_capacity_upper_kbps_deltas_.Set(from._internal_link_capacity_upper_kbps_deltas(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_ms_, &from._impl_.timestamp_ms_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.number_of_deltas_) -
    reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.number_of_deltas_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.RemoteEstimates)
}

inline void RemoteEstimates::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_ms_deltas_) {}

    , decltype(_impl_.link_capacity_lower_kbps_deltas_) {}

    , decltype(_impl_.link_capacity_upper_kbps_deltas_) {}

    , decltype(_impl_.timestamp_ms_) { ::int64_t{0} }

    , decltype(_impl_.link_capacity_lower_kbps_) { 0u }

    , decltype(_impl_.link_capacity_upper_kbps_) { 0u }

    , decltype(_impl_.number_of_deltas_) { 0u }

  };
  _impl_.timestamp_ms_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_ms_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.link_capacity_lower_kbps_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.link_capacity_lower_kbps_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.link_capacity_upper_kbps_deltas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.link_capacity_upper_kbps_deltas_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RemoteEstimates::~RemoteEstimates() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.RemoteEstimates)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoteEstimates::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.timestamp_ms_deltas_.Destroy();
  _impl_.link_capacity_lower_kbps_deltas_.Destroy();
  _impl_.link_capacity_upper_kbps_deltas_.Destroy();
}

void RemoteEstimates::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoteEstimates::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.RemoteEstimates)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.timestamp_ms_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.link_capacity_lower_kbps_deltas_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.link_capacity_upper_kbps_deltas_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&_impl_.timestamp_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.number_of_deltas_) -
        reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.number_of_deltas_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RemoteEstimates::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 link_capacity_lower_kbps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_link_capacity_lower_kbps(&has_bits);
          _impl_.link_capacity_lower_kbps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 link_capacity_upper_kbps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_link_capacity_upper_kbps(&has_bits);
          _impl_.link_capacity_upper_kbps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 number_of_deltas = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_number_of_deltas(&has_bits);
          _impl_.number_of_deltas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes timestamp_ms_deltas = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_timestamp_ms_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes link_capacity_lower_kbps_deltas = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_link_capacity_lower_kbps_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes link_capacity_upper_kbps_deltas = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_link_capacity_upper_kbps_deltas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RemoteEstimates::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog2.RemoteEstimates)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_timestamp_ms(), target);
  }

  // optional uint32 link_capacity_lower_kbps = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_link_capacity_lower_kbps(), target);
  }

  // optional uint32 link_capacity_upper_kbps = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_link_capacity_upper_kbps(), target);
  }

  // optional uint32 number_of_deltas = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_number_of_deltas(), target);
  }

  // optional bytes timestamp_ms_deltas = 101;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_timestamp_ms_deltas();
    target = stream->WriteBytesMaybeAliased(101, _s, target);
  }

  // optional bytes link_capacity_lower_kbps_deltas = 102;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_link_capacity_lower_kbps_deltas();
    target = stream->WriteBytesMaybeAliased(102, _s, target);
  }

  // optional bytes link_capacity_upper_kbps_deltas = 103;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_link_capacity_upper_kbps_deltas();
    target = stream->WriteBytesMaybeAliased(103, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog2.RemoteEstimates)
  return target;
}

::size_t RemoteEstimates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.RemoteEstimates)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes timestamp_ms_deltas = 101;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_timestamp_ms_deltas());
    }

    // optional bytes link_capacity_lower_kbps_deltas = 102;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_link_capacity_lower_kbps_deltas());
    }

    // optional bytes link_capacity_upper_kbps_deltas = 103;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_link_capacity_upper_kbps_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp_ms());
    }

    // optional uint32 link_capacity_lower_kbps = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_link_capacity_lower_kbps());
    }

    // optional uint32 link_capacity_upper_kbps = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_link_capacity_upper_kbps());
    }

    // optional uint32 number_of_deltas = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_number_of_deltas());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteEstimates::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RemoteEstimates*>(
      &from));
}

void RemoteEstimates::MergeFrom(const RemoteEstimates& from) {
  RemoteEstimates* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.RemoteEstimates)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_timestamp_ms_deltas(from._internal_timestamp_ms_deltas());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_link_capacity_lower_kbps_deltas(from._internal_link_capacity_lower_kbps_deltas());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_link_capacity_upper_kbps_deltas(from._internal_link_capacity_upper_kbps_deltas());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.timestamp_ms_ = from._impl_.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.link_capacity_lower_kbps_ = from._impl_.link_capacity_lower_kbps_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.link_capacity_upper_kbps_ = from._impl_.link_capacity_upper_kbps_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.number_of_deltas_ = from._impl_.number_of_deltas_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RemoteEstimates::CopyFrom(const RemoteEstimates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.RemoteEstimates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteEstimates::IsInitialized() const {
  return true;
}

void RemoteEstimates::InternalSwap(RemoteEstimates* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_ms_deltas_, lhs_arena,
                                       &other->_impl_.timestamp_ms_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.link_capacity_lower_kbps_deltas_, lhs_arena,
                                       &other->_impl_.link_capacity_lower_kbps_deltas_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.link_capacity_upper_kbps_deltas_, lhs_arena,
                                       &other->_impl_.link_capacity_upper_kbps_deltas_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoteEstimates, _impl_.number_of_deltas_)
      + sizeof(RemoteEstimates::_impl_.number_of_deltas_)
      - PROTOBUF_FIELD_OFFSET(RemoteEstimates, _impl_.timestamp_ms_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_ms_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_ms_));
}

std::string RemoteEstimates::GetTypeName() const {
  return "webrtc.rtclog2.RemoteEstimates";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace rtclog2
}  // namespace webrtc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::EventStream*
Arena::CreateMaybeMessage< ::webrtc::rtclog2::EventStream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::rtclog2::EventStream >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::Event*
Arena::CreateMaybeMessage< ::webrtc::rtclog2::Event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::rtclog2::Event >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::GenericPacketReceived*
Arena::CreateMaybeMessage< ::webrtc::rtclog2::GenericPacketReceived >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::rtclog2::GenericPacketReceived >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::GenericPacketSent*
Arena::CreateMaybeMessage< ::webrtc::rtclog2::GenericPacketSent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::rtclog2::GenericPacketSent >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::GenericAckReceived*
Arena::CreateMaybeMessage< ::webrtc::rtclog2::GenericAckReceived >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::rtclog2::GenericAckReceived >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::DependencyDescriptorsWireInfo*
Arena::CreateMaybeMessage< ::webrtc::rtclog2::DependencyDescriptorsWireInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::rtclog2::DependencyDescriptorsWireInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::IncomingRtpPackets*
Arena::CreateMaybeMessage< ::webrtc::rtclog2::IncomingRtpPackets >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::rtclog2::IncomingRtpPackets >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::OutgoingRtpPackets*
Arena::CreateMaybeMessage< ::webrtc::rtclog2::OutgoingRtpPackets >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::rtclog2::OutgoingRtpPackets >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::IncomingRtcpPackets*
Arena::CreateMaybeMessage< ::webrtc::rtclog2::IncomingRtcpPackets >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::rtclog2::IncomingRtcpPackets >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::OutgoingRtcpPackets*
Arena::CreateMaybeMessage< ::webrtc::rtclog2::OutgoingRtcpPackets >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::rtclog2::OutgoingRtcpPackets >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::AudioPlayoutEvents*
Arena::CreateMaybeMessage< ::webrtc::rtclog2::AudioPlayoutEvents >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::rtclog2::AudioPlayoutEvents >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::NetEqSetMinimumDelay*
Arena::CreateMaybeMessage< ::webrtc::rtclog2::NetEqSetMinimumDelay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::rtclog2::NetEqSetMinimumDelay >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::FrameDecodedEvents*
Arena::CreateMaybeMessage< ::webrtc::rtclog2::FrameDecodedEvents >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::rtclog2::FrameDecodedEvents >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::BeginLogEvent*
Arena::CreateMaybeMessage< ::webrtc::rtclog2::BeginLogEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::rtclog2::BeginLogEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::EndLogEvent*
Arena::CreateMaybeMessage< ::webrtc::rtclog2::EndLogEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::rtclog2::EndLogEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::LossBasedBweUpdates*
Arena::CreateMaybeMessage< ::webrtc::rtclog2::LossBasedBweUpdates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::rtclog2::LossBasedBweUpdates >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::DelayBasedBweUpdates*
Arena::CreateMaybeMessage< ::webrtc::rtclog2::DelayBasedBweUpdates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::rtclog2::DelayBasedBweUpdates >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::RtpHeaderExtensionConfig*
Arena::CreateMaybeMessage< ::webrtc::rtclog2::RtpHeaderExtensionConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::rtclog2::RtpHeaderExtensionConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::VideoRecvStreamConfig*
Arena::CreateMaybeMessage< ::webrtc::rtclog2::VideoRecvStreamConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::rtclog2::VideoRecvStreamConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::VideoSendStreamConfig*
Arena::CreateMaybeMessage< ::webrtc::rtclog2::VideoSendStreamConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::rtclog2::VideoSendStreamConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::AudioRecvStreamConfig*
Arena::CreateMaybeMessage< ::webrtc::rtclog2::AudioRecvStreamConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::rtclog2::AudioRecvStreamConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::AudioSendStreamConfig*
Arena::CreateMaybeMessage< ::webrtc::rtclog2::AudioSendStreamConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::rtclog2::AudioSendStreamConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::AudioNetworkAdaptations*
Arena::CreateMaybeMessage< ::webrtc::rtclog2::AudioNetworkAdaptations >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::rtclog2::AudioNetworkAdaptations >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::BweProbeCluster*
Arena::CreateMaybeMessage< ::webrtc::rtclog2::BweProbeCluster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::rtclog2::BweProbeCluster >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::BweProbeResultSuccess*
Arena::CreateMaybeMessage< ::webrtc::rtclog2::BweProbeResultSuccess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::rtclog2::BweProbeResultSuccess >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::BweProbeResultFailure*
Arena::CreateMaybeMessage< ::webrtc::rtclog2::BweProbeResultFailure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::rtclog2::BweProbeResultFailure >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::AlrState*
Arena::CreateMaybeMessage< ::webrtc::rtclog2::AlrState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::rtclog2::AlrState >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::IceCandidatePairConfig*
Arena::CreateMaybeMessage< ::webrtc::rtclog2::IceCandidatePairConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::rtclog2::IceCandidatePairConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::IceCandidatePairEvent*
Arena::CreateMaybeMessage< ::webrtc::rtclog2::IceCandidatePairEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::rtclog2::IceCandidatePairEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::DtlsTransportStateEvent*
Arena::CreateMaybeMessage< ::webrtc::rtclog2::DtlsTransportStateEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::rtclog2::DtlsTransportStateEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::DtlsWritableState*
Arena::CreateMaybeMessage< ::webrtc::rtclog2::DtlsWritableState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::rtclog2::DtlsWritableState >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::RouteChange*
Arena::CreateMaybeMessage< ::webrtc::rtclog2::RouteChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::rtclog2::RouteChange >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::rtclog2::RemoteEstimates*
Arena::CreateMaybeMessage< ::webrtc::rtclog2::RemoteEstimates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::rtclog2::RemoteEstimates >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
