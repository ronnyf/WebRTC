// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rtc_event_log.proto

#include "rtc_event_log.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace webrtc {
namespace rtclog {

inline constexpr RtxConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        rtx_ssrc_{0u},
        rtx_payload_type_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RtxConfig::RtxConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RtxConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtxConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtxConfigDefaultTypeInternal() {}
  union {
    RtxConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtxConfigDefaultTypeInternal _RtxConfig_default_instance_;

inline constexpr RtpPacket::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        incoming_{false},
        type_{static_cast< ::webrtc::rtclog::MediaType >(0)},
        packet_length_{0u},
        probe_cluster_id_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RtpPacket::RtpPacket(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RtpPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtpPacketDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtpPacketDefaultTypeInternal() {}
  union {
    RtpPacket _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtpPacketDefaultTypeInternal _RtpPacket_default_instance_;

inline constexpr RtpHeaderExtension::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        id_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RtpHeaderExtension::RtpHeaderExtension(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RtpHeaderExtensionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtpHeaderExtensionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtpHeaderExtensionDefaultTypeInternal() {}
  union {
    RtpHeaderExtension _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtpHeaderExtensionDefaultTypeInternal _RtpHeaderExtension_default_instance_;

inline constexpr RtcpPacket::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        packet_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        incoming_{false},
        type_{static_cast< ::webrtc::rtclog::MediaType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR RtcpPacket::RtcpPacket(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RtcpPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtcpPacketDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtcpPacketDefaultTypeInternal() {}
  union {
    RtcpPacket _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtcpPacketDefaultTypeInternal _RtcpPacket_default_instance_;

inline constexpr RemoteEstimate::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        link_capacity_lower_kbps_{0u},
        link_capacity_upper_kbps_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR RemoteEstimate::RemoteEstimate(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RemoteEstimateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoteEstimateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoteEstimateDefaultTypeInternal() {}
  union {
    RemoteEstimate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoteEstimateDefaultTypeInternal _RemoteEstimate_default_instance_;

inline constexpr LossBasedBweUpdate::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        bitrate_bps_{0},
        fraction_loss_{0u},
        total_packets_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LossBasedBweUpdate::LossBasedBweUpdate(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LossBasedBweUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LossBasedBweUpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LossBasedBweUpdateDefaultTypeInternal() {}
  union {
    LossBasedBweUpdate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LossBasedBweUpdateDefaultTypeInternal _LossBasedBweUpdate_default_instance_;

inline constexpr IceCandidatePairEvent::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        event_type_{static_cast< ::webrtc::rtclog::IceCandidatePairEvent_IceCandidatePairEventType >(0)},
        candidate_pair_id_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR IceCandidatePairEvent::IceCandidatePairEvent(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct IceCandidatePairEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IceCandidatePairEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IceCandidatePairEventDefaultTypeInternal() {}
  union {
    IceCandidatePairEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IceCandidatePairEventDefaultTypeInternal _IceCandidatePairEvent_default_instance_;

inline constexpr IceCandidatePairConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        config_type_{static_cast< ::webrtc::rtclog::IceCandidatePairConfig_IceCandidatePairConfigType >(0)},
        candidate_pair_id_{0u},
        local_candidate_type_{static_cast< ::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType >(0)},
        local_relay_protocol_{static_cast< ::webrtc::rtclog::IceCandidatePairConfig_Protocol >(0)},
        local_network_type_{static_cast< ::webrtc::rtclog::IceCandidatePairConfig_NetworkType >(0)},
        local_address_family_{static_cast< ::webrtc::rtclog::IceCandidatePairConfig_AddressFamily >(0)},
        remote_candidate_type_{static_cast< ::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType >(0)},
        remote_address_family_{static_cast< ::webrtc::rtclog::IceCandidatePairConfig_AddressFamily >(0)},
        candidate_pair_protocol_{static_cast< ::webrtc::rtclog::IceCandidatePairConfig_Protocol >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR IceCandidatePairConfig::IceCandidatePairConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct IceCandidatePairConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IceCandidatePairConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IceCandidatePairConfigDefaultTypeInternal() {}
  union {
    IceCandidatePairConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IceCandidatePairConfigDefaultTypeInternal _IceCandidatePairConfig_default_instance_;

inline constexpr EncoderConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        payload_type_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EncoderConfig::EncoderConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EncoderConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EncoderConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EncoderConfigDefaultTypeInternal() {}
  union {
    EncoderConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EncoderConfigDefaultTypeInternal _EncoderConfig_default_instance_;

inline constexpr DelayBasedBweUpdate::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        bitrate_bps_{0},
        detector_state_{static_cast< ::webrtc::rtclog::DelayBasedBweUpdate_DetectorState >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR DelayBasedBweUpdate::DelayBasedBweUpdate(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DelayBasedBweUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DelayBasedBweUpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DelayBasedBweUpdateDefaultTypeInternal() {}
  union {
    DelayBasedBweUpdate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DelayBasedBweUpdateDefaultTypeInternal _DelayBasedBweUpdate_default_instance_;

inline constexpr DecoderConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        payload_type_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DecoderConfig::DecoderConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DecoderConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DecoderConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DecoderConfigDefaultTypeInternal() {}
  union {
    DecoderConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DecoderConfigDefaultTypeInternal _DecoderConfig_default_instance_;

inline constexpr BweProbeResult::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        id_{0},
        result_{static_cast< ::webrtc::rtclog::BweProbeResult_ResultType >(0)},
        bitrate_bps_{0} {}

template <typename>
PROTOBUF_CONSTEXPR BweProbeResult::BweProbeResult(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct BweProbeResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BweProbeResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BweProbeResultDefaultTypeInternal() {}
  union {
    BweProbeResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BweProbeResultDefaultTypeInternal _BweProbeResult_default_instance_;

inline constexpr BweProbeCluster::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        id_{0},
        bitrate_bps_{0},
        min_packets_{0u},
        min_bytes_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR BweProbeCluster::BweProbeCluster(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct BweProbeClusterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BweProbeClusterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BweProbeClusterDefaultTypeInternal() {}
  union {
    BweProbeCluster _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BweProbeClusterDefaultTypeInternal _BweProbeCluster_default_instance_;

inline constexpr AudioPlayoutEvent::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        local_ssrc_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR AudioPlayoutEvent::AudioPlayoutEvent(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AudioPlayoutEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioPlayoutEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioPlayoutEventDefaultTypeInternal() {}
  union {
    AudioPlayoutEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioPlayoutEventDefaultTypeInternal _AudioPlayoutEvent_default_instance_;

inline constexpr AudioNetworkAdaptation::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        bitrate_bps_{0},
        frame_length_ms_{0},
        uplink_packet_loss_fraction_{0},
        enable_fec_{false},
        enable_dtx_{false},
        num_channels_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR AudioNetworkAdaptation::AudioNetworkAdaptation(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AudioNetworkAdaptationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioNetworkAdaptationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioNetworkAdaptationDefaultTypeInternal() {}
  union {
    AudioNetworkAdaptation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioNetworkAdaptationDefaultTypeInternal _AudioNetworkAdaptation_default_instance_;

inline constexpr AlrState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        in_alr_{false} {}

template <typename>
PROTOBUF_CONSTEXPR AlrState::AlrState(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AlrStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AlrStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AlrStateDefaultTypeInternal() {}
  union {
    AlrState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AlrStateDefaultTypeInternal _AlrState_default_instance_;

inline constexpr VideoSendConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        ssrcs_{},
        header_extensions_{},
        rtx_ssrcs_{},
        encoder_{nullptr},
        rtx_payload_type_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VideoSendConfig::VideoSendConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct VideoSendConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoSendConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoSendConfigDefaultTypeInternal() {}
  union {
    VideoSendConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoSendConfigDefaultTypeInternal _VideoSendConfig_default_instance_;

inline constexpr RtxMap::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        config_{nullptr},
        payload_type_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RtxMap::RtxMap(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RtxMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtxMapDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtxMapDefaultTypeInternal() {}
  union {
    RtxMap _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtxMapDefaultTypeInternal _RtxMap_default_instance_;

inline constexpr AudioSendConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_extensions_{},
        ssrc_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR AudioSendConfig::AudioSendConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AudioSendConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioSendConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioSendConfigDefaultTypeInternal() {}
  union {
    AudioSendConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioSendConfigDefaultTypeInternal _AudioSendConfig_default_instance_;

inline constexpr AudioReceiveConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_extensions_{},
        remote_ssrc_{0u},
        local_ssrc_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR AudioReceiveConfig::AudioReceiveConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AudioReceiveConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioReceiveConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioReceiveConfigDefaultTypeInternal() {}
  union {
    AudioReceiveConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioReceiveConfigDefaultTypeInternal _AudioReceiveConfig_default_instance_;

inline constexpr VideoReceiveConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        rtx_map_{},
        header_extensions_{},
        decoders_{},
        remote_ssrc_{0u},
        local_ssrc_{0u},
        remb_{false},
        rtcp_mode_{static_cast< ::webrtc::rtclog::VideoReceiveConfig_RtcpMode >(1)} {}

template <typename>
PROTOBUF_CONSTEXPR VideoReceiveConfig::VideoReceiveConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct VideoReceiveConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoReceiveConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoReceiveConfigDefaultTypeInternal() {}
  union {
    VideoReceiveConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoReceiveConfigDefaultTypeInternal _VideoReceiveConfig_default_instance_;

inline constexpr Event::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        timestamp_us_{::int64_t{0}},
        type_{static_cast< ::webrtc::rtclog::Event_EventType >(0)},
        subtype_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Event::Event(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventDefaultTypeInternal() {}
  union {
    Event _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventDefaultTypeInternal _Event_default_instance_;

inline constexpr EventStream::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : stream_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EventStream::EventStream(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EventStreamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventStreamDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventStreamDefaultTypeInternal() {}
  union {
    EventStream _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventStreamDefaultTypeInternal _EventStream_default_instance_;
}  // namespace rtclog
}  // namespace webrtc
namespace webrtc {
namespace rtclog {
PROTOBUF_CONSTINIT const uint32_t Event_EventType_internal_data_[] = {
    786432u, 32u, 2032u, };
bool Event_EventType_IsValid(int value) {
  return 0 <= value && value <= 22 && ((8327167u >> value) & 1) != 0;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    Event_EventType_strings[19] = {};

static const char Event_EventType_names[] = {
    "ALR_STATE_EVENT"
    "AUDIO_NETWORK_ADAPTATION_EVENT"
    "AUDIO_PLAYOUT_EVENT"
    "AUDIO_RECEIVER_CONFIG_EVENT"
    "AUDIO_SENDER_CONFIG_EVENT"
    "BWE_PROBE_CLUSTER_CREATED_EVENT"
    "BWE_PROBE_RESULT_EVENT"
    "DELAY_BASED_BWE_UPDATE"
    "ICE_CANDIDATE_PAIR_CONFIG"
    "ICE_CANDIDATE_PAIR_EVENT"
    "LOG_END"
    "LOG_START"
    "LOSS_BASED_BWE_UPDATE"
    "REMOTE_ESTIMATE"
    "RTCP_EVENT"
    "RTP_EVENT"
    "UNKNOWN_EVENT"
    "VIDEO_RECEIVER_CONFIG_EVENT"
    "VIDEO_SENDER_CONFIG_EVENT"
};

static const ::google::protobuf::internal::EnumEntry Event_EventType_entries[] =
    {
        {{&Event_EventType_names[0], 15}, 19},
        {{&Event_EventType_names[15], 30}, 16},
        {{&Event_EventType_names[45], 19}, 5},
        {{&Event_EventType_names[64], 27}, 10},
        {{&Event_EventType_names[91], 25}, 11},
        {{&Event_EventType_names[116], 31}, 17},
        {{&Event_EventType_names[147], 22}, 18},
        {{&Event_EventType_names[169], 22}, 7},
        {{&Event_EventType_names[191], 25}, 20},
        {{&Event_EventType_names[216], 24}, 21},
        {{&Event_EventType_names[240], 7}, 2},
        {{&Event_EventType_names[247], 9}, 1},
        {{&Event_EventType_names[256], 21}, 6},
        {{&Event_EventType_names[277], 15}, 22},
        {{&Event_EventType_names[292], 10}, 4},
        {{&Event_EventType_names[302], 9}, 3},
        {{&Event_EventType_names[311], 13}, 0},
        {{&Event_EventType_names[324], 27}, 8},
        {{&Event_EventType_names[351], 25}, 9},
};

static const int Event_EventType_entries_by_number[] = {
    16,  // 0 -> UNKNOWN_EVENT
    11,  // 1 -> LOG_START
    10,  // 2 -> LOG_END
    15,  // 3 -> RTP_EVENT
    14,  // 4 -> RTCP_EVENT
    2,  // 5 -> AUDIO_PLAYOUT_EVENT
    12,  // 6 -> LOSS_BASED_BWE_UPDATE
    7,  // 7 -> DELAY_BASED_BWE_UPDATE
    17,  // 8 -> VIDEO_RECEIVER_CONFIG_EVENT
    18,  // 9 -> VIDEO_SENDER_CONFIG_EVENT
    3,  // 10 -> AUDIO_RECEIVER_CONFIG_EVENT
    4,  // 11 -> AUDIO_SENDER_CONFIG_EVENT
    1,  // 16 -> AUDIO_NETWORK_ADAPTATION_EVENT
    5,  // 17 -> BWE_PROBE_CLUSTER_CREATED_EVENT
    6,  // 18 -> BWE_PROBE_RESULT_EVENT
    0,  // 19 -> ALR_STATE_EVENT
    8,  // 20 -> ICE_CANDIDATE_PAIR_CONFIG
    9,  // 21 -> ICE_CANDIDATE_PAIR_EVENT
    13,  // 22 -> REMOTE_ESTIMATE
};

const std::string& Event_EventType_Name(Event_EventType value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          Event_EventType_entries, Event_EventType_entries_by_number,
          19, Event_EventType_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      Event_EventType_entries, Event_EventType_entries_by_number, 19,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : Event_EventType_strings[idx].get();
}

bool Event_EventType_Parse(absl::string_view name, Event_EventType* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      Event_EventType_entries, 19, name, &int_value);
  if (success) {
    *value = static_cast<Event_EventType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Event_EventType Event::UNKNOWN_EVENT;
constexpr Event_EventType Event::LOG_START;
constexpr Event_EventType Event::LOG_END;
constexpr Event_EventType Event::RTP_EVENT;
constexpr Event_EventType Event::RTCP_EVENT;
constexpr Event_EventType Event::AUDIO_PLAYOUT_EVENT;
constexpr Event_EventType Event::LOSS_BASED_BWE_UPDATE;
constexpr Event_EventType Event::DELAY_BASED_BWE_UPDATE;
constexpr Event_EventType Event::VIDEO_RECEIVER_CONFIG_EVENT;
constexpr Event_EventType Event::VIDEO_SENDER_CONFIG_EVENT;
constexpr Event_EventType Event::AUDIO_RECEIVER_CONFIG_EVENT;
constexpr Event_EventType Event::AUDIO_SENDER_CONFIG_EVENT;
constexpr Event_EventType Event::AUDIO_NETWORK_ADAPTATION_EVENT;
constexpr Event_EventType Event::BWE_PROBE_CLUSTER_CREATED_EVENT;
constexpr Event_EventType Event::BWE_PROBE_RESULT_EVENT;
constexpr Event_EventType Event::ALR_STATE_EVENT;
constexpr Event_EventType Event::ICE_CANDIDATE_PAIR_CONFIG;
constexpr Event_EventType Event::ICE_CANDIDATE_PAIR_EVENT;
constexpr Event_EventType Event::REMOTE_ESTIMATE;
constexpr Event_EventType Event::EventType_MIN;
constexpr Event_EventType Event::EventType_MAX;
constexpr int Event::EventType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
PROTOBUF_CONSTINIT const uint32_t DelayBasedBweUpdate_DetectorState_internal_data_[] = {
    196608u, 0u, };
bool DelayBasedBweUpdate_DetectorState_IsValid(int value) {
  return 0 <= value && value <= 2;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    DelayBasedBweUpdate_DetectorState_strings[3] = {};

static const char DelayBasedBweUpdate_DetectorState_names[] = {
    "BWE_NORMAL"
    "BWE_OVERUSING"
    "BWE_UNDERUSING"
};

static const ::google::protobuf::internal::EnumEntry DelayBasedBweUpdate_DetectorState_entries[] =
    {
        {{&DelayBasedBweUpdate_DetectorState_names[0], 10}, 0},
        {{&DelayBasedBweUpdate_DetectorState_names[10], 13}, 2},
        {{&DelayBasedBweUpdate_DetectorState_names[23], 14}, 1},
};

static const int DelayBasedBweUpdate_DetectorState_entries_by_number[] = {
    0,  // 0 -> BWE_NORMAL
    2,  // 1 -> BWE_UNDERUSING
    1,  // 2 -> BWE_OVERUSING
};

const std::string& DelayBasedBweUpdate_DetectorState_Name(DelayBasedBweUpdate_DetectorState value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          DelayBasedBweUpdate_DetectorState_entries, DelayBasedBweUpdate_DetectorState_entries_by_number,
          3, DelayBasedBweUpdate_DetectorState_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      DelayBasedBweUpdate_DetectorState_entries, DelayBasedBweUpdate_DetectorState_entries_by_number, 3,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : DelayBasedBweUpdate_DetectorState_strings[idx].get();
}

bool DelayBasedBweUpdate_DetectorState_Parse(absl::string_view name, DelayBasedBweUpdate_DetectorState* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      DelayBasedBweUpdate_DetectorState_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<DelayBasedBweUpdate_DetectorState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr DelayBasedBweUpdate_DetectorState DelayBasedBweUpdate::BWE_NORMAL;
constexpr DelayBasedBweUpdate_DetectorState DelayBasedBweUpdate::BWE_UNDERUSING;
constexpr DelayBasedBweUpdate_DetectorState DelayBasedBweUpdate::BWE_OVERUSING;
constexpr DelayBasedBweUpdate_DetectorState DelayBasedBweUpdate::DetectorState_MIN;
constexpr DelayBasedBweUpdate_DetectorState DelayBasedBweUpdate::DetectorState_MAX;
constexpr int DelayBasedBweUpdate::DetectorState_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
PROTOBUF_CONSTINIT const uint32_t VideoReceiveConfig_RtcpMode_internal_data_[] = {
    131073u, 0u, };
bool VideoReceiveConfig_RtcpMode_IsValid(int value) {
  return 1 <= value && value <= 2;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    VideoReceiveConfig_RtcpMode_strings[2] = {};

static const char VideoReceiveConfig_RtcpMode_names[] = {
    "RTCP_COMPOUND"
    "RTCP_REDUCEDSIZE"
};

static const ::google::protobuf::internal::EnumEntry VideoReceiveConfig_RtcpMode_entries[] =
    {
        {{&VideoReceiveConfig_RtcpMode_names[0], 13}, 1},
        {{&VideoReceiveConfig_RtcpMode_names[13], 16}, 2},
};

static const int VideoReceiveConfig_RtcpMode_entries_by_number[] = {
    0,  // 1 -> RTCP_COMPOUND
    1,  // 2 -> RTCP_REDUCEDSIZE
};

const std::string& VideoReceiveConfig_RtcpMode_Name(VideoReceiveConfig_RtcpMode value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          VideoReceiveConfig_RtcpMode_entries, VideoReceiveConfig_RtcpMode_entries_by_number,
          2, VideoReceiveConfig_RtcpMode_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      VideoReceiveConfig_RtcpMode_entries, VideoReceiveConfig_RtcpMode_entries_by_number, 2,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : VideoReceiveConfig_RtcpMode_strings[idx].get();
}

bool VideoReceiveConfig_RtcpMode_Parse(absl::string_view name, VideoReceiveConfig_RtcpMode* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      VideoReceiveConfig_RtcpMode_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<VideoReceiveConfig_RtcpMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr VideoReceiveConfig_RtcpMode VideoReceiveConfig::RTCP_COMPOUND;
constexpr VideoReceiveConfig_RtcpMode VideoReceiveConfig::RTCP_REDUCEDSIZE;
constexpr VideoReceiveConfig_RtcpMode VideoReceiveConfig::RtcpMode_MIN;
constexpr VideoReceiveConfig_RtcpMode VideoReceiveConfig::RtcpMode_MAX;
constexpr int VideoReceiveConfig::RtcpMode_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
PROTOBUF_CONSTINIT const uint32_t BweProbeResult_ResultType_internal_data_[] = {
    262144u, 0u, };
bool BweProbeResult_ResultType_IsValid(int value) {
  return 0 <= value && value <= 3;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    BweProbeResult_ResultType_strings[4] = {};

static const char BweProbeResult_ResultType_names[] = {
    "INVALID_SEND_RECEIVE_INTERVAL"
    "INVALID_SEND_RECEIVE_RATIO"
    "SUCCESS"
    "TIMEOUT"
};

static const ::google::protobuf::internal::EnumEntry BweProbeResult_ResultType_entries[] =
    {
        {{&BweProbeResult_ResultType_names[0], 29}, 1},
        {{&BweProbeResult_ResultType_names[29], 26}, 2},
        {{&BweProbeResult_ResultType_names[55], 7}, 0},
        {{&BweProbeResult_ResultType_names[62], 7}, 3},
};

static const int BweProbeResult_ResultType_entries_by_number[] = {
    2,  // 0 -> SUCCESS
    0,  // 1 -> INVALID_SEND_RECEIVE_INTERVAL
    1,  // 2 -> INVALID_SEND_RECEIVE_RATIO
    3,  // 3 -> TIMEOUT
};

const std::string& BweProbeResult_ResultType_Name(BweProbeResult_ResultType value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          BweProbeResult_ResultType_entries, BweProbeResult_ResultType_entries_by_number,
          4, BweProbeResult_ResultType_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      BweProbeResult_ResultType_entries, BweProbeResult_ResultType_entries_by_number, 4,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : BweProbeResult_ResultType_strings[idx].get();
}

bool BweProbeResult_ResultType_Parse(absl::string_view name, BweProbeResult_ResultType* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      BweProbeResult_ResultType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<BweProbeResult_ResultType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr BweProbeResult_ResultType BweProbeResult::SUCCESS;
constexpr BweProbeResult_ResultType BweProbeResult::INVALID_SEND_RECEIVE_INTERVAL;
constexpr BweProbeResult_ResultType BweProbeResult::INVALID_SEND_RECEIVE_RATIO;
constexpr BweProbeResult_ResultType BweProbeResult::TIMEOUT;
constexpr BweProbeResult_ResultType BweProbeResult::ResultType_MIN;
constexpr BweProbeResult_ResultType BweProbeResult::ResultType_MAX;
constexpr int BweProbeResult::ResultType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
PROTOBUF_CONSTINIT const uint32_t IceCandidatePairConfig_IceCandidatePairConfigType_internal_data_[] = {
    262144u, 0u, };
bool IceCandidatePairConfig_IceCandidatePairConfigType_IsValid(int value) {
  return 0 <= value && value <= 3;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    IceCandidatePairConfig_IceCandidatePairConfigType_strings[4] = {};

static const char IceCandidatePairConfig_IceCandidatePairConfigType_names[] = {
    "ADDED"
    "DESTROYED"
    "SELECTED"
    "UPDATED"
};

static const ::google::protobuf::internal::EnumEntry IceCandidatePairConfig_IceCandidatePairConfigType_entries[] =
    {
        {{&IceCandidatePairConfig_IceCandidatePairConfigType_names[0], 5}, 0},
        {{&IceCandidatePairConfig_IceCandidatePairConfigType_names[5], 9}, 2},
        {{&IceCandidatePairConfig_IceCandidatePairConfigType_names[14], 8}, 3},
        {{&IceCandidatePairConfig_IceCandidatePairConfigType_names[22], 7}, 1},
};

static const int IceCandidatePairConfig_IceCandidatePairConfigType_entries_by_number[] = {
    0,  // 0 -> ADDED
    3,  // 1 -> UPDATED
    1,  // 2 -> DESTROYED
    2,  // 3 -> SELECTED
};

const std::string& IceCandidatePairConfig_IceCandidatePairConfigType_Name(IceCandidatePairConfig_IceCandidatePairConfigType value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          IceCandidatePairConfig_IceCandidatePairConfigType_entries, IceCandidatePairConfig_IceCandidatePairConfigType_entries_by_number,
          4, IceCandidatePairConfig_IceCandidatePairConfigType_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      IceCandidatePairConfig_IceCandidatePairConfigType_entries, IceCandidatePairConfig_IceCandidatePairConfigType_entries_by_number, 4,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : IceCandidatePairConfig_IceCandidatePairConfigType_strings[idx].get();
}

bool IceCandidatePairConfig_IceCandidatePairConfigType_Parse(absl::string_view name, IceCandidatePairConfig_IceCandidatePairConfigType* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      IceCandidatePairConfig_IceCandidatePairConfigType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<IceCandidatePairConfig_IceCandidatePairConfigType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig::ADDED;
constexpr IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig::UPDATED;
constexpr IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig::DESTROYED;
constexpr IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig::SELECTED;
constexpr IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig::IceCandidatePairConfigType_MIN;
constexpr IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig::IceCandidatePairConfigType_MAX;
constexpr int IceCandidatePairConfig::IceCandidatePairConfigType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
PROTOBUF_CONSTINIT const uint32_t IceCandidatePairConfig_IceCandidateType_internal_data_[] = {
    327680u, 0u, };
bool IceCandidatePairConfig_IceCandidateType_IsValid(int value) {
  return 0 <= value && value <= 4;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    IceCandidatePairConfig_IceCandidateType_strings[5] = {};

static const char IceCandidatePairConfig_IceCandidateType_names[] = {
    "LOCAL"
    "PRFLX"
    "RELAY"
    "STUN"
    "UNKNOWN_CANDIDATE_TYPE"
};

static const ::google::protobuf::internal::EnumEntry IceCandidatePairConfig_IceCandidateType_entries[] =
    {
        {{&IceCandidatePairConfig_IceCandidateType_names[0], 5}, 0},
        {{&IceCandidatePairConfig_IceCandidateType_names[5], 5}, 2},
        {{&IceCandidatePairConfig_IceCandidateType_names[10], 5}, 3},
        {{&IceCandidatePairConfig_IceCandidateType_names[15], 4}, 1},
        {{&IceCandidatePairConfig_IceCandidateType_names[19], 22}, 4},
};

static const int IceCandidatePairConfig_IceCandidateType_entries_by_number[] = {
    0,  // 0 -> LOCAL
    3,  // 1 -> STUN
    1,  // 2 -> PRFLX
    2,  // 3 -> RELAY
    4,  // 4 -> UNKNOWN_CANDIDATE_TYPE
};

const std::string& IceCandidatePairConfig_IceCandidateType_Name(IceCandidatePairConfig_IceCandidateType value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          IceCandidatePairConfig_IceCandidateType_entries, IceCandidatePairConfig_IceCandidateType_entries_by_number,
          5, IceCandidatePairConfig_IceCandidateType_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      IceCandidatePairConfig_IceCandidateType_entries, IceCandidatePairConfig_IceCandidateType_entries_by_number, 5,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : IceCandidatePairConfig_IceCandidateType_strings[idx].get();
}

bool IceCandidatePairConfig_IceCandidateType_Parse(absl::string_view name, IceCandidatePairConfig_IceCandidateType* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      IceCandidatePairConfig_IceCandidateType_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<IceCandidatePairConfig_IceCandidateType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::LOCAL;
constexpr IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::STUN;
constexpr IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::PRFLX;
constexpr IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::RELAY;
constexpr IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::UNKNOWN_CANDIDATE_TYPE;
constexpr IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::IceCandidateType_MIN;
constexpr IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::IceCandidateType_MAX;
constexpr int IceCandidatePairConfig::IceCandidateType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
PROTOBUF_CONSTINIT const uint32_t IceCandidatePairConfig_Protocol_internal_data_[] = {
    327680u, 0u, };
bool IceCandidatePairConfig_Protocol_IsValid(int value) {
  return 0 <= value && value <= 4;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    IceCandidatePairConfig_Protocol_strings[5] = {};

static const char IceCandidatePairConfig_Protocol_names[] = {
    "SSLTCP"
    "TCP"
    "TLS"
    "UDP"
    "UNKNOWN_PROTOCOL"
};

static const ::google::protobuf::internal::EnumEntry IceCandidatePairConfig_Protocol_entries[] =
    {
        {{&IceCandidatePairConfig_Protocol_names[0], 6}, 2},
        {{&IceCandidatePairConfig_Protocol_names[6], 3}, 1},
        {{&IceCandidatePairConfig_Protocol_names[9], 3}, 3},
        {{&IceCandidatePairConfig_Protocol_names[12], 3}, 0},
        {{&IceCandidatePairConfig_Protocol_names[15], 16}, 4},
};

static const int IceCandidatePairConfig_Protocol_entries_by_number[] = {
    3,  // 0 -> UDP
    1,  // 1 -> TCP
    0,  // 2 -> SSLTCP
    2,  // 3 -> TLS
    4,  // 4 -> UNKNOWN_PROTOCOL
};

const std::string& IceCandidatePairConfig_Protocol_Name(IceCandidatePairConfig_Protocol value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          IceCandidatePairConfig_Protocol_entries, IceCandidatePairConfig_Protocol_entries_by_number,
          5, IceCandidatePairConfig_Protocol_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      IceCandidatePairConfig_Protocol_entries, IceCandidatePairConfig_Protocol_entries_by_number, 5,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : IceCandidatePairConfig_Protocol_strings[idx].get();
}

bool IceCandidatePairConfig_Protocol_Parse(absl::string_view name, IceCandidatePairConfig_Protocol* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      IceCandidatePairConfig_Protocol_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<IceCandidatePairConfig_Protocol>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr IceCandidatePairConfig_Protocol IceCandidatePairConfig::UDP;
constexpr IceCandidatePairConfig_Protocol IceCandidatePairConfig::TCP;
constexpr IceCandidatePairConfig_Protocol IceCandidatePairConfig::SSLTCP;
constexpr IceCandidatePairConfig_Protocol IceCandidatePairConfig::TLS;
constexpr IceCandidatePairConfig_Protocol IceCandidatePairConfig::UNKNOWN_PROTOCOL;
constexpr IceCandidatePairConfig_Protocol IceCandidatePairConfig::Protocol_MIN;
constexpr IceCandidatePairConfig_Protocol IceCandidatePairConfig::Protocol_MAX;
constexpr int IceCandidatePairConfig::Protocol_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
PROTOBUF_CONSTINIT const uint32_t IceCandidatePairConfig_AddressFamily_internal_data_[] = {
    196608u, 0u, };
bool IceCandidatePairConfig_AddressFamily_IsValid(int value) {
  return 0 <= value && value <= 2;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    IceCandidatePairConfig_AddressFamily_strings[3] = {};

static const char IceCandidatePairConfig_AddressFamily_names[] = {
    "IPV4"
    "IPV6"
    "UNKNOWN_ADDRESS_FAMILY"
};

static const ::google::protobuf::internal::EnumEntry IceCandidatePairConfig_AddressFamily_entries[] =
    {
        {{&IceCandidatePairConfig_AddressFamily_names[0], 4}, 0},
        {{&IceCandidatePairConfig_AddressFamily_names[4], 4}, 1},
        {{&IceCandidatePairConfig_AddressFamily_names[8], 22}, 2},
};

static const int IceCandidatePairConfig_AddressFamily_entries_by_number[] = {
    0,  // 0 -> IPV4
    1,  // 1 -> IPV6
    2,  // 2 -> UNKNOWN_ADDRESS_FAMILY
};

const std::string& IceCandidatePairConfig_AddressFamily_Name(IceCandidatePairConfig_AddressFamily value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          IceCandidatePairConfig_AddressFamily_entries, IceCandidatePairConfig_AddressFamily_entries_by_number,
          3, IceCandidatePairConfig_AddressFamily_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      IceCandidatePairConfig_AddressFamily_entries, IceCandidatePairConfig_AddressFamily_entries_by_number, 3,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : IceCandidatePairConfig_AddressFamily_strings[idx].get();
}

bool IceCandidatePairConfig_AddressFamily_Parse(absl::string_view name, IceCandidatePairConfig_AddressFamily* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      IceCandidatePairConfig_AddressFamily_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<IceCandidatePairConfig_AddressFamily>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr IceCandidatePairConfig_AddressFamily IceCandidatePairConfig::IPV4;
constexpr IceCandidatePairConfig_AddressFamily IceCandidatePairConfig::IPV6;
constexpr IceCandidatePairConfig_AddressFamily IceCandidatePairConfig::UNKNOWN_ADDRESS_FAMILY;
constexpr IceCandidatePairConfig_AddressFamily IceCandidatePairConfig::AddressFamily_MIN;
constexpr IceCandidatePairConfig_AddressFamily IceCandidatePairConfig::AddressFamily_MAX;
constexpr int IceCandidatePairConfig::AddressFamily_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
PROTOBUF_CONSTINIT const uint32_t IceCandidatePairConfig_NetworkType_internal_data_[] = {
    393216u, 0u, };
bool IceCandidatePairConfig_NetworkType_IsValid(int value) {
  return 0 <= value && value <= 5;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    IceCandidatePairConfig_NetworkType_strings[6] = {};

static const char IceCandidatePairConfig_NetworkType_names[] = {
    "CELLULAR"
    "ETHERNET"
    "LOOPBACK"
    "UNKNOWN_NETWORK_TYPE"
    "VPN"
    "WIFI"
};

static const ::google::protobuf::internal::EnumEntry IceCandidatePairConfig_NetworkType_entries[] =
    {
        {{&IceCandidatePairConfig_NetworkType_names[0], 8}, 4},
        {{&IceCandidatePairConfig_NetworkType_names[8], 8}, 0},
        {{&IceCandidatePairConfig_NetworkType_names[16], 8}, 1},
        {{&IceCandidatePairConfig_NetworkType_names[24], 20}, 5},
        {{&IceCandidatePairConfig_NetworkType_names[44], 3}, 3},
        {{&IceCandidatePairConfig_NetworkType_names[47], 4}, 2},
};

static const int IceCandidatePairConfig_NetworkType_entries_by_number[] = {
    1,  // 0 -> ETHERNET
    2,  // 1 -> LOOPBACK
    5,  // 2 -> WIFI
    4,  // 3 -> VPN
    0,  // 4 -> CELLULAR
    3,  // 5 -> UNKNOWN_NETWORK_TYPE
};

const std::string& IceCandidatePairConfig_NetworkType_Name(IceCandidatePairConfig_NetworkType value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          IceCandidatePairConfig_NetworkType_entries, IceCandidatePairConfig_NetworkType_entries_by_number,
          6, IceCandidatePairConfig_NetworkType_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      IceCandidatePairConfig_NetworkType_entries, IceCandidatePairConfig_NetworkType_entries_by_number, 6,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : IceCandidatePairConfig_NetworkType_strings[idx].get();
}

bool IceCandidatePairConfig_NetworkType_Parse(absl::string_view name, IceCandidatePairConfig_NetworkType* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      IceCandidatePairConfig_NetworkType_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<IceCandidatePairConfig_NetworkType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr IceCandidatePairConfig_NetworkType IceCandidatePairConfig::ETHERNET;
constexpr IceCandidatePairConfig_NetworkType IceCandidatePairConfig::LOOPBACK;
constexpr IceCandidatePairConfig_NetworkType IceCandidatePairConfig::WIFI;
constexpr IceCandidatePairConfig_NetworkType IceCandidatePairConfig::VPN;
constexpr IceCandidatePairConfig_NetworkType IceCandidatePairConfig::CELLULAR;
constexpr IceCandidatePairConfig_NetworkType IceCandidatePairConfig::UNKNOWN_NETWORK_TYPE;
constexpr IceCandidatePairConfig_NetworkType IceCandidatePairConfig::NetworkType_MIN;
constexpr IceCandidatePairConfig_NetworkType IceCandidatePairConfig::NetworkType_MAX;
constexpr int IceCandidatePairConfig::NetworkType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
PROTOBUF_CONSTINIT const uint32_t IceCandidatePairEvent_IceCandidatePairEventType_internal_data_[] = {
    262144u, 0u, };
bool IceCandidatePairEvent_IceCandidatePairEventType_IsValid(int value) {
  return 0 <= value && value <= 3;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    IceCandidatePairEvent_IceCandidatePairEventType_strings[4] = {};

static const char IceCandidatePairEvent_IceCandidatePairEventType_names[] = {
    "CHECK_RECEIVED"
    "CHECK_RESPONSE_RECEIVED"
    "CHECK_RESPONSE_SENT"
    "CHECK_SENT"
};

static const ::google::protobuf::internal::EnumEntry IceCandidatePairEvent_IceCandidatePairEventType_entries[] =
    {
        {{&IceCandidatePairEvent_IceCandidatePairEventType_names[0], 14}, 1},
        {{&IceCandidatePairEvent_IceCandidatePairEventType_names[14], 23}, 3},
        {{&IceCandidatePairEvent_IceCandidatePairEventType_names[37], 19}, 2},
        {{&IceCandidatePairEvent_IceCandidatePairEventType_names[56], 10}, 0},
};

static const int IceCandidatePairEvent_IceCandidatePairEventType_entries_by_number[] = {
    3,  // 0 -> CHECK_SENT
    0,  // 1 -> CHECK_RECEIVED
    2,  // 2 -> CHECK_RESPONSE_SENT
    1,  // 3 -> CHECK_RESPONSE_RECEIVED
};

const std::string& IceCandidatePairEvent_IceCandidatePairEventType_Name(IceCandidatePairEvent_IceCandidatePairEventType value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          IceCandidatePairEvent_IceCandidatePairEventType_entries, IceCandidatePairEvent_IceCandidatePairEventType_entries_by_number,
          4, IceCandidatePairEvent_IceCandidatePairEventType_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      IceCandidatePairEvent_IceCandidatePairEventType_entries, IceCandidatePairEvent_IceCandidatePairEventType_entries_by_number, 4,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : IceCandidatePairEvent_IceCandidatePairEventType_strings[idx].get();
}

bool IceCandidatePairEvent_IceCandidatePairEventType_Parse(absl::string_view name, IceCandidatePairEvent_IceCandidatePairEventType* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      IceCandidatePairEvent_IceCandidatePairEventType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<IceCandidatePairEvent_IceCandidatePairEventType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent::CHECK_SENT;
constexpr IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent::CHECK_RECEIVED;
constexpr IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent::CHECK_RESPONSE_SENT;
constexpr IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent::CHECK_RESPONSE_RECEIVED;
constexpr IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent::IceCandidatePairEventType_MIN;
constexpr IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent::IceCandidatePairEventType_MAX;
constexpr int IceCandidatePairEvent::IceCandidatePairEventType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
PROTOBUF_CONSTINIT const uint32_t MediaType_internal_data_[] = {
    262144u, 0u, };
bool MediaType_IsValid(int value) {
  return 0 <= value && value <= 3;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    MediaType_strings[4] = {};

static const char MediaType_names[] = {
    "ANY"
    "AUDIO"
    "DATA"
    "VIDEO"
};

static const ::google::protobuf::internal::EnumEntry MediaType_entries[] =
    {
        {{&MediaType_names[0], 3}, 0},
        {{&MediaType_names[3], 5}, 1},
        {{&MediaType_names[8], 4}, 3},
        {{&MediaType_names[12], 5}, 2},
};

static const int MediaType_entries_by_number[] = {
    0,  // 0 -> ANY
    1,  // 1 -> AUDIO
    3,  // 2 -> VIDEO
    2,  // 3 -> DATA
};

const std::string& MediaType_Name(MediaType value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          MediaType_entries, MediaType_entries_by_number,
          4, MediaType_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      MediaType_entries, MediaType_entries_by_number, 4,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : MediaType_strings[idx].get();
}

bool MediaType_Parse(absl::string_view name, MediaType* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      MediaType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<MediaType>(int_value);
  }
  return success;
}
// ===================================================================

class EventStream::_Internal {
 public:
};

EventStream::EventStream(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog.EventStream)
}
inline PROTOBUF_NDEBUG_INLINE EventStream::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : stream_{visibility, arena, from.stream_},
        _cached_size_{0} {}

EventStream::EventStream(
    ::google::protobuf::Arena* arena,
    const EventStream& from)
    : ::google::protobuf::MessageLite(arena) {
  EventStream* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog.EventStream)
}
inline PROTOBUF_NDEBUG_INLINE EventStream::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : stream_{visibility, arena},
        _cached_size_{0} {}

inline void EventStream::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
EventStream::~EventStream() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog.EventStream)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void EventStream::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EventStream::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog.EventStream)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stream_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EventStream::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> EventStream::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_EventStream_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // repeated .webrtc.rtclog.Event stream = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(EventStream, _impl_.stream_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .webrtc.rtclog.Event stream = 1;
    {PROTOBUF_FIELD_OFFSET(EventStream, _impl_.stream_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::webrtc::rtclog::Event>()},
  }}, {{
  }},
};

::uint8_t* EventStream::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog.EventStream)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .webrtc.rtclog.Event stream = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stream_size()); i < n; i++) {
    const auto& repfield = this->_internal_stream().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog.EventStream)
  return target;
}

::size_t EventStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog.EventStream)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .webrtc.rtclog.Event stream = 1;
  total_size += 1UL * this->_internal_stream_size();
  for (const auto& msg : this->_internal_stream()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void EventStream::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EventStream*>(
      &from));
}

void EventStream::MergeFrom(const EventStream& from) {
  EventStream* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog.EventStream)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_stream()->MergeFrom(
      from._internal_stream());
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EventStream::CopyFrom(const EventStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog.EventStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EventStream::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* EventStream::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EventStream::InternalSwap(EventStream* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stream_.InternalSwap(&other->_impl_.stream_);
}

std::string EventStream::GetTypeName() const {
  return "webrtc.rtclog.EventStream";
}

// ===================================================================

class Event::_Internal {
 public:
  using HasBits = decltype(std::declval<Event>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Event, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::webrtc::rtclog::Event, _impl_._oneof_case_);
  static void set_has_timestamp_us(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::webrtc::rtclog::RtpPacket& rtp_packet(const Event* msg);
  static const ::webrtc::rtclog::RtcpPacket& rtcp_packet(const Event* msg);
  static const ::webrtc::rtclog::AudioPlayoutEvent& audio_playout_event(const Event* msg);
  static const ::webrtc::rtclog::LossBasedBweUpdate& loss_based_bwe_update(const Event* msg);
  static const ::webrtc::rtclog::DelayBasedBweUpdate& delay_based_bwe_update(const Event* msg);
  static const ::webrtc::rtclog::VideoReceiveConfig& video_receiver_config(const Event* msg);
  static const ::webrtc::rtclog::VideoSendConfig& video_sender_config(const Event* msg);
  static const ::webrtc::rtclog::AudioReceiveConfig& audio_receiver_config(const Event* msg);
  static const ::webrtc::rtclog::AudioSendConfig& audio_sender_config(const Event* msg);
  static const ::webrtc::rtclog::AudioNetworkAdaptation& audio_network_adaptation(const Event* msg);
  static const ::webrtc::rtclog::BweProbeCluster& probe_cluster(const Event* msg);
  static const ::webrtc::rtclog::BweProbeResult& probe_result(const Event* msg);
  static const ::webrtc::rtclog::AlrState& alr_state(const Event* msg);
  static const ::webrtc::rtclog::IceCandidatePairConfig& ice_candidate_pair_config(const Event* msg);
  static const ::webrtc::rtclog::IceCandidatePairEvent& ice_candidate_pair_event(const Event* msg);
  static const ::webrtc::rtclog::RemoteEstimate& remote_estimate(const Event* msg);
};

const ::webrtc::rtclog::RtpPacket& Event::_Internal::rtp_packet(const Event* msg) {
  return *msg->_impl_.subtype_.rtp_packet_;
}
const ::webrtc::rtclog::RtcpPacket& Event::_Internal::rtcp_packet(const Event* msg) {
  return *msg->_impl_.subtype_.rtcp_packet_;
}
const ::webrtc::rtclog::AudioPlayoutEvent& Event::_Internal::audio_playout_event(const Event* msg) {
  return *msg->_impl_.subtype_.audio_playout_event_;
}
const ::webrtc::rtclog::LossBasedBweUpdate& Event::_Internal::loss_based_bwe_update(const Event* msg) {
  return *msg->_impl_.subtype_.loss_based_bwe_update_;
}
const ::webrtc::rtclog::DelayBasedBweUpdate& Event::_Internal::delay_based_bwe_update(const Event* msg) {
  return *msg->_impl_.subtype_.delay_based_bwe_update_;
}
const ::webrtc::rtclog::VideoReceiveConfig& Event::_Internal::video_receiver_config(const Event* msg) {
  return *msg->_impl_.subtype_.video_receiver_config_;
}
const ::webrtc::rtclog::VideoSendConfig& Event::_Internal::video_sender_config(const Event* msg) {
  return *msg->_impl_.subtype_.video_sender_config_;
}
const ::webrtc::rtclog::AudioReceiveConfig& Event::_Internal::audio_receiver_config(const Event* msg) {
  return *msg->_impl_.subtype_.audio_receiver_config_;
}
const ::webrtc::rtclog::AudioSendConfig& Event::_Internal::audio_sender_config(const Event* msg) {
  return *msg->_impl_.subtype_.audio_sender_config_;
}
const ::webrtc::rtclog::AudioNetworkAdaptation& Event::_Internal::audio_network_adaptation(const Event* msg) {
  return *msg->_impl_.subtype_.audio_network_adaptation_;
}
const ::webrtc::rtclog::BweProbeCluster& Event::_Internal::probe_cluster(const Event* msg) {
  return *msg->_impl_.subtype_.probe_cluster_;
}
const ::webrtc::rtclog::BweProbeResult& Event::_Internal::probe_result(const Event* msg) {
  return *msg->_impl_.subtype_.probe_result_;
}
const ::webrtc::rtclog::AlrState& Event::_Internal::alr_state(const Event* msg) {
  return *msg->_impl_.subtype_.alr_state_;
}
const ::webrtc::rtclog::IceCandidatePairConfig& Event::_Internal::ice_candidate_pair_config(const Event* msg) {
  return *msg->_impl_.subtype_.ice_candidate_pair_config_;
}
const ::webrtc::rtclog::IceCandidatePairEvent& Event::_Internal::ice_candidate_pair_event(const Event* msg) {
  return *msg->_impl_.subtype_.ice_candidate_pair_event_;
}
const ::webrtc::rtclog::RemoteEstimate& Event::_Internal::remote_estimate(const Event* msg) {
  return *msg->_impl_.subtype_.remote_estimate_;
}
void Event::set_allocated_rtp_packet(::webrtc::rtclog::RtpPacket* rtp_packet) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_subtype();
  if (rtp_packet) {
    ::google::protobuf::Arena* submessage_arena = rtp_packet->GetArena();
    if (message_arena != submessage_arena) {
      rtp_packet = ::google::protobuf::internal::GetOwnedMessage(message_arena, rtp_packet, submessage_arena);
    }
    set_has_rtp_packet();
    _impl_.subtype_.rtp_packet_ = rtp_packet;
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.Event.rtp_packet)
}
void Event::set_allocated_rtcp_packet(::webrtc::rtclog::RtcpPacket* rtcp_packet) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_subtype();
  if (rtcp_packet) {
    ::google::protobuf::Arena* submessage_arena = rtcp_packet->GetArena();
    if (message_arena != submessage_arena) {
      rtcp_packet = ::google::protobuf::internal::GetOwnedMessage(message_arena, rtcp_packet, submessage_arena);
    }
    set_has_rtcp_packet();
    _impl_.subtype_.rtcp_packet_ = rtcp_packet;
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.Event.rtcp_packet)
}
void Event::set_allocated_audio_playout_event(::webrtc::rtclog::AudioPlayoutEvent* audio_playout_event) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_subtype();
  if (audio_playout_event) {
    ::google::protobuf::Arena* submessage_arena = audio_playout_event->GetArena();
    if (message_arena != submessage_arena) {
      audio_playout_event = ::google::protobuf::internal::GetOwnedMessage(message_arena, audio_playout_event, submessage_arena);
    }
    set_has_audio_playout_event();
    _impl_.subtype_.audio_playout_event_ = audio_playout_event;
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.Event.audio_playout_event)
}
void Event::set_allocated_loss_based_bwe_update(::webrtc::rtclog::LossBasedBweUpdate* loss_based_bwe_update) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_subtype();
  if (loss_based_bwe_update) {
    ::google::protobuf::Arena* submessage_arena = loss_based_bwe_update->GetArena();
    if (message_arena != submessage_arena) {
      loss_based_bwe_update = ::google::protobuf::internal::GetOwnedMessage(message_arena, loss_based_bwe_update, submessage_arena);
    }
    set_has_loss_based_bwe_update();
    _impl_.subtype_.loss_based_bwe_update_ = loss_based_bwe_update;
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.Event.loss_based_bwe_update)
}
void Event::set_allocated_delay_based_bwe_update(::webrtc::rtclog::DelayBasedBweUpdate* delay_based_bwe_update) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_subtype();
  if (delay_based_bwe_update) {
    ::google::protobuf::Arena* submessage_arena = delay_based_bwe_update->GetArena();
    if (message_arena != submessage_arena) {
      delay_based_bwe_update = ::google::protobuf::internal::GetOwnedMessage(message_arena, delay_based_bwe_update, submessage_arena);
    }
    set_has_delay_based_bwe_update();
    _impl_.subtype_.delay_based_bwe_update_ = delay_based_bwe_update;
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.Event.delay_based_bwe_update)
}
void Event::set_allocated_video_receiver_config(::webrtc::rtclog::VideoReceiveConfig* video_receiver_config) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_subtype();
  if (video_receiver_config) {
    ::google::protobuf::Arena* submessage_arena = video_receiver_config->GetArena();
    if (message_arena != submessage_arena) {
      video_receiver_config = ::google::protobuf::internal::GetOwnedMessage(message_arena, video_receiver_config, submessage_arena);
    }
    set_has_video_receiver_config();
    _impl_.subtype_.video_receiver_config_ = video_receiver_config;
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.Event.video_receiver_config)
}
void Event::set_allocated_video_sender_config(::webrtc::rtclog::VideoSendConfig* video_sender_config) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_subtype();
  if (video_sender_config) {
    ::google::protobuf::Arena* submessage_arena = video_sender_config->GetArena();
    if (message_arena != submessage_arena) {
      video_sender_config = ::google::protobuf::internal::GetOwnedMessage(message_arena, video_sender_config, submessage_arena);
    }
    set_has_video_sender_config();
    _impl_.subtype_.video_sender_config_ = video_sender_config;
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.Event.video_sender_config)
}
void Event::set_allocated_audio_receiver_config(::webrtc::rtclog::AudioReceiveConfig* audio_receiver_config) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_subtype();
  if (audio_receiver_config) {
    ::google::protobuf::Arena* submessage_arena = audio_receiver_config->GetArena();
    if (message_arena != submessage_arena) {
      audio_receiver_config = ::google::protobuf::internal::GetOwnedMessage(message_arena, audio_receiver_config, submessage_arena);
    }
    set_has_audio_receiver_config();
    _impl_.subtype_.audio_receiver_config_ = audio_receiver_config;
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.Event.audio_receiver_config)
}
void Event::set_allocated_audio_sender_config(::webrtc::rtclog::AudioSendConfig* audio_sender_config) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_subtype();
  if (audio_sender_config) {
    ::google::protobuf::Arena* submessage_arena = audio_sender_config->GetArena();
    if (message_arena != submessage_arena) {
      audio_sender_config = ::google::protobuf::internal::GetOwnedMessage(message_arena, audio_sender_config, submessage_arena);
    }
    set_has_audio_sender_config();
    _impl_.subtype_.audio_sender_config_ = audio_sender_config;
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.Event.audio_sender_config)
}
void Event::set_allocated_audio_network_adaptation(::webrtc::rtclog::AudioNetworkAdaptation* audio_network_adaptation) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_subtype();
  if (audio_network_adaptation) {
    ::google::protobuf::Arena* submessage_arena = audio_network_adaptation->GetArena();
    if (message_arena != submessage_arena) {
      audio_network_adaptation = ::google::protobuf::internal::GetOwnedMessage(message_arena, audio_network_adaptation, submessage_arena);
    }
    set_has_audio_network_adaptation();
    _impl_.subtype_.audio_network_adaptation_ = audio_network_adaptation;
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.Event.audio_network_adaptation)
}
void Event::set_allocated_probe_cluster(::webrtc::rtclog::BweProbeCluster* probe_cluster) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_subtype();
  if (probe_cluster) {
    ::google::protobuf::Arena* submessage_arena = probe_cluster->GetArena();
    if (message_arena != submessage_arena) {
      probe_cluster = ::google::protobuf::internal::GetOwnedMessage(message_arena, probe_cluster, submessage_arena);
    }
    set_has_probe_cluster();
    _impl_.subtype_.probe_cluster_ = probe_cluster;
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.Event.probe_cluster)
}
void Event::set_allocated_probe_result(::webrtc::rtclog::BweProbeResult* probe_result) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_subtype();
  if (probe_result) {
    ::google::protobuf::Arena* submessage_arena = probe_result->GetArena();
    if (message_arena != submessage_arena) {
      probe_result = ::google::protobuf::internal::GetOwnedMessage(message_arena, probe_result, submessage_arena);
    }
    set_has_probe_result();
    _impl_.subtype_.probe_result_ = probe_result;
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.Event.probe_result)
}
void Event::set_allocated_alr_state(::webrtc::rtclog::AlrState* alr_state) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_subtype();
  if (alr_state) {
    ::google::protobuf::Arena* submessage_arena = alr_state->GetArena();
    if (message_arena != submessage_arena) {
      alr_state = ::google::protobuf::internal::GetOwnedMessage(message_arena, alr_state, submessage_arena);
    }
    set_has_alr_state();
    _impl_.subtype_.alr_state_ = alr_state;
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.Event.alr_state)
}
void Event::set_allocated_ice_candidate_pair_config(::webrtc::rtclog::IceCandidatePairConfig* ice_candidate_pair_config) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_subtype();
  if (ice_candidate_pair_config) {
    ::google::protobuf::Arena* submessage_arena = ice_candidate_pair_config->GetArena();
    if (message_arena != submessage_arena) {
      ice_candidate_pair_config = ::google::protobuf::internal::GetOwnedMessage(message_arena, ice_candidate_pair_config, submessage_arena);
    }
    set_has_ice_candidate_pair_config();
    _impl_.subtype_.ice_candidate_pair_config_ = ice_candidate_pair_config;
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.Event.ice_candidate_pair_config)
}
void Event::set_allocated_ice_candidate_pair_event(::webrtc::rtclog::IceCandidatePairEvent* ice_candidate_pair_event) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_subtype();
  if (ice_candidate_pair_event) {
    ::google::protobuf::Arena* submessage_arena = ice_candidate_pair_event->GetArena();
    if (message_arena != submessage_arena) {
      ice_candidate_pair_event = ::google::protobuf::internal::GetOwnedMessage(message_arena, ice_candidate_pair_event, submessage_arena);
    }
    set_has_ice_candidate_pair_event();
    _impl_.subtype_.ice_candidate_pair_event_ = ice_candidate_pair_event;
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.Event.ice_candidate_pair_event)
}
void Event::set_allocated_remote_estimate(::webrtc::rtclog::RemoteEstimate* remote_estimate) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_subtype();
  if (remote_estimate) {
    ::google::protobuf::Arena* submessage_arena = remote_estimate->GetArena();
    if (message_arena != submessage_arena) {
      remote_estimate = ::google::protobuf::internal::GetOwnedMessage(message_arena, remote_estimate, submessage_arena);
    }
    set_has_remote_estimate();
    _impl_.subtype_.remote_estimate_ = remote_estimate;
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.Event.remote_estimate)
}
Event::Event(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog.Event)
}
inline PROTOBUF_NDEBUG_INLINE Event::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        subtype_{},
        _oneof_case_{from._oneof_case_[0]} {}

Event::Event(
    ::google::protobuf::Arena* arena,
    const Event& from)
    : ::google::protobuf::MessageLite(arena) {
  Event* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_us_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, timestamp_us_),
           offsetof(Impl_, type_) -
               offsetof(Impl_, timestamp_us_) +
               sizeof(Impl_::type_));
  switch (subtype_case()) {
    case SUBTYPE_NOT_SET:
      break;
      case kRtpPacket:
        _impl_.subtype_.rtp_packet_ = CreateMaybeMessage<::webrtc::rtclog::RtpPacket>(arena, *from._impl_.subtype_.rtp_packet_);
        break;
      case kRtcpPacket:
        _impl_.subtype_.rtcp_packet_ = CreateMaybeMessage<::webrtc::rtclog::RtcpPacket>(arena, *from._impl_.subtype_.rtcp_packet_);
        break;
      case kAudioPlayoutEvent:
        _impl_.subtype_.audio_playout_event_ = CreateMaybeMessage<::webrtc::rtclog::AudioPlayoutEvent>(arena, *from._impl_.subtype_.audio_playout_event_);
        break;
      case kLossBasedBweUpdate:
        _impl_.subtype_.loss_based_bwe_update_ = CreateMaybeMessage<::webrtc::rtclog::LossBasedBweUpdate>(arena, *from._impl_.subtype_.loss_based_bwe_update_);
        break;
      case kDelayBasedBweUpdate:
        _impl_.subtype_.delay_based_bwe_update_ = CreateMaybeMessage<::webrtc::rtclog::DelayBasedBweUpdate>(arena, *from._impl_.subtype_.delay_based_bwe_update_);
        break;
      case kVideoReceiverConfig:
        _impl_.subtype_.video_receiver_config_ = CreateMaybeMessage<::webrtc::rtclog::VideoReceiveConfig>(arena, *from._impl_.subtype_.video_receiver_config_);
        break;
      case kVideoSenderConfig:
        _impl_.subtype_.video_sender_config_ = CreateMaybeMessage<::webrtc::rtclog::VideoSendConfig>(arena, *from._impl_.subtype_.video_sender_config_);
        break;
      case kAudioReceiverConfig:
        _impl_.subtype_.audio_receiver_config_ = CreateMaybeMessage<::webrtc::rtclog::AudioReceiveConfig>(arena, *from._impl_.subtype_.audio_receiver_config_);
        break;
      case kAudioSenderConfig:
        _impl_.subtype_.audio_sender_config_ = CreateMaybeMessage<::webrtc::rtclog::AudioSendConfig>(arena, *from._impl_.subtype_.audio_sender_config_);
        break;
      case kAudioNetworkAdaptation:
        _impl_.subtype_.audio_network_adaptation_ = CreateMaybeMessage<::webrtc::rtclog::AudioNetworkAdaptation>(arena, *from._impl_.subtype_.audio_network_adaptation_);
        break;
      case kProbeCluster:
        _impl_.subtype_.probe_cluster_ = CreateMaybeMessage<::webrtc::rtclog::BweProbeCluster>(arena, *from._impl_.subtype_.probe_cluster_);
        break;
      case kProbeResult:
        _impl_.subtype_.probe_result_ = CreateMaybeMessage<::webrtc::rtclog::BweProbeResult>(arena, *from._impl_.subtype_.probe_result_);
        break;
      case kAlrState:
        _impl_.subtype_.alr_state_ = CreateMaybeMessage<::webrtc::rtclog::AlrState>(arena, *from._impl_.subtype_.alr_state_);
        break;
      case kIceCandidatePairConfig:
        _impl_.subtype_.ice_candidate_pair_config_ = CreateMaybeMessage<::webrtc::rtclog::IceCandidatePairConfig>(arena, *from._impl_.subtype_.ice_candidate_pair_config_);
        break;
      case kIceCandidatePairEvent:
        _impl_.subtype_.ice_candidate_pair_event_ = CreateMaybeMessage<::webrtc::rtclog::IceCandidatePairEvent>(arena, *from._impl_.subtype_.ice_candidate_pair_event_);
        break;
      case kRemoteEstimate:
        _impl_.subtype_.remote_estimate_ = CreateMaybeMessage<::webrtc::rtclog::RemoteEstimate>(arena, *from._impl_.subtype_.remote_estimate_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog.Event)
}
inline PROTOBUF_NDEBUG_INLINE Event::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        subtype_{},
        _oneof_case_{} {}

inline void Event::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_us_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, timestamp_us_) +
               sizeof(Impl_::type_));
}
Event::~Event() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog.Event)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Event::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_subtype()) {
    clear_subtype();
  }
  _impl_.~Impl_();
}

void Event::clear_subtype() {
// @@protoc_insertion_point(one_of_clear_start:webrtc.rtclog.Event)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (subtype_case()) {
    case kRtpPacket: {
      if (GetArena() == nullptr) {
        delete _impl_.subtype_.rtp_packet_;
      }
      break;
    }
    case kRtcpPacket: {
      if (GetArena() == nullptr) {
        delete _impl_.subtype_.rtcp_packet_;
      }
      break;
    }
    case kAudioPlayoutEvent: {
      if (GetArena() == nullptr) {
        delete _impl_.subtype_.audio_playout_event_;
      }
      break;
    }
    case kLossBasedBweUpdate: {
      if (GetArena() == nullptr) {
        delete _impl_.subtype_.loss_based_bwe_update_;
      }
      break;
    }
    case kDelayBasedBweUpdate: {
      if (GetArena() == nullptr) {
        delete _impl_.subtype_.delay_based_bwe_update_;
      }
      break;
    }
    case kVideoReceiverConfig: {
      if (GetArena() == nullptr) {
        delete _impl_.subtype_.video_receiver_config_;
      }
      break;
    }
    case kVideoSenderConfig: {
      if (GetArena() == nullptr) {
        delete _impl_.subtype_.video_sender_config_;
      }
      break;
    }
    case kAudioReceiverConfig: {
      if (GetArena() == nullptr) {
        delete _impl_.subtype_.audio_receiver_config_;
      }
      break;
    }
    case kAudioSenderConfig: {
      if (GetArena() == nullptr) {
        delete _impl_.subtype_.audio_sender_config_;
      }
      break;
    }
    case kAudioNetworkAdaptation: {
      if (GetArena() == nullptr) {
        delete _impl_.subtype_.audio_network_adaptation_;
      }
      break;
    }
    case kProbeCluster: {
      if (GetArena() == nullptr) {
        delete _impl_.subtype_.probe_cluster_;
      }
      break;
    }
    case kProbeResult: {
      if (GetArena() == nullptr) {
        delete _impl_.subtype_.probe_result_;
      }
      break;
    }
    case kAlrState: {
      if (GetArena() == nullptr) {
        delete _impl_.subtype_.alr_state_;
      }
      break;
    }
    case kIceCandidatePairConfig: {
      if (GetArena() == nullptr) {
        delete _impl_.subtype_.ice_candidate_pair_config_;
      }
      break;
    }
    case kIceCandidatePairEvent: {
      if (GetArena() == nullptr) {
        delete _impl_.subtype_.ice_candidate_pair_event_;
      }
      break;
    }
    case kRemoteEstimate: {
      if (GetArena() == nullptr) {
        delete _impl_.subtype_.remote_estimate_;
      }
      break;
    }
    case SUBTYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SUBTYPE_NOT_SET;
}


PROTOBUF_NOINLINE void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog.Event)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.timestamp_us_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.timestamp_us_)) + sizeof(_impl_.type_));
  }
  clear_subtype();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Event::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 18, 17, 0, 2> Event::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Event, _impl_._has_bits_),
    0, // no _extensions_
    22, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4290803712,  // skipmap
    offsetof(decltype(_table_), field_entries),
    18,  // num_field_entries
    17,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Event_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // optional .webrtc.rtclog.Event.EventType type = 2;
    {::_pbi::TcParser::FastEvS1,
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(Event, _impl_.type_)}},
    // optional int64 timestamp_us = 1;
    {::_pbi::TcParser::FastV64S1,
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(Event, _impl_.timestamp_us_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int64 timestamp_us = 1;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.timestamp_us_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // optional .webrtc.rtclog.Event.EventType type = 2;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnum)},
    // .webrtc.rtclog.RtpPacket rtp_packet = 3;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.subtype_.rtp_packet_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .webrtc.rtclog.RtcpPacket rtcp_packet = 4;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.subtype_.rtcp_packet_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .webrtc.rtclog.AudioPlayoutEvent audio_playout_event = 5;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.subtype_.audio_playout_event_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .webrtc.rtclog.LossBasedBweUpdate loss_based_bwe_update = 6;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.subtype_.loss_based_bwe_update_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .webrtc.rtclog.DelayBasedBweUpdate delay_based_bwe_update = 7;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.subtype_.delay_based_bwe_update_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .webrtc.rtclog.VideoReceiveConfig video_receiver_config = 8;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.subtype_.video_receiver_config_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .webrtc.rtclog.VideoSendConfig video_sender_config = 9;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.subtype_.video_sender_config_), _Internal::kOneofCaseOffset + 0, 7,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .webrtc.rtclog.AudioReceiveConfig audio_receiver_config = 10;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.subtype_.audio_receiver_config_), _Internal::kOneofCaseOffset + 0, 8,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .webrtc.rtclog.AudioSendConfig audio_sender_config = 11;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.subtype_.audio_sender_config_), _Internal::kOneofCaseOffset + 0, 9,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .webrtc.rtclog.AudioNetworkAdaptation audio_network_adaptation = 16;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.subtype_.audio_network_adaptation_), _Internal::kOneofCaseOffset + 0, 10,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .webrtc.rtclog.BweProbeCluster probe_cluster = 17;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.subtype_.probe_cluster_), _Internal::kOneofCaseOffset + 0, 11,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .webrtc.rtclog.BweProbeResult probe_result = 18;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.subtype_.probe_result_), _Internal::kOneofCaseOffset + 0, 12,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .webrtc.rtclog.AlrState alr_state = 19;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.subtype_.alr_state_), _Internal::kOneofCaseOffset + 0, 13,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .webrtc.rtclog.IceCandidatePairConfig ice_candidate_pair_config = 20;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.subtype_.ice_candidate_pair_config_), _Internal::kOneofCaseOffset + 0, 14,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .webrtc.rtclog.IceCandidatePairEvent ice_candidate_pair_event = 21;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.subtype_.ice_candidate_pair_event_), _Internal::kOneofCaseOffset + 0, 15,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .webrtc.rtclog.RemoteEstimate remote_estimate = 22;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.subtype_.remote_estimate_), _Internal::kOneofCaseOffset + 0, 16,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::FieldAuxEnumData{}, ::webrtc::rtclog::Event_EventType_internal_data_},
    {::_pbi::TcParser::GetTable<::webrtc::rtclog::RtpPacket>()},
    {::_pbi::TcParser::GetTable<::webrtc::rtclog::RtcpPacket>()},
    {::_pbi::TcParser::GetTable<::webrtc::rtclog::AudioPlayoutEvent>()},
    {::_pbi::TcParser::GetTable<::webrtc::rtclog::LossBasedBweUpdate>()},
    {::_pbi::TcParser::GetTable<::webrtc::rtclog::DelayBasedBweUpdate>()},
    {::_pbi::TcParser::GetTable<::webrtc::rtclog::VideoReceiveConfig>()},
    {::_pbi::TcParser::GetTable<::webrtc::rtclog::VideoSendConfig>()},
    {::_pbi::TcParser::GetTable<::webrtc::rtclog::AudioReceiveConfig>()},
    {::_pbi::TcParser::GetTable<::webrtc::rtclog::AudioSendConfig>()},
    {::_pbi::TcParser::GetTable<::webrtc::rtclog::AudioNetworkAdaptation>()},
    {::_pbi::TcParser::GetTable<::webrtc::rtclog::BweProbeCluster>()},
    {::_pbi::TcParser::GetTable<::webrtc::rtclog::BweProbeResult>()},
    {::_pbi::TcParser::GetTable<::webrtc::rtclog::AlrState>()},
    {::_pbi::TcParser::GetTable<::webrtc::rtclog::IceCandidatePairConfig>()},
    {::_pbi::TcParser::GetTable<::webrtc::rtclog::IceCandidatePairEvent>()},
    {::_pbi::TcParser::GetTable<::webrtc::rtclog::RemoteEstimate>()},
  }}, {{
  }},
};

::uint8_t* Event::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog.Event)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp_us = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_timestamp_us(), target);
  }

  // optional .webrtc.rtclog.Event.EventType type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_type(), target);
  }

  switch (subtype_case()) {
    case kRtpPacket: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, _Internal::rtp_packet(this),
          _Internal::rtp_packet(this).GetCachedSize(), target, stream);
      break;
    }
    case kRtcpPacket: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, _Internal::rtcp_packet(this),
          _Internal::rtcp_packet(this).GetCachedSize(), target, stream);
      break;
    }
    case kAudioPlayoutEvent: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, _Internal::audio_playout_event(this),
          _Internal::audio_playout_event(this).GetCachedSize(), target, stream);
      break;
    }
    case kLossBasedBweUpdate: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          6, _Internal::loss_based_bwe_update(this),
          _Internal::loss_based_bwe_update(this).GetCachedSize(), target, stream);
      break;
    }
    case kDelayBasedBweUpdate: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          7, _Internal::delay_based_bwe_update(this),
          _Internal::delay_based_bwe_update(this).GetCachedSize(), target, stream);
      break;
    }
    case kVideoReceiverConfig: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          8, _Internal::video_receiver_config(this),
          _Internal::video_receiver_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kVideoSenderConfig: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          9, _Internal::video_sender_config(this),
          _Internal::video_sender_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kAudioReceiverConfig: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          10, _Internal::audio_receiver_config(this),
          _Internal::audio_receiver_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kAudioSenderConfig: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          11, _Internal::audio_sender_config(this),
          _Internal::audio_sender_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kAudioNetworkAdaptation: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          16, _Internal::audio_network_adaptation(this),
          _Internal::audio_network_adaptation(this).GetCachedSize(), target, stream);
      break;
    }
    case kProbeCluster: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          17, _Internal::probe_cluster(this),
          _Internal::probe_cluster(this).GetCachedSize(), target, stream);
      break;
    }
    case kProbeResult: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          18, _Internal::probe_result(this),
          _Internal::probe_result(this).GetCachedSize(), target, stream);
      break;
    }
    case kAlrState: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          19, _Internal::alr_state(this),
          _Internal::alr_state(this).GetCachedSize(), target, stream);
      break;
    }
    case kIceCandidatePairConfig: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          20, _Internal::ice_candidate_pair_config(this),
          _Internal::ice_candidate_pair_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kIceCandidatePairEvent: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          21, _Internal::ice_candidate_pair_event(this),
          _Internal::ice_candidate_pair_event(this).GetCachedSize(), target, stream);
      break;
    }
    case kRemoteEstimate: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          22, _Internal::remote_estimate(this),
          _Internal::remote_estimate(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog.Event)
  return target;
}

::size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog.Event)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 timestamp_us = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp_us());
    }

    // optional .webrtc.rtclog.Event.EventType type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  switch (subtype_case()) {
    // .webrtc.rtclog.RtpPacket rtp_packet = 3;
    case kRtpPacket: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.subtype_.rtp_packet_);
      break;
    }
    // .webrtc.rtclog.RtcpPacket rtcp_packet = 4;
    case kRtcpPacket: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.subtype_.rtcp_packet_);
      break;
    }
    // .webrtc.rtclog.AudioPlayoutEvent audio_playout_event = 5;
    case kAudioPlayoutEvent: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.subtype_.audio_playout_event_);
      break;
    }
    // .webrtc.rtclog.LossBasedBweUpdate loss_based_bwe_update = 6;
    case kLossBasedBweUpdate: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.subtype_.loss_based_bwe_update_);
      break;
    }
    // .webrtc.rtclog.DelayBasedBweUpdate delay_based_bwe_update = 7;
    case kDelayBasedBweUpdate: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.subtype_.delay_based_bwe_update_);
      break;
    }
    // .webrtc.rtclog.VideoReceiveConfig video_receiver_config = 8;
    case kVideoReceiverConfig: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.subtype_.video_receiver_config_);
      break;
    }
    // .webrtc.rtclog.VideoSendConfig video_sender_config = 9;
    case kVideoSenderConfig: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.subtype_.video_sender_config_);
      break;
    }
    // .webrtc.rtclog.AudioReceiveConfig audio_receiver_config = 10;
    case kAudioReceiverConfig: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.subtype_.audio_receiver_config_);
      break;
    }
    // .webrtc.rtclog.AudioSendConfig audio_sender_config = 11;
    case kAudioSenderConfig: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.subtype_.audio_sender_config_);
      break;
    }
    // .webrtc.rtclog.AudioNetworkAdaptation audio_network_adaptation = 16;
    case kAudioNetworkAdaptation: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.subtype_.audio_network_adaptation_);
      break;
    }
    // .webrtc.rtclog.BweProbeCluster probe_cluster = 17;
    case kProbeCluster: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.subtype_.probe_cluster_);
      break;
    }
    // .webrtc.rtclog.BweProbeResult probe_result = 18;
    case kProbeResult: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.subtype_.probe_result_);
      break;
    }
    // .webrtc.rtclog.AlrState alr_state = 19;
    case kAlrState: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.subtype_.alr_state_);
      break;
    }
    // .webrtc.rtclog.IceCandidatePairConfig ice_candidate_pair_config = 20;
    case kIceCandidatePairConfig: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.subtype_.ice_candidate_pair_config_);
      break;
    }
    // .webrtc.rtclog.IceCandidatePairEvent ice_candidate_pair_event = 21;
    case kIceCandidatePairEvent: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.subtype_.ice_candidate_pair_event_);
      break;
    }
    // .webrtc.rtclog.RemoteEstimate remote_estimate = 22;
    case kRemoteEstimate: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.subtype_.remote_estimate_);
      break;
    }
    case SUBTYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void Event::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Event*>(
      &from));
}

void Event::MergeFrom(const Event& from) {
  Event* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog.Event)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.timestamp_us_ = from._impl_.timestamp_us_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.subtype_case()) {
    case kRtpPacket: {
      _this->_internal_mutable_rtp_packet()->::webrtc::rtclog::RtpPacket::MergeFrom(
          from._internal_rtp_packet());
      break;
    }
    case kRtcpPacket: {
      _this->_internal_mutable_rtcp_packet()->::webrtc::rtclog::RtcpPacket::MergeFrom(
          from._internal_rtcp_packet());
      break;
    }
    case kAudioPlayoutEvent: {
      _this->_internal_mutable_audio_playout_event()->::webrtc::rtclog::AudioPlayoutEvent::MergeFrom(
          from._internal_audio_playout_event());
      break;
    }
    case kLossBasedBweUpdate: {
      _this->_internal_mutable_loss_based_bwe_update()->::webrtc::rtclog::LossBasedBweUpdate::MergeFrom(
          from._internal_loss_based_bwe_update());
      break;
    }
    case kDelayBasedBweUpdate: {
      _this->_internal_mutable_delay_based_bwe_update()->::webrtc::rtclog::DelayBasedBweUpdate::MergeFrom(
          from._internal_delay_based_bwe_update());
      break;
    }
    case kVideoReceiverConfig: {
      _this->_internal_mutable_video_receiver_config()->::webrtc::rtclog::VideoReceiveConfig::MergeFrom(
          from._internal_video_receiver_config());
      break;
    }
    case kVideoSenderConfig: {
      _this->_internal_mutable_video_sender_config()->::webrtc::rtclog::VideoSendConfig::MergeFrom(
          from._internal_video_sender_config());
      break;
    }
    case kAudioReceiverConfig: {
      _this->_internal_mutable_audio_receiver_config()->::webrtc::rtclog::AudioReceiveConfig::MergeFrom(
          from._internal_audio_receiver_config());
      break;
    }
    case kAudioSenderConfig: {
      _this->_internal_mutable_audio_sender_config()->::webrtc::rtclog::AudioSendConfig::MergeFrom(
          from._internal_audio_sender_config());
      break;
    }
    case kAudioNetworkAdaptation: {
      _this->_internal_mutable_audio_network_adaptation()->::webrtc::rtclog::AudioNetworkAdaptation::MergeFrom(
          from._internal_audio_network_adaptation());
      break;
    }
    case kProbeCluster: {
      _this->_internal_mutable_probe_cluster()->::webrtc::rtclog::BweProbeCluster::MergeFrom(
          from._internal_probe_cluster());
      break;
    }
    case kProbeResult: {
      _this->_internal_mutable_probe_result()->::webrtc::rtclog::BweProbeResult::MergeFrom(
          from._internal_probe_result());
      break;
    }
    case kAlrState: {
      _this->_internal_mutable_alr_state()->::webrtc::rtclog::AlrState::MergeFrom(
          from._internal_alr_state());
      break;
    }
    case kIceCandidatePairConfig: {
      _this->_internal_mutable_ice_candidate_pair_config()->::webrtc::rtclog::IceCandidatePairConfig::MergeFrom(
          from._internal_ice_candidate_pair_config());
      break;
    }
    case kIceCandidatePairEvent: {
      _this->_internal_mutable_ice_candidate_pair_event()->::webrtc::rtclog::IceCandidatePairEvent::MergeFrom(
          from._internal_ice_candidate_pair_event());
      break;
    }
    case kRemoteEstimate: {
      _this->_internal_mutable_remote_estimate()->::webrtc::rtclog::RemoteEstimate::MergeFrom(
          from._internal_remote_estimate());
      break;
    }
    case SUBTYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Event::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Event::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Event::InternalSwap(Event* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event, _impl_.type_)
      + sizeof(Event::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Event, _impl_.timestamp_us_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_us_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_us_));
  swap(_impl_.subtype_, other->_impl_.subtype_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

std::string Event::GetTypeName() const {
  return "webrtc.rtclog.Event";
}

// ===================================================================

class RtpPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<RtpPacket>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RtpPacket, _impl_._has_bits_);
  static void set_has_incoming(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_packet_length(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_probe_cluster_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

RtpPacket::RtpPacket(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog.RtpPacket)
}
inline PROTOBUF_NDEBUG_INLINE RtpPacket::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        header_(arena, from.header_) {}

RtpPacket::RtpPacket(
    ::google::protobuf::Arena* arena,
    const RtpPacket& from)
    : ::google::protobuf::MessageLite(arena) {
  RtpPacket* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, incoming_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, incoming_),
           offsetof(Impl_, probe_cluster_id_) -
               offsetof(Impl_, incoming_) +
               sizeof(Impl_::probe_cluster_id_));

  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog.RtpPacket)
}
inline PROTOBUF_NDEBUG_INLINE RtpPacket::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        header_(arena) {}

inline void RtpPacket::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, incoming_),
           0,
           offsetof(Impl_, probe_cluster_id_) -
               offsetof(Impl_, incoming_) +
               sizeof(Impl_::probe_cluster_id_));
}
RtpPacket::~RtpPacket() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog.RtpPacket)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void RtpPacket::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.header_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RtpPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog.RtpPacket)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.header_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.incoming_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.probe_cluster_id_) -
        reinterpret_cast<char*>(&_impl_.incoming_)) + sizeof(_impl_.probe_cluster_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RtpPacket::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 1, 0, 2> RtpPacket::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RtpPacket, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RtpPacket_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional bool incoming = 1;
    {::_pbi::TcParser::FastV8S1,
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(RtpPacket, _impl_.incoming_)}},
    // optional .webrtc.rtclog.MediaType type = 2 [deprecated = true];
    {::_pbi::TcParser::FastEr0S1,
     {16, 2, 3, PROTOBUF_FIELD_OFFSET(RtpPacket, _impl_.type_)}},
    // optional uint32 packet_length = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(RtpPacket, _impl_.packet_length_)}},
    // optional bytes header = 4;
    {::_pbi::TcParser::FastBS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(RtpPacket, _impl_.header_)}},
    // optional int32 probe_cluster_id = 5;
    {::_pbi::TcParser::FastV32S1,
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(RtpPacket, _impl_.probe_cluster_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bool incoming = 1;
    {PROTOBUF_FIELD_OFFSET(RtpPacket, _impl_.incoming_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional .webrtc.rtclog.MediaType type = 2 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(RtpPacket, _impl_.type_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional uint32 packet_length = 3;
    {PROTOBUF_FIELD_OFFSET(RtpPacket, _impl_.packet_length_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bytes header = 4;
    {PROTOBUF_FIELD_OFFSET(RtpPacket, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional int32 probe_cluster_id = 5;
    {PROTOBUF_FIELD_OFFSET(RtpPacket, _impl_.probe_cluster_id_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }}, {{
    {0, 4},
  }}, {{
  }},
};

::uint8_t* RtpPacket::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog.RtpPacket)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool incoming = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_incoming(), target);
  }

  // optional .webrtc.rtclog.MediaType type = 2 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_type(), target);
  }

  // optional uint32 packet_length = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_packet_length(), target);
  }

  // optional bytes header = 4;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_header();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  // optional int32 probe_cluster_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_probe_cluster_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog.RtpPacket)
  return target;
}

::size_t RtpPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog.RtpPacket)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes header = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_header());
    }

    // optional bool incoming = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

    // optional .webrtc.rtclog.MediaType type = 2 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional uint32 packet_length = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_packet_length());
    }

    // optional int32 probe_cluster_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_probe_cluster_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void RtpPacket::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RtpPacket*>(
      &from));
}

void RtpPacket::MergeFrom(const RtpPacket& from) {
  RtpPacket* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog.RtpPacket)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_header(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.incoming_ = from._impl_.incoming_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.packet_length_ = from._impl_.packet_length_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.probe_cluster_id_ = from._impl_.probe_cluster_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RtpPacket::CopyFrom(const RtpPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog.RtpPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RtpPacket::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RtpPacket::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RtpPacket::InternalSwap(RtpPacket* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.header_, &other->_impl_.header_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RtpPacket, _impl_.probe_cluster_id_)
      + sizeof(RtpPacket::_impl_.probe_cluster_id_)
      - PROTOBUF_FIELD_OFFSET(RtpPacket, _impl_.incoming_)>(
          reinterpret_cast<char*>(&_impl_.incoming_),
          reinterpret_cast<char*>(&other->_impl_.incoming_));
}

std::string RtpPacket::GetTypeName() const {
  return "webrtc.rtclog.RtpPacket";
}

// ===================================================================

class RtcpPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<RtcpPacket>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RtcpPacket, _impl_._has_bits_);
  static void set_has_incoming(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_packet_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RtcpPacket::RtcpPacket(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog.RtcpPacket)
}
inline PROTOBUF_NDEBUG_INLINE RtcpPacket::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        packet_data_(arena, from.packet_data_) {}

RtcpPacket::RtcpPacket(
    ::google::protobuf::Arena* arena,
    const RtcpPacket& from)
    : ::google::protobuf::MessageLite(arena) {
  RtcpPacket* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, incoming_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, incoming_),
           offsetof(Impl_, type_) -
               offsetof(Impl_, incoming_) +
               sizeof(Impl_::type_));

  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog.RtcpPacket)
}
inline PROTOBUF_NDEBUG_INLINE RtcpPacket::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        packet_data_(arena) {}

inline void RtcpPacket::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, incoming_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, incoming_) +
               sizeof(Impl_::type_));
}
RtcpPacket::~RtcpPacket() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog.RtcpPacket)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void RtcpPacket::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.packet_data_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RtcpPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog.RtcpPacket)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.packet_data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.incoming_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.incoming_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RtcpPacket::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> RtcpPacket::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RtcpPacket, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RtcpPacket_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional bool incoming = 1;
    {::_pbi::TcParser::FastV8S1,
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(RtcpPacket, _impl_.incoming_)}},
    // optional .webrtc.rtclog.MediaType type = 2 [deprecated = true];
    {::_pbi::TcParser::FastEr0S1,
     {16, 2, 3, PROTOBUF_FIELD_OFFSET(RtcpPacket, _impl_.type_)}},
    // optional bytes packet_data = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(RtcpPacket, _impl_.packet_data_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bool incoming = 1;
    {PROTOBUF_FIELD_OFFSET(RtcpPacket, _impl_.incoming_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional .webrtc.rtclog.MediaType type = 2 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(RtcpPacket, _impl_.type_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional bytes packet_data = 3;
    {PROTOBUF_FIELD_OFFSET(RtcpPacket, _impl_.packet_data_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }}, {{
    {0, 4},
  }}, {{
  }},
};

::uint8_t* RtcpPacket::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog.RtcpPacket)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool incoming = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_incoming(), target);
  }

  // optional .webrtc.rtclog.MediaType type = 2 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_type(), target);
  }

  // optional bytes packet_data = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_packet_data();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog.RtcpPacket)
  return target;
}

::size_t RtcpPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog.RtcpPacket)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes packet_data = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_packet_data());
    }

    // optional bool incoming = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

    // optional .webrtc.rtclog.MediaType type = 2 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void RtcpPacket::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RtcpPacket*>(
      &from));
}

void RtcpPacket::MergeFrom(const RtcpPacket& from) {
  RtcpPacket* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog.RtcpPacket)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_packet_data(from._internal_packet_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.incoming_ = from._impl_.incoming_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RtcpPacket::CopyFrom(const RtcpPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog.RtcpPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RtcpPacket::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RtcpPacket::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RtcpPacket::InternalSwap(RtcpPacket* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.packet_data_, &other->_impl_.packet_data_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RtcpPacket, _impl_.type_)
      + sizeof(RtcpPacket::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(RtcpPacket, _impl_.incoming_)>(
          reinterpret_cast<char*>(&_impl_.incoming_),
          reinterpret_cast<char*>(&other->_impl_.incoming_));
}

std::string RtcpPacket::GetTypeName() const {
  return "webrtc.rtclog.RtcpPacket";
}

// ===================================================================

class AudioPlayoutEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<AudioPlayoutEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AudioPlayoutEvent, _impl_._has_bits_);
  static void set_has_local_ssrc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AudioPlayoutEvent::AudioPlayoutEvent(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog.AudioPlayoutEvent)
}
AudioPlayoutEvent::AudioPlayoutEvent(
    ::google::protobuf::Arena* arena, const AudioPlayoutEvent& from)
    : AudioPlayoutEvent(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE AudioPlayoutEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AudioPlayoutEvent::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.local_ssrc_ = {};
}
AudioPlayoutEvent::~AudioPlayoutEvent() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog.AudioPlayoutEvent)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void AudioPlayoutEvent::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AudioPlayoutEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog.AudioPlayoutEvent)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.local_ssrc_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AudioPlayoutEvent::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> AudioPlayoutEvent::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AudioPlayoutEvent, _impl_._has_bits_),
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967293,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AudioPlayoutEvent_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // optional uint32 local_ssrc = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 0, 0, PROTOBUF_FIELD_OFFSET(AudioPlayoutEvent, _impl_.local_ssrc_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 local_ssrc = 2;
    {PROTOBUF_FIELD_OFFSET(AudioPlayoutEvent, _impl_.local_ssrc_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* AudioPlayoutEvent::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog.AudioPlayoutEvent)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 local_ssrc = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_local_ssrc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog.AudioPlayoutEvent)
  return target;
}

::size_t AudioPlayoutEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog.AudioPlayoutEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 local_ssrc = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_local_ssrc());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void AudioPlayoutEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AudioPlayoutEvent*>(
      &from));
}

void AudioPlayoutEvent::MergeFrom(const AudioPlayoutEvent& from) {
  AudioPlayoutEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog.AudioPlayoutEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_local_ssrc(from._internal_local_ssrc());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AudioPlayoutEvent::CopyFrom(const AudioPlayoutEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog.AudioPlayoutEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AudioPlayoutEvent::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AudioPlayoutEvent::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AudioPlayoutEvent::InternalSwap(AudioPlayoutEvent* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
        swap(_impl_.local_ssrc_, other->_impl_.local_ssrc_);
}

std::string AudioPlayoutEvent::GetTypeName() const {
  return "webrtc.rtclog.AudioPlayoutEvent";
}

// ===================================================================

class LossBasedBweUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<LossBasedBweUpdate>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LossBasedBweUpdate, _impl_._has_bits_);
  static void set_has_bitrate_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fraction_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_total_packets(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LossBasedBweUpdate::LossBasedBweUpdate(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog.LossBasedBweUpdate)
}
LossBasedBweUpdate::LossBasedBweUpdate(
    ::google::protobuf::Arena* arena, const LossBasedBweUpdate& from)
    : LossBasedBweUpdate(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE LossBasedBweUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void LossBasedBweUpdate::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, bitrate_bps_),
           0,
           offsetof(Impl_, total_packets_) -
               offsetof(Impl_, bitrate_bps_) +
               sizeof(Impl_::total_packets_));
}
LossBasedBweUpdate::~LossBasedBweUpdate() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog.LossBasedBweUpdate)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void LossBasedBweUpdate::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void LossBasedBweUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog.LossBasedBweUpdate)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.bitrate_bps_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.total_packets_) -
        reinterpret_cast<char*>(&_impl_.bitrate_bps_)) + sizeof(_impl_.total_packets_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LossBasedBweUpdate::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> LossBasedBweUpdate::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LossBasedBweUpdate, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_LossBasedBweUpdate_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional int32 bitrate_bps = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(LossBasedBweUpdate, _impl_.bitrate_bps_)}},
    // optional uint32 fraction_loss = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(LossBasedBweUpdate, _impl_.fraction_loss_)}},
    // optional int32 total_packets = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(LossBasedBweUpdate, _impl_.total_packets_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 bitrate_bps = 1;
    {PROTOBUF_FIELD_OFFSET(LossBasedBweUpdate, _impl_.bitrate_bps_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional uint32 fraction_loss = 2;
    {PROTOBUF_FIELD_OFFSET(LossBasedBweUpdate, _impl_.fraction_loss_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional int32 total_packets = 3;
    {PROTOBUF_FIELD_OFFSET(LossBasedBweUpdate, _impl_.total_packets_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* LossBasedBweUpdate::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog.LossBasedBweUpdate)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 bitrate_bps = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_bitrate_bps(), target);
  }

  // optional uint32 fraction_loss = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_fraction_loss(), target);
  }

  // optional int32 total_packets = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_total_packets(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog.LossBasedBweUpdate)
  return target;
}

::size_t LossBasedBweUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog.LossBasedBweUpdate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 bitrate_bps = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_bitrate_bps());
    }

    // optional uint32 fraction_loss = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_fraction_loss());
    }

    // optional int32 total_packets = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_total_packets());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void LossBasedBweUpdate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LossBasedBweUpdate*>(
      &from));
}

void LossBasedBweUpdate::MergeFrom(const LossBasedBweUpdate& from) {
  LossBasedBweUpdate* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog.LossBasedBweUpdate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.bitrate_bps_ = from._impl_.bitrate_bps_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.fraction_loss_ = from._impl_.fraction_loss_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.total_packets_ = from._impl_.total_packets_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LossBasedBweUpdate::CopyFrom(const LossBasedBweUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog.LossBasedBweUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LossBasedBweUpdate::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* LossBasedBweUpdate::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LossBasedBweUpdate::InternalSwap(LossBasedBweUpdate* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LossBasedBweUpdate, _impl_.total_packets_)
      + sizeof(LossBasedBweUpdate::_impl_.total_packets_)
      - PROTOBUF_FIELD_OFFSET(LossBasedBweUpdate, _impl_.bitrate_bps_)>(
          reinterpret_cast<char*>(&_impl_.bitrate_bps_),
          reinterpret_cast<char*>(&other->_impl_.bitrate_bps_));
}

std::string LossBasedBweUpdate::GetTypeName() const {
  return "webrtc.rtclog.LossBasedBweUpdate";
}

// ===================================================================

class DelayBasedBweUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<DelayBasedBweUpdate>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DelayBasedBweUpdate, _impl_._has_bits_);
  static void set_has_bitrate_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_detector_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DelayBasedBweUpdate::DelayBasedBweUpdate(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog.DelayBasedBweUpdate)
}
DelayBasedBweUpdate::DelayBasedBweUpdate(
    ::google::protobuf::Arena* arena, const DelayBasedBweUpdate& from)
    : DelayBasedBweUpdate(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE DelayBasedBweUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void DelayBasedBweUpdate::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, bitrate_bps_),
           0,
           offsetof(Impl_, detector_state_) -
               offsetof(Impl_, bitrate_bps_) +
               sizeof(Impl_::detector_state_));
}
DelayBasedBweUpdate::~DelayBasedBweUpdate() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog.DelayBasedBweUpdate)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void DelayBasedBweUpdate::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void DelayBasedBweUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog.DelayBasedBweUpdate)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.bitrate_bps_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.detector_state_) -
        reinterpret_cast<char*>(&_impl_.bitrate_bps_)) + sizeof(_impl_.detector_state_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DelayBasedBweUpdate::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> DelayBasedBweUpdate::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DelayBasedBweUpdate, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_DelayBasedBweUpdate_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // optional .webrtc.rtclog.DelayBasedBweUpdate.DetectorState detector_state = 2;
    {::_pbi::TcParser::FastEr0S1,
     {16, 1, 2, PROTOBUF_FIELD_OFFSET(DelayBasedBweUpdate, _impl_.detector_state_)}},
    // optional int32 bitrate_bps = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(DelayBasedBweUpdate, _impl_.bitrate_bps_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 bitrate_bps = 1;
    {PROTOBUF_FIELD_OFFSET(DelayBasedBweUpdate, _impl_.bitrate_bps_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional .webrtc.rtclog.DelayBasedBweUpdate.DetectorState detector_state = 2;
    {PROTOBUF_FIELD_OFFSET(DelayBasedBweUpdate, _impl_.detector_state_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
  }}, {{
    {0, 3},
  }}, {{
  }},
};

::uint8_t* DelayBasedBweUpdate::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog.DelayBasedBweUpdate)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 bitrate_bps = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_bitrate_bps(), target);
  }

  // optional .webrtc.rtclog.DelayBasedBweUpdate.DetectorState detector_state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_detector_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog.DelayBasedBweUpdate)
  return target;
}

::size_t DelayBasedBweUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog.DelayBasedBweUpdate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 bitrate_bps = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_bitrate_bps());
    }

    // optional .webrtc.rtclog.DelayBasedBweUpdate.DetectorState detector_state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_detector_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void DelayBasedBweUpdate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DelayBasedBweUpdate*>(
      &from));
}

void DelayBasedBweUpdate::MergeFrom(const DelayBasedBweUpdate& from) {
  DelayBasedBweUpdate* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog.DelayBasedBweUpdate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.bitrate_bps_ = from._impl_.bitrate_bps_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.detector_state_ = from._impl_.detector_state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DelayBasedBweUpdate::CopyFrom(const DelayBasedBweUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog.DelayBasedBweUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DelayBasedBweUpdate::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* DelayBasedBweUpdate::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void DelayBasedBweUpdate::InternalSwap(DelayBasedBweUpdate* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DelayBasedBweUpdate, _impl_.detector_state_)
      + sizeof(DelayBasedBweUpdate::_impl_.detector_state_)
      - PROTOBUF_FIELD_OFFSET(DelayBasedBweUpdate, _impl_.bitrate_bps_)>(
          reinterpret_cast<char*>(&_impl_.bitrate_bps_),
          reinterpret_cast<char*>(&other->_impl_.bitrate_bps_));
}

std::string DelayBasedBweUpdate::GetTypeName() const {
  return "webrtc.rtclog.DelayBasedBweUpdate";
}

// ===================================================================

class VideoReceiveConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoReceiveConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(VideoReceiveConfig, _impl_._has_bits_);
  static void set_has_remote_ssrc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_local_ssrc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rtcp_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_remb(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

VideoReceiveConfig::VideoReceiveConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog.VideoReceiveConfig)
}
inline PROTOBUF_NDEBUG_INLINE VideoReceiveConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        rtx_map_{visibility, arena, from.rtx_map_},
        header_extensions_{visibility, arena, from.header_extensions_},
        decoders_{visibility, arena, from.decoders_} {}

VideoReceiveConfig::VideoReceiveConfig(
    ::google::protobuf::Arena* arena,
    const VideoReceiveConfig& from)
    : ::google::protobuf::MessageLite(arena) {
  VideoReceiveConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, remote_ssrc_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, remote_ssrc_),
           offsetof(Impl_, rtcp_mode_) -
               offsetof(Impl_, remote_ssrc_) +
               sizeof(Impl_::rtcp_mode_));

  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog.VideoReceiveConfig)
}
inline PROTOBUF_NDEBUG_INLINE VideoReceiveConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        rtx_map_{visibility, arena},
        header_extensions_{visibility, arena},
        decoders_{visibility, arena},
        rtcp_mode_{static_cast< ::webrtc::rtclog::VideoReceiveConfig_RtcpMode >(1)} {}

inline void VideoReceiveConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, remote_ssrc_),
           0,
           offsetof(Impl_, remb_) -
               offsetof(Impl_, remote_ssrc_) +
               sizeof(Impl_::remb_));
}
VideoReceiveConfig::~VideoReceiveConfig() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog.VideoReceiveConfig)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void VideoReceiveConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void VideoReceiveConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog.VideoReceiveConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rtx_map_.Clear();
  _impl_.header_extensions_.Clear();
  _impl_.decoders_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.remote_ssrc_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.remb_) -
        reinterpret_cast<char*>(&_impl_.remote_ssrc_)) + sizeof(_impl_.remb_));
    _impl_.rtcp_mode_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* VideoReceiveConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 4, 0, 2> VideoReceiveConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(VideoReceiveConfig, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_VideoReceiveConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 remote_ssrc = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(VideoReceiveConfig, _impl_.remote_ssrc_)}},
    // optional uint32 local_ssrc = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(VideoReceiveConfig, _impl_.local_ssrc_)}},
    // optional .webrtc.rtclog.VideoReceiveConfig.RtcpMode rtcp_mode = 3;
    {::_pbi::TcParser::FastEr1S1,
     {24, 3, 2, PROTOBUF_FIELD_OFFSET(VideoReceiveConfig, _impl_.rtcp_mode_)}},
    // optional bool remb = 4;
    {::_pbi::TcParser::FastV8S1,
     {32, 2, 0, PROTOBUF_FIELD_OFFSET(VideoReceiveConfig, _impl_.remb_)}},
    // repeated .webrtc.rtclog.RtxMap rtx_map = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 1, PROTOBUF_FIELD_OFFSET(VideoReceiveConfig, _impl_.rtx_map_)}},
    // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 2, PROTOBUF_FIELD_OFFSET(VideoReceiveConfig, _impl_.header_extensions_)}},
    // repeated .webrtc.rtclog.DecoderConfig decoders = 7;
    {::_pbi::TcParser::FastMtR1,
     {58, 63, 3, PROTOBUF_FIELD_OFFSET(VideoReceiveConfig, _impl_.decoders_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 remote_ssrc = 1;
    {PROTOBUF_FIELD_OFFSET(VideoReceiveConfig, _impl_.remote_ssrc_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 local_ssrc = 2;
    {PROTOBUF_FIELD_OFFSET(VideoReceiveConfig, _impl_.local_ssrc_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .webrtc.rtclog.VideoReceiveConfig.RtcpMode rtcp_mode = 3;
    {PROTOBUF_FIELD_OFFSET(VideoReceiveConfig, _impl_.rtcp_mode_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional bool remb = 4;
    {PROTOBUF_FIELD_OFFSET(VideoReceiveConfig, _impl_.remb_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // repeated .webrtc.rtclog.RtxMap rtx_map = 5;
    {PROTOBUF_FIELD_OFFSET(VideoReceiveConfig, _impl_.rtx_map_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 6;
    {PROTOBUF_FIELD_OFFSET(VideoReceiveConfig, _impl_.header_extensions_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .webrtc.rtclog.DecoderConfig decoders = 7;
    {PROTOBUF_FIELD_OFFSET(VideoReceiveConfig, _impl_.decoders_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {1, 2},
    {::_pbi::TcParser::GetTable<::webrtc::rtclog::RtxMap>()},
    {::_pbi::TcParser::GetTable<::webrtc::rtclog::RtpHeaderExtension>()},
    {::_pbi::TcParser::GetTable<::webrtc::rtclog::DecoderConfig>()},
  }}, {{
  }},
};

::uint8_t* VideoReceiveConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog.VideoReceiveConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 remote_ssrc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_remote_ssrc(), target);
  }

  // optional uint32 local_ssrc = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_local_ssrc(), target);
  }

  // optional .webrtc.rtclog.VideoReceiveConfig.RtcpMode rtcp_mode = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_rtcp_mode(), target);
  }

  // optional bool remb = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_remb(), target);
  }

  // repeated .webrtc.rtclog.RtxMap rtx_map = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rtx_map_size()); i < n; i++) {
    const auto& repfield = this->_internal_rtx_map().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_header_extensions_size()); i < n; i++) {
    const auto& repfield = this->_internal_header_extensions().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .webrtc.rtclog.DecoderConfig decoders = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_decoders_size()); i < n; i++) {
    const auto& repfield = this->_internal_decoders().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog.VideoReceiveConfig)
  return target;
}

::size_t VideoReceiveConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog.VideoReceiveConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .webrtc.rtclog.RtxMap rtx_map = 5;
  total_size += 1UL * this->_internal_rtx_map_size();
  for (const auto& msg : this->_internal_rtx_map()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 6;
  total_size += 1UL * this->_internal_header_extensions_size();
  for (const auto& msg : this->_internal_header_extensions()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .webrtc.rtclog.DecoderConfig decoders = 7;
  total_size += 1UL * this->_internal_decoders_size();
  for (const auto& msg : this->_internal_decoders()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 remote_ssrc = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_remote_ssrc());
    }

    // optional uint32 local_ssrc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_local_ssrc());
    }

    // optional bool remb = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }

    // optional .webrtc.rtclog.VideoReceiveConfig.RtcpMode rtcp_mode = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_rtcp_mode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void VideoReceiveConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VideoReceiveConfig*>(
      &from));
}

void VideoReceiveConfig::MergeFrom(const VideoReceiveConfig& from) {
  VideoReceiveConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog.VideoReceiveConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_rtx_map()->MergeFrom(
      from._internal_rtx_map());
  _this->_internal_mutable_header_extensions()->MergeFrom(
      from._internal_header_extensions());
  _this->_internal_mutable_decoders()->MergeFrom(
      from._internal_decoders());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.remote_ssrc_ = from._impl_.remote_ssrc_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.local_ssrc_ = from._impl_.local_ssrc_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.remb_ = from._impl_.remb_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.rtcp_mode_ = from._impl_.rtcp_mode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VideoReceiveConfig::CopyFrom(const VideoReceiveConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog.VideoReceiveConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool VideoReceiveConfig::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* VideoReceiveConfig::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void VideoReceiveConfig::InternalSwap(VideoReceiveConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.rtx_map_.InternalSwap(&other->_impl_.rtx_map_);
  _impl_.header_extensions_.InternalSwap(&other->_impl_.header_extensions_);
  _impl_.decoders_.InternalSwap(&other->_impl_.decoders_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoReceiveConfig, _impl_.rtcp_mode_)
      + sizeof(VideoReceiveConfig::_impl_.rtcp_mode_)
      - PROTOBUF_FIELD_OFFSET(VideoReceiveConfig, _impl_.remote_ssrc_)>(
          reinterpret_cast<char*>(&_impl_.remote_ssrc_),
          reinterpret_cast<char*>(&other->_impl_.remote_ssrc_));
}

std::string VideoReceiveConfig::GetTypeName() const {
  return "webrtc.rtclog.VideoReceiveConfig";
}

// ===================================================================

class DecoderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<DecoderConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DecoderConfig, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_payload_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DecoderConfig::DecoderConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog.DecoderConfig)
}
inline PROTOBUF_NDEBUG_INLINE DecoderConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_) {}

DecoderConfig::DecoderConfig(
    ::google::protobuf::Arena* arena,
    const DecoderConfig& from)
    : ::google::protobuf::MessageLite(arena) {
  DecoderConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.payload_type_ = from._impl_.payload_type_;

  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog.DecoderConfig)
}
inline PROTOBUF_NDEBUG_INLINE DecoderConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        name_(arena) {}

inline void DecoderConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.payload_type_ = {};
}
DecoderConfig::~DecoderConfig() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog.DecoderConfig)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void DecoderConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void DecoderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog.DecoderConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.payload_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DecoderConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> DecoderConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DecoderConfig, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_DecoderConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // optional int32 payload_type = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(DecoderConfig, _impl_.payload_type_)}},
    // optional string name = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(DecoderConfig, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string name = 1;
    {PROTOBUF_FIELD_OFFSET(DecoderConfig, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional int32 payload_type = 2;
    {PROTOBUF_FIELD_OFFSET(DecoderConfig, _impl_.payload_type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* DecoderConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog.DecoderConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional int32 payload_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_payload_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog.DecoderConfig)
  return target;
}

::size_t DecoderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog.DecoderConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional int32 payload_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_payload_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void DecoderConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DecoderConfig*>(
      &from));
}

void DecoderConfig::MergeFrom(const DecoderConfig& from) {
  DecoderConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog.DecoderConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.payload_type_ = from._impl_.payload_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DecoderConfig::CopyFrom(const DecoderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog.DecoderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DecoderConfig::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* DecoderConfig::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void DecoderConfig::InternalSwap(DecoderConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
        swap(_impl_.payload_type_, other->_impl_.payload_type_);
}

std::string DecoderConfig::GetTypeName() const {
  return "webrtc.rtclog.DecoderConfig";
}

// ===================================================================

class RtpHeaderExtension::_Internal {
 public:
  using HasBits = decltype(std::declval<RtpHeaderExtension>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RtpHeaderExtension, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RtpHeaderExtension::RtpHeaderExtension(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog.RtpHeaderExtension)
}
inline PROTOBUF_NDEBUG_INLINE RtpHeaderExtension::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_) {}

RtpHeaderExtension::RtpHeaderExtension(
    ::google::protobuf::Arena* arena,
    const RtpHeaderExtension& from)
    : ::google::protobuf::MessageLite(arena) {
  RtpHeaderExtension* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog.RtpHeaderExtension)
}
inline PROTOBUF_NDEBUG_INLINE RtpHeaderExtension::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        name_(arena) {}

inline void RtpHeaderExtension::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.id_ = {};
}
RtpHeaderExtension::~RtpHeaderExtension() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog.RtpHeaderExtension)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void RtpHeaderExtension::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RtpHeaderExtension::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog.RtpHeaderExtension)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RtpHeaderExtension::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> RtpHeaderExtension::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RtpHeaderExtension, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_RtpHeaderExtension_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // optional int32 id = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(RtpHeaderExtension, _impl_.id_)}},
    // optional string name = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RtpHeaderExtension, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string name = 1;
    {PROTOBUF_FIELD_OFFSET(RtpHeaderExtension, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional int32 id = 2;
    {PROTOBUF_FIELD_OFFSET(RtpHeaderExtension, _impl_.id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* RtpHeaderExtension::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog.RtpHeaderExtension)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog.RtpHeaderExtension)
  return target;
}

::size_t RtpHeaderExtension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog.RtpHeaderExtension)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional int32 id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void RtpHeaderExtension::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RtpHeaderExtension*>(
      &from));
}

void RtpHeaderExtension::MergeFrom(const RtpHeaderExtension& from) {
  RtpHeaderExtension* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog.RtpHeaderExtension)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RtpHeaderExtension::CopyFrom(const RtpHeaderExtension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog.RtpHeaderExtension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RtpHeaderExtension::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RtpHeaderExtension::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RtpHeaderExtension::InternalSwap(RtpHeaderExtension* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
        swap(_impl_.id_, other->_impl_.id_);
}

std::string RtpHeaderExtension::GetTypeName() const {
  return "webrtc.rtclog.RtpHeaderExtension";
}

// ===================================================================

class RtxConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<RtxConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RtxConfig, _impl_._has_bits_);
  static void set_has_rtx_ssrc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rtx_payload_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RtxConfig::RtxConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog.RtxConfig)
}
RtxConfig::RtxConfig(
    ::google::protobuf::Arena* arena, const RtxConfig& from)
    : RtxConfig(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE RtxConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RtxConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, rtx_ssrc_),
           0,
           offsetof(Impl_, rtx_payload_type_) -
               offsetof(Impl_, rtx_ssrc_) +
               sizeof(Impl_::rtx_payload_type_));
}
RtxConfig::~RtxConfig() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog.RtxConfig)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void RtxConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RtxConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog.RtxConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.rtx_ssrc_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.rtx_payload_type_) -
        reinterpret_cast<char*>(&_impl_.rtx_ssrc_)) + sizeof(_impl_.rtx_payload_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RtxConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> RtxConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RtxConfig, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_RtxConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // optional int32 rtx_payload_type = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(RtxConfig, _impl_.rtx_payload_type_)}},
    // optional uint32 rtx_ssrc = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(RtxConfig, _impl_.rtx_ssrc_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 rtx_ssrc = 1;
    {PROTOBUF_FIELD_OFFSET(RtxConfig, _impl_.rtx_ssrc_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional int32 rtx_payload_type = 2;
    {PROTOBUF_FIELD_OFFSET(RtxConfig, _impl_.rtx_payload_type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* RtxConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog.RtxConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 rtx_ssrc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_rtx_ssrc(), target);
  }

  // optional int32 rtx_payload_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_rtx_payload_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog.RtxConfig)
  return target;
}

::size_t RtxConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog.RtxConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 rtx_ssrc = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_rtx_ssrc());
    }

    // optional int32 rtx_payload_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_rtx_payload_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void RtxConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RtxConfig*>(
      &from));
}

void RtxConfig::MergeFrom(const RtxConfig& from) {
  RtxConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog.RtxConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.rtx_ssrc_ = from._impl_.rtx_ssrc_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.rtx_payload_type_ = from._impl_.rtx_payload_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RtxConfig::CopyFrom(const RtxConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog.RtxConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RtxConfig::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RtxConfig::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RtxConfig::InternalSwap(RtxConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RtxConfig, _impl_.rtx_payload_type_)
      + sizeof(RtxConfig::_impl_.rtx_payload_type_)
      - PROTOBUF_FIELD_OFFSET(RtxConfig, _impl_.rtx_ssrc_)>(
          reinterpret_cast<char*>(&_impl_.rtx_ssrc_),
          reinterpret_cast<char*>(&other->_impl_.rtx_ssrc_));
}

std::string RtxConfig::GetTypeName() const {
  return "webrtc.rtclog.RtxConfig";
}

// ===================================================================

class RtxMap::_Internal {
 public:
  using HasBits = decltype(std::declval<RtxMap>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RtxMap, _impl_._has_bits_);
  static void set_has_payload_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::webrtc::rtclog::RtxConfig& config(const RtxMap* msg);
  static void set_has_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::webrtc::rtclog::RtxConfig& RtxMap::_Internal::config(const RtxMap* msg) {
  return *msg->_impl_.config_;
}
RtxMap::RtxMap(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog.RtxMap)
}
inline PROTOBUF_NDEBUG_INLINE RtxMap::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RtxMap::RtxMap(
    ::google::protobuf::Arena* arena,
    const RtxMap& from)
    : ::google::protobuf::MessageLite(arena) {
  RtxMap* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.config_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::webrtc::rtclog::RtxConfig>(arena, *from._impl_.config_)
                : nullptr;
  _impl_.payload_type_ = from._impl_.payload_type_;

  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog.RtxMap)
}
inline PROTOBUF_NDEBUG_INLINE RtxMap::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RtxMap::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, config_),
           0,
           offsetof(Impl_, payload_type_) -
               offsetof(Impl_, config_) +
               sizeof(Impl_::payload_type_));
}
RtxMap::~RtxMap() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog.RtxMap)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void RtxMap::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.config_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RtxMap::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog.RtxMap)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.config_ != nullptr);
    _impl_.config_->Clear();
  }
  _impl_.payload_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RtxMap::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> RtxMap::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RtxMap, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RtxMap_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // optional .webrtc.rtclog.RtxConfig config = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(RtxMap, _impl_.config_)}},
    // optional int32 payload_type = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(RtxMap, _impl_.payload_type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 payload_type = 1;
    {PROTOBUF_FIELD_OFFSET(RtxMap, _impl_.payload_type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional .webrtc.rtclog.RtxConfig config = 2;
    {PROTOBUF_FIELD_OFFSET(RtxMap, _impl_.config_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::webrtc::rtclog::RtxConfig>()},
  }}, {{
  }},
};

::uint8_t* RtxMap::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog.RtxMap)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 payload_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_payload_type(), target);
  }

  // optional .webrtc.rtclog.RtxConfig config = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::config(this),
        _Internal::config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog.RtxMap)
  return target;
}

::size_t RtxMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog.RtxMap)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .webrtc.rtclog.RtxConfig config = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.config_);
    }

    // optional int32 payload_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_payload_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void RtxMap::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RtxMap*>(
      &from));
}

void RtxMap::MergeFrom(const RtxMap& from) {
  RtxMap* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog.RtxMap)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_config()->::webrtc::rtclog::RtxConfig::MergeFrom(
          from._internal_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.payload_type_ = from._impl_.payload_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RtxMap::CopyFrom(const RtxMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog.RtxMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RtxMap::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RtxMap::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RtxMap::InternalSwap(RtxMap* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RtxMap, _impl_.payload_type_)
      + sizeof(RtxMap::_impl_.payload_type_)
      - PROTOBUF_FIELD_OFFSET(RtxMap, _impl_.config_)>(
          reinterpret_cast<char*>(&_impl_.config_),
          reinterpret_cast<char*>(&other->_impl_.config_));
}

std::string RtxMap::GetTypeName() const {
  return "webrtc.rtclog.RtxMap";
}

// ===================================================================

class VideoSendConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoSendConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(VideoSendConfig, _impl_._has_bits_);
  static void set_has_rtx_payload_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::webrtc::rtclog::EncoderConfig& encoder(const VideoSendConfig* msg);
  static void set_has_encoder(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::webrtc::rtclog::EncoderConfig& VideoSendConfig::_Internal::encoder(const VideoSendConfig* msg) {
  return *msg->_impl_.encoder_;
}
VideoSendConfig::VideoSendConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog.VideoSendConfig)
}
inline PROTOBUF_NDEBUG_INLINE VideoSendConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        ssrcs_{visibility, arena, from.ssrcs_},
        header_extensions_{visibility, arena, from.header_extensions_},
        rtx_ssrcs_{visibility, arena, from.rtx_ssrcs_} {}

VideoSendConfig::VideoSendConfig(
    ::google::protobuf::Arena* arena,
    const VideoSendConfig& from)
    : ::google::protobuf::MessageLite(arena) {
  VideoSendConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.encoder_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::webrtc::rtclog::EncoderConfig>(arena, *from._impl_.encoder_)
                : nullptr;
  _impl_.rtx_payload_type_ = from._impl_.rtx_payload_type_;

  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog.VideoSendConfig)
}
inline PROTOBUF_NDEBUG_INLINE VideoSendConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        ssrcs_{visibility, arena},
        header_extensions_{visibility, arena},
        rtx_ssrcs_{visibility, arena} {}

inline void VideoSendConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, encoder_),
           0,
           offsetof(Impl_, rtx_payload_type_) -
               offsetof(Impl_, encoder_) +
               sizeof(Impl_::rtx_payload_type_));
}
VideoSendConfig::~VideoSendConfig() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog.VideoSendConfig)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void VideoSendConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.encoder_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void VideoSendConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog.VideoSendConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ssrcs_.Clear();
  _impl_.header_extensions_.Clear();
  _impl_.rtx_ssrcs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.encoder_ != nullptr);
    _impl_.encoder_->Clear();
  }
  _impl_.rtx_payload_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* VideoSendConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 2, 0, 2> VideoSendConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(VideoSendConfig, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_VideoSendConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated uint32 ssrcs = 1;
    {::_pbi::TcParser::FastV32R1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(VideoSendConfig, _impl_.ssrcs_)}},
    // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(VideoSendConfig, _impl_.header_extensions_)}},
    // repeated uint32 rtx_ssrcs = 3;
    {::_pbi::TcParser::FastV32R1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(VideoSendConfig, _impl_.rtx_ssrcs_)}},
    // optional int32 rtx_payload_type = 4;
    {::_pbi::TcParser::FastV32S1,
     {32, 1, 0, PROTOBUF_FIELD_OFFSET(VideoSendConfig, _impl_.rtx_payload_type_)}},
    // optional .webrtc.rtclog.EncoderConfig encoder = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 1, PROTOBUF_FIELD_OFFSET(VideoSendConfig, _impl_.encoder_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated uint32 ssrcs = 1;
    {PROTOBUF_FIELD_OFFSET(VideoSendConfig, _impl_.ssrcs_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUInt32)},
    // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 2;
    {PROTOBUF_FIELD_OFFSET(VideoSendConfig, _impl_.header_extensions_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated uint32 rtx_ssrcs = 3;
    {PROTOBUF_FIELD_OFFSET(VideoSendConfig, _impl_.rtx_ssrcs_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUInt32)},
    // optional int32 rtx_payload_type = 4;
    {PROTOBUF_FIELD_OFFSET(VideoSendConfig, _impl_.rtx_payload_type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional .webrtc.rtclog.EncoderConfig encoder = 5;
    {PROTOBUF_FIELD_OFFSET(VideoSendConfig, _impl_.encoder_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::webrtc::rtclog::RtpHeaderExtension>()},
    {::_pbi::TcParser::GetTable<::webrtc::rtclog::EncoderConfig>()},
  }}, {{
  }},
};

::uint8_t* VideoSendConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog.VideoSendConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated uint32 ssrcs = 1;
  for (int i = 0, n = this->_internal_ssrcs_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_ssrcs().Get(i), target);
  }

  // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_header_extensions_size()); i < n; i++) {
    const auto& repfield = this->_internal_header_extensions().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 rtx_ssrcs = 3;
  for (int i = 0, n = this->_internal_rtx_ssrcs_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_rtx_ssrcs().Get(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 rtx_payload_type = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_rtx_payload_type(), target);
  }

  // optional .webrtc.rtclog.EncoderConfig encoder = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::encoder(this),
        _Internal::encoder(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog.VideoSendConfig)
  return target;
}

::size_t VideoSendConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog.VideoSendConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 ssrcs = 1;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_ssrcs())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_ssrcs_size());
    ;
    total_size += tag_size + data_size;
  }
  // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 2;
  total_size += 1UL * this->_internal_header_extensions_size();
  for (const auto& msg : this->_internal_header_extensions()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated uint32 rtx_ssrcs = 3;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_rtx_ssrcs())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_rtx_ssrcs_size());
    ;
    total_size += tag_size + data_size;
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .webrtc.rtclog.EncoderConfig encoder = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.encoder_);
    }

    // optional int32 rtx_payload_type = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_rtx_payload_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void VideoSendConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VideoSendConfig*>(
      &from));
}

void VideoSendConfig::MergeFrom(const VideoSendConfig& from) {
  VideoSendConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog.VideoSendConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_ssrcs()->MergeFrom(from._internal_ssrcs());
  _this->_internal_mutable_header_extensions()->MergeFrom(
      from._internal_header_extensions());
  _this->_internal_mutable_rtx_ssrcs()->MergeFrom(from._internal_rtx_ssrcs());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_encoder()->::webrtc::rtclog::EncoderConfig::MergeFrom(
          from._internal_encoder());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.rtx_payload_type_ = from._impl_.rtx_payload_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VideoSendConfig::CopyFrom(const VideoSendConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog.VideoSendConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool VideoSendConfig::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* VideoSendConfig::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void VideoSendConfig::InternalSwap(VideoSendConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.ssrcs_.InternalSwap(&other->_impl_.ssrcs_);
  _impl_.header_extensions_.InternalSwap(&other->_impl_.header_extensions_);
  _impl_.rtx_ssrcs_.InternalSwap(&other->_impl_.rtx_ssrcs_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoSendConfig, _impl_.rtx_payload_type_)
      + sizeof(VideoSendConfig::_impl_.rtx_payload_type_)
      - PROTOBUF_FIELD_OFFSET(VideoSendConfig, _impl_.encoder_)>(
          reinterpret_cast<char*>(&_impl_.encoder_),
          reinterpret_cast<char*>(&other->_impl_.encoder_));
}

std::string VideoSendConfig::GetTypeName() const {
  return "webrtc.rtclog.VideoSendConfig";
}

// ===================================================================

class EncoderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<EncoderConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EncoderConfig, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_payload_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

EncoderConfig::EncoderConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog.EncoderConfig)
}
inline PROTOBUF_NDEBUG_INLINE EncoderConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_) {}

EncoderConfig::EncoderConfig(
    ::google::protobuf::Arena* arena,
    const EncoderConfig& from)
    : ::google::protobuf::MessageLite(arena) {
  EncoderConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.payload_type_ = from._impl_.payload_type_;

  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog.EncoderConfig)
}
inline PROTOBUF_NDEBUG_INLINE EncoderConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        name_(arena) {}

inline void EncoderConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.payload_type_ = {};
}
EncoderConfig::~EncoderConfig() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog.EncoderConfig)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void EncoderConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EncoderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog.EncoderConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.payload_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EncoderConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> EncoderConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EncoderConfig, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_EncoderConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // optional int32 payload_type = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(EncoderConfig, _impl_.payload_type_)}},
    // optional string name = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(EncoderConfig, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string name = 1;
    {PROTOBUF_FIELD_OFFSET(EncoderConfig, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional int32 payload_type = 2;
    {PROTOBUF_FIELD_OFFSET(EncoderConfig, _impl_.payload_type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* EncoderConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog.EncoderConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional int32 payload_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_payload_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog.EncoderConfig)
  return target;
}

::size_t EncoderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog.EncoderConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional int32 payload_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_payload_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void EncoderConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EncoderConfig*>(
      &from));
}

void EncoderConfig::MergeFrom(const EncoderConfig& from) {
  EncoderConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog.EncoderConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.payload_type_ = from._impl_.payload_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EncoderConfig::CopyFrom(const EncoderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog.EncoderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EncoderConfig::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* EncoderConfig::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EncoderConfig::InternalSwap(EncoderConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
        swap(_impl_.payload_type_, other->_impl_.payload_type_);
}

std::string EncoderConfig::GetTypeName() const {
  return "webrtc.rtclog.EncoderConfig";
}

// ===================================================================

class AudioReceiveConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<AudioReceiveConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AudioReceiveConfig, _impl_._has_bits_);
  static void set_has_remote_ssrc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_local_ssrc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AudioReceiveConfig::AudioReceiveConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog.AudioReceiveConfig)
}
inline PROTOBUF_NDEBUG_INLINE AudioReceiveConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        header_extensions_{visibility, arena, from.header_extensions_} {}

AudioReceiveConfig::AudioReceiveConfig(
    ::google::protobuf::Arena* arena,
    const AudioReceiveConfig& from)
    : ::google::protobuf::MessageLite(arena) {
  AudioReceiveConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, remote_ssrc_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, remote_ssrc_),
           offsetof(Impl_, local_ssrc_) -
               offsetof(Impl_, remote_ssrc_) +
               sizeof(Impl_::local_ssrc_));

  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog.AudioReceiveConfig)
}
inline PROTOBUF_NDEBUG_INLINE AudioReceiveConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        header_extensions_{visibility, arena} {}

inline void AudioReceiveConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, remote_ssrc_),
           0,
           offsetof(Impl_, local_ssrc_) -
               offsetof(Impl_, remote_ssrc_) +
               sizeof(Impl_::local_ssrc_));
}
AudioReceiveConfig::~AudioReceiveConfig() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog.AudioReceiveConfig)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void AudioReceiveConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AudioReceiveConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog.AudioReceiveConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.header_extensions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.remote_ssrc_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.local_ssrc_) -
        reinterpret_cast<char*>(&_impl_.remote_ssrc_)) + sizeof(_impl_.local_ssrc_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AudioReceiveConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> AudioReceiveConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AudioReceiveConfig, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AudioReceiveConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 remote_ssrc = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(AudioReceiveConfig, _impl_.remote_ssrc_)}},
    // optional uint32 local_ssrc = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(AudioReceiveConfig, _impl_.local_ssrc_)}},
    // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AudioReceiveConfig, _impl_.header_extensions_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 remote_ssrc = 1;
    {PROTOBUF_FIELD_OFFSET(AudioReceiveConfig, _impl_.remote_ssrc_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 local_ssrc = 2;
    {PROTOBUF_FIELD_OFFSET(AudioReceiveConfig, _impl_.local_ssrc_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 3;
    {PROTOBUF_FIELD_OFFSET(AudioReceiveConfig, _impl_.header_extensions_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::webrtc::rtclog::RtpHeaderExtension>()},
  }}, {{
  }},
};

::uint8_t* AudioReceiveConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog.AudioReceiveConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 remote_ssrc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_remote_ssrc(), target);
  }

  // optional uint32 local_ssrc = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_local_ssrc(), target);
  }

  // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_header_extensions_size()); i < n; i++) {
    const auto& repfield = this->_internal_header_extensions().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog.AudioReceiveConfig)
  return target;
}

::size_t AudioReceiveConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog.AudioReceiveConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 3;
  total_size += 1UL * this->_internal_header_extensions_size();
  for (const auto& msg : this->_internal_header_extensions()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 remote_ssrc = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_remote_ssrc());
    }

    // optional uint32 local_ssrc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_local_ssrc());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void AudioReceiveConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AudioReceiveConfig*>(
      &from));
}

void AudioReceiveConfig::MergeFrom(const AudioReceiveConfig& from) {
  AudioReceiveConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog.AudioReceiveConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_header_extensions()->MergeFrom(
      from._internal_header_extensions());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.remote_ssrc_ = from._impl_.remote_ssrc_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.local_ssrc_ = from._impl_.local_ssrc_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AudioReceiveConfig::CopyFrom(const AudioReceiveConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog.AudioReceiveConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AudioReceiveConfig::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AudioReceiveConfig::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AudioReceiveConfig::InternalSwap(AudioReceiveConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.header_extensions_.InternalSwap(&other->_impl_.header_extensions_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioReceiveConfig, _impl_.local_ssrc_)
      + sizeof(AudioReceiveConfig::_impl_.local_ssrc_)
      - PROTOBUF_FIELD_OFFSET(AudioReceiveConfig, _impl_.remote_ssrc_)>(
          reinterpret_cast<char*>(&_impl_.remote_ssrc_),
          reinterpret_cast<char*>(&other->_impl_.remote_ssrc_));
}

std::string AudioReceiveConfig::GetTypeName() const {
  return "webrtc.rtclog.AudioReceiveConfig";
}

// ===================================================================

class AudioSendConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<AudioSendConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AudioSendConfig, _impl_._has_bits_);
  static void set_has_ssrc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AudioSendConfig::AudioSendConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog.AudioSendConfig)
}
inline PROTOBUF_NDEBUG_INLINE AudioSendConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        header_extensions_{visibility, arena, from.header_extensions_} {}

AudioSendConfig::AudioSendConfig(
    ::google::protobuf::Arena* arena,
    const AudioSendConfig& from)
    : ::google::protobuf::MessageLite(arena) {
  AudioSendConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.ssrc_ = from._impl_.ssrc_;

  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog.AudioSendConfig)
}
inline PROTOBUF_NDEBUG_INLINE AudioSendConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        header_extensions_{visibility, arena} {}

inline void AudioSendConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.ssrc_ = {};
}
AudioSendConfig::~AudioSendConfig() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog.AudioSendConfig)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void AudioSendConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AudioSendConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog.AudioSendConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.header_extensions_.Clear();
  _impl_.ssrc_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AudioSendConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> AudioSendConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AudioSendConfig, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AudioSendConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AudioSendConfig, _impl_.header_extensions_)}},
    // optional uint32 ssrc = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(AudioSendConfig, _impl_.ssrc_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 ssrc = 1;
    {PROTOBUF_FIELD_OFFSET(AudioSendConfig, _impl_.ssrc_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 2;
    {PROTOBUF_FIELD_OFFSET(AudioSendConfig, _impl_.header_extensions_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::webrtc::rtclog::RtpHeaderExtension>()},
  }}, {{
  }},
};

::uint8_t* AudioSendConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog.AudioSendConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 ssrc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_ssrc(), target);
  }

  // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_header_extensions_size()); i < n; i++) {
    const auto& repfield = this->_internal_header_extensions().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog.AudioSendConfig)
  return target;
}

::size_t AudioSendConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog.AudioSendConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 2;
  total_size += 1UL * this->_internal_header_extensions_size();
  for (const auto& msg : this->_internal_header_extensions()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // optional uint32 ssrc = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_ssrc());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void AudioSendConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AudioSendConfig*>(
      &from));
}

void AudioSendConfig::MergeFrom(const AudioSendConfig& from) {
  AudioSendConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog.AudioSendConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_header_extensions()->MergeFrom(
      from._internal_header_extensions());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_ssrc(from._internal_ssrc());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AudioSendConfig::CopyFrom(const AudioSendConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog.AudioSendConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AudioSendConfig::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AudioSendConfig::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AudioSendConfig::InternalSwap(AudioSendConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.header_extensions_.InternalSwap(&other->_impl_.header_extensions_);
        swap(_impl_.ssrc_, other->_impl_.ssrc_);
}

std::string AudioSendConfig::GetTypeName() const {
  return "webrtc.rtclog.AudioSendConfig";
}

// ===================================================================

class AudioNetworkAdaptation::_Internal {
 public:
  using HasBits = decltype(std::declval<AudioNetworkAdaptation>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AudioNetworkAdaptation, _impl_._has_bits_);
  static void set_has_bitrate_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_frame_length_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uplink_packet_loss_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enable_fec(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_enable_dtx(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_num_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

AudioNetworkAdaptation::AudioNetworkAdaptation(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog.AudioNetworkAdaptation)
}
AudioNetworkAdaptation::AudioNetworkAdaptation(
    ::google::protobuf::Arena* arena, const AudioNetworkAdaptation& from)
    : AudioNetworkAdaptation(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE AudioNetworkAdaptation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AudioNetworkAdaptation::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, bitrate_bps_),
           0,
           offsetof(Impl_, num_channels_) -
               offsetof(Impl_, bitrate_bps_) +
               sizeof(Impl_::num_channels_));
}
AudioNetworkAdaptation::~AudioNetworkAdaptation() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog.AudioNetworkAdaptation)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void AudioNetworkAdaptation::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AudioNetworkAdaptation::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog.AudioNetworkAdaptation)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.bitrate_bps_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.num_channels_) -
        reinterpret_cast<char*>(&_impl_.bitrate_bps_)) + sizeof(_impl_.num_channels_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AudioNetworkAdaptation::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 0, 2> AudioNetworkAdaptation::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AudioNetworkAdaptation, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AudioNetworkAdaptation_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional int32 bitrate_bps = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(AudioNetworkAdaptation, _impl_.bitrate_bps_)}},
    // optional int32 frame_length_ms = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(AudioNetworkAdaptation, _impl_.frame_length_ms_)}},
    // optional float uplink_packet_loss_fraction = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(AudioNetworkAdaptation, _impl_.uplink_packet_loss_fraction_)}},
    // optional bool enable_fec = 4;
    {::_pbi::TcParser::FastV8S1,
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(AudioNetworkAdaptation, _impl_.enable_fec_)}},
    // optional bool enable_dtx = 5;
    {::_pbi::TcParser::FastV8S1,
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(AudioNetworkAdaptation, _impl_.enable_dtx_)}},
    // optional uint32 num_channels = 6;
    {::_pbi::TcParser::FastV32S1,
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(AudioNetworkAdaptation, _impl_.num_channels_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 bitrate_bps = 1;
    {PROTOBUF_FIELD_OFFSET(AudioNetworkAdaptation, _impl_.bitrate_bps_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 frame_length_ms = 2;
    {PROTOBUF_FIELD_OFFSET(AudioNetworkAdaptation, _impl_.frame_length_ms_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional float uplink_packet_loss_fraction = 3;
    {PROTOBUF_FIELD_OFFSET(AudioNetworkAdaptation, _impl_.uplink_packet_loss_fraction_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional bool enable_fec = 4;
    {PROTOBUF_FIELD_OFFSET(AudioNetworkAdaptation, _impl_.enable_fec_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool enable_dtx = 5;
    {PROTOBUF_FIELD_OFFSET(AudioNetworkAdaptation, _impl_.enable_dtx_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional uint32 num_channels = 6;
    {PROTOBUF_FIELD_OFFSET(AudioNetworkAdaptation, _impl_.num_channels_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* AudioNetworkAdaptation::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog.AudioNetworkAdaptation)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 bitrate_bps = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_bitrate_bps(), target);
  }

  // optional int32 frame_length_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_frame_length_ms(), target);
  }

  // optional float uplink_packet_loss_fraction = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_uplink_packet_loss_fraction(), target);
  }

  // optional bool enable_fec = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_enable_fec(), target);
  }

  // optional bool enable_dtx = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_enable_dtx(), target);
  }

  // optional uint32 num_channels = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_num_channels(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog.AudioNetworkAdaptation)
  return target;
}

::size_t AudioNetworkAdaptation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog.AudioNetworkAdaptation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 bitrate_bps = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_bitrate_bps());
    }

    // optional int32 frame_length_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_frame_length_ms());
    }

    // optional float uplink_packet_loss_fraction = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 5;
    }

    // optional bool enable_fec = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

    // optional bool enable_dtx = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

    // optional uint32 num_channels = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_num_channels());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void AudioNetworkAdaptation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AudioNetworkAdaptation*>(
      &from));
}

void AudioNetworkAdaptation::MergeFrom(const AudioNetworkAdaptation& from) {
  AudioNetworkAdaptation* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog.AudioNetworkAdaptation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.bitrate_bps_ = from._impl_.bitrate_bps_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.frame_length_ms_ = from._impl_.frame_length_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.uplink_packet_loss_fraction_ = from._impl_.uplink_packet_loss_fraction_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.enable_fec_ = from._impl_.enable_fec_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.enable_dtx_ = from._impl_.enable_dtx_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.num_channels_ = from._impl_.num_channels_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AudioNetworkAdaptation::CopyFrom(const AudioNetworkAdaptation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog.AudioNetworkAdaptation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AudioNetworkAdaptation::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AudioNetworkAdaptation::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AudioNetworkAdaptation::InternalSwap(AudioNetworkAdaptation* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioNetworkAdaptation, _impl_.num_channels_)
      + sizeof(AudioNetworkAdaptation::_impl_.num_channels_)
      - PROTOBUF_FIELD_OFFSET(AudioNetworkAdaptation, _impl_.bitrate_bps_)>(
          reinterpret_cast<char*>(&_impl_.bitrate_bps_),
          reinterpret_cast<char*>(&other->_impl_.bitrate_bps_));
}

std::string AudioNetworkAdaptation::GetTypeName() const {
  return "webrtc.rtclog.AudioNetworkAdaptation";
}

// ===================================================================

class BweProbeCluster::_Internal {
 public:
  using HasBits = decltype(std::declval<BweProbeCluster>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BweProbeCluster, _impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bitrate_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min_packets(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_min_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

BweProbeCluster::BweProbeCluster(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog.BweProbeCluster)
}
BweProbeCluster::BweProbeCluster(
    ::google::protobuf::Arena* arena, const BweProbeCluster& from)
    : BweProbeCluster(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE BweProbeCluster::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void BweProbeCluster::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           0,
           offsetof(Impl_, min_bytes_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::min_bytes_));
}
BweProbeCluster::~BweProbeCluster() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog.BweProbeCluster)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void BweProbeCluster::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void BweProbeCluster::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog.BweProbeCluster)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.min_bytes_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.min_bytes_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BweProbeCluster::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> BweProbeCluster::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BweProbeCluster, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_BweProbeCluster_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // optional uint32 min_bytes = 4;
    {::_pbi::TcParser::FastV32S1,
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(BweProbeCluster, _impl_.min_bytes_)}},
    // optional int32 id = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(BweProbeCluster, _impl_.id_)}},
    // optional int32 bitrate_bps = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(BweProbeCluster, _impl_.bitrate_bps_)}},
    // optional uint32 min_packets = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(BweProbeCluster, _impl_.min_packets_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(BweProbeCluster, _impl_.id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 bitrate_bps = 2;
    {PROTOBUF_FIELD_OFFSET(BweProbeCluster, _impl_.bitrate_bps_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional uint32 min_packets = 3;
    {PROTOBUF_FIELD_OFFSET(BweProbeCluster, _impl_.min_packets_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 min_bytes = 4;
    {PROTOBUF_FIELD_OFFSET(BweProbeCluster, _impl_.min_bytes_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* BweProbeCluster::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog.BweProbeCluster)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // optional int32 bitrate_bps = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_bitrate_bps(), target);
  }

  // optional uint32 min_packets = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_min_packets(), target);
  }

  // optional uint32 min_bytes = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_min_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog.BweProbeCluster)
  return target;
}

::size_t BweProbeCluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog.BweProbeCluster)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_id());
    }

    // optional int32 bitrate_bps = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_bitrate_bps());
    }

    // optional uint32 min_packets = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_min_packets());
    }

    // optional uint32 min_bytes = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_min_bytes());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void BweProbeCluster::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BweProbeCluster*>(
      &from));
}

void BweProbeCluster::MergeFrom(const BweProbeCluster& from) {
  BweProbeCluster* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog.BweProbeCluster)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.bitrate_bps_ = from._impl_.bitrate_bps_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.min_packets_ = from._impl_.min_packets_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.min_bytes_ = from._impl_.min_bytes_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BweProbeCluster::CopyFrom(const BweProbeCluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog.BweProbeCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BweProbeCluster::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* BweProbeCluster::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void BweProbeCluster::InternalSwap(BweProbeCluster* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BweProbeCluster, _impl_.min_bytes_)
      + sizeof(BweProbeCluster::_impl_.min_bytes_)
      - PROTOBUF_FIELD_OFFSET(BweProbeCluster, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

std::string BweProbeCluster::GetTypeName() const {
  return "webrtc.rtclog.BweProbeCluster";
}

// ===================================================================

class BweProbeResult::_Internal {
 public:
  using HasBits = decltype(std::declval<BweProbeResult>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BweProbeResult, _impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bitrate_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

BweProbeResult::BweProbeResult(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog.BweProbeResult)
}
BweProbeResult::BweProbeResult(
    ::google::protobuf::Arena* arena, const BweProbeResult& from)
    : BweProbeResult(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE BweProbeResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void BweProbeResult::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           0,
           offsetof(Impl_, bitrate_bps_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::bitrate_bps_));
}
BweProbeResult::~BweProbeResult() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog.BweProbeResult)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void BweProbeResult::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void BweProbeResult::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog.BweProbeResult)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.bitrate_bps_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.bitrate_bps_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BweProbeResult::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> BweProbeResult::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BweProbeResult, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_BweProbeResult_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional int32 id = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(BweProbeResult, _impl_.id_)}},
    // optional .webrtc.rtclog.BweProbeResult.ResultType result = 2;
    {::_pbi::TcParser::FastEr0S1,
     {16, 1, 3, PROTOBUF_FIELD_OFFSET(BweProbeResult, _impl_.result_)}},
    // optional int32 bitrate_bps = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(BweProbeResult, _impl_.bitrate_bps_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(BweProbeResult, _impl_.id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional .webrtc.rtclog.BweProbeResult.ResultType result = 2;
    {PROTOBUF_FIELD_OFFSET(BweProbeResult, _impl_.result_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional int32 bitrate_bps = 3;
    {PROTOBUF_FIELD_OFFSET(BweProbeResult, _impl_.bitrate_bps_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }}, {{
    {0, 4},
  }}, {{
  }},
};

::uint8_t* BweProbeResult::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog.BweProbeResult)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // optional .webrtc.rtclog.BweProbeResult.ResultType result = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_result(), target);
  }

  // optional int32 bitrate_bps = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_bitrate_bps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog.BweProbeResult)
  return target;
}

::size_t BweProbeResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog.BweProbeResult)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_id());
    }

    // optional .webrtc.rtclog.BweProbeResult.ResultType result = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
    }

    // optional int32 bitrate_bps = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_bitrate_bps());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void BweProbeResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BweProbeResult*>(
      &from));
}

void BweProbeResult::MergeFrom(const BweProbeResult& from) {
  BweProbeResult* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog.BweProbeResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.bitrate_bps_ = from._impl_.bitrate_bps_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BweProbeResult::CopyFrom(const BweProbeResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog.BweProbeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BweProbeResult::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* BweProbeResult::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void BweProbeResult::InternalSwap(BweProbeResult* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BweProbeResult, _impl_.bitrate_bps_)
      + sizeof(BweProbeResult::_impl_.bitrate_bps_)
      - PROTOBUF_FIELD_OFFSET(BweProbeResult, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

std::string BweProbeResult::GetTypeName() const {
  return "webrtc.rtclog.BweProbeResult";
}

// ===================================================================

class RemoteEstimate::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoteEstimate>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RemoteEstimate, _impl_._has_bits_);
  static void set_has_link_capacity_lower_kbps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_link_capacity_upper_kbps(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RemoteEstimate::RemoteEstimate(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog.RemoteEstimate)
}
RemoteEstimate::RemoteEstimate(
    ::google::protobuf::Arena* arena, const RemoteEstimate& from)
    : RemoteEstimate(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE RemoteEstimate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RemoteEstimate::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, link_capacity_lower_kbps_),
           0,
           offsetof(Impl_, link_capacity_upper_kbps_) -
               offsetof(Impl_, link_capacity_lower_kbps_) +
               sizeof(Impl_::link_capacity_upper_kbps_));
}
RemoteEstimate::~RemoteEstimate() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog.RemoteEstimate)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void RemoteEstimate::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RemoteEstimate::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog.RemoteEstimate)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.link_capacity_lower_kbps_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.link_capacity_upper_kbps_) -
        reinterpret_cast<char*>(&_impl_.link_capacity_lower_kbps_)) + sizeof(_impl_.link_capacity_upper_kbps_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RemoteEstimate::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> RemoteEstimate::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RemoteEstimate, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_RemoteEstimate_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // optional uint32 link_capacity_upper_kbps = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(RemoteEstimate, _impl_.link_capacity_upper_kbps_)}},
    // optional uint32 link_capacity_lower_kbps = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(RemoteEstimate, _impl_.link_capacity_lower_kbps_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 link_capacity_lower_kbps = 1;
    {PROTOBUF_FIELD_OFFSET(RemoteEstimate, _impl_.link_capacity_lower_kbps_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 link_capacity_upper_kbps = 2;
    {PROTOBUF_FIELD_OFFSET(RemoteEstimate, _impl_.link_capacity_upper_kbps_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* RemoteEstimate::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog.RemoteEstimate)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 link_capacity_lower_kbps = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_link_capacity_lower_kbps(), target);
  }

  // optional uint32 link_capacity_upper_kbps = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_link_capacity_upper_kbps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog.RemoteEstimate)
  return target;
}

::size_t RemoteEstimate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog.RemoteEstimate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 link_capacity_lower_kbps = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_link_capacity_lower_kbps());
    }

    // optional uint32 link_capacity_upper_kbps = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_link_capacity_upper_kbps());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void RemoteEstimate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RemoteEstimate*>(
      &from));
}

void RemoteEstimate::MergeFrom(const RemoteEstimate& from) {
  RemoteEstimate* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog.RemoteEstimate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.link_capacity_lower_kbps_ = from._impl_.link_capacity_lower_kbps_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.link_capacity_upper_kbps_ = from._impl_.link_capacity_upper_kbps_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RemoteEstimate::CopyFrom(const RemoteEstimate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog.RemoteEstimate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RemoteEstimate::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RemoteEstimate::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RemoteEstimate::InternalSwap(RemoteEstimate* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoteEstimate, _impl_.link_capacity_upper_kbps_)
      + sizeof(RemoteEstimate::_impl_.link_capacity_upper_kbps_)
      - PROTOBUF_FIELD_OFFSET(RemoteEstimate, _impl_.link_capacity_lower_kbps_)>(
          reinterpret_cast<char*>(&_impl_.link_capacity_lower_kbps_),
          reinterpret_cast<char*>(&other->_impl_.link_capacity_lower_kbps_));
}

std::string RemoteEstimate::GetTypeName() const {
  return "webrtc.rtclog.RemoteEstimate";
}

// ===================================================================

class AlrState::_Internal {
 public:
  using HasBits = decltype(std::declval<AlrState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AlrState, _impl_._has_bits_);
  static void set_has_in_alr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AlrState::AlrState(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog.AlrState)
}
AlrState::AlrState(
    ::google::protobuf::Arena* arena, const AlrState& from)
    : AlrState(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE AlrState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AlrState::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.in_alr_ = {};
}
AlrState::~AlrState() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog.AlrState)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void AlrState::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AlrState::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog.AlrState)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.in_alr_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AlrState::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> AlrState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AlrState, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AlrState_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // optional bool in_alr = 1;
    {::_pbi::TcParser::FastV8S1,
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(AlrState, _impl_.in_alr_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bool in_alr = 1;
    {PROTOBUF_FIELD_OFFSET(AlrState, _impl_.in_alr_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* AlrState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog.AlrState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool in_alr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_in_alr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog.AlrState)
  return target;
}

::size_t AlrState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog.AlrState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool in_alr = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void AlrState::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AlrState*>(
      &from));
}

void AlrState::MergeFrom(const AlrState& from) {
  AlrState* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog.AlrState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_in_alr(from._internal_in_alr());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AlrState::CopyFrom(const AlrState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog.AlrState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AlrState::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AlrState::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AlrState::InternalSwap(AlrState* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
        swap(_impl_.in_alr_, other->_impl_.in_alr_);
}

std::string AlrState::GetTypeName() const {
  return "webrtc.rtclog.AlrState";
}

// ===================================================================

class IceCandidatePairConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<IceCandidatePairConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(IceCandidatePairConfig, _impl_._has_bits_);
  static void set_has_config_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_candidate_pair_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_local_candidate_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_local_relay_protocol(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_local_network_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_local_address_family(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_remote_candidate_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_remote_address_family(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_candidate_pair_protocol(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

IceCandidatePairConfig::IceCandidatePairConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog.IceCandidatePairConfig)
}
IceCandidatePairConfig::IceCandidatePairConfig(
    ::google::protobuf::Arena* arena, const IceCandidatePairConfig& from)
    : IceCandidatePairConfig(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE IceCandidatePairConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void IceCandidatePairConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, config_type_),
           0,
           offsetof(Impl_, candidate_pair_protocol_) -
               offsetof(Impl_, config_type_) +
               sizeof(Impl_::candidate_pair_protocol_));
}
IceCandidatePairConfig::~IceCandidatePairConfig() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog.IceCandidatePairConfig)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void IceCandidatePairConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void IceCandidatePairConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog.IceCandidatePairConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.config_type_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.remote_address_family_) -
        reinterpret_cast<char*>(&_impl_.config_type_)) + sizeof(_impl_.remote_address_family_));
  }
  _impl_.candidate_pair_protocol_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IceCandidatePairConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 8, 0, 2> IceCandidatePairConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(IceCandidatePairConfig, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    8,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_IceCandidatePairConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .webrtc.rtclog.IceCandidatePairConfig.IceCandidatePairConfigType config_type = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 0, 3, PROTOBUF_FIELD_OFFSET(IceCandidatePairConfig, _impl_.config_type_)}},
    // optional uint32 candidate_pair_id = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(IceCandidatePairConfig, _impl_.candidate_pair_id_)}},
    // optional .webrtc.rtclog.IceCandidatePairConfig.IceCandidateType local_candidate_type = 3;
    {::_pbi::TcParser::FastEr0S1,
     {24, 2, 4, PROTOBUF_FIELD_OFFSET(IceCandidatePairConfig, _impl_.local_candidate_type_)}},
    // optional .webrtc.rtclog.IceCandidatePairConfig.Protocol local_relay_protocol = 4;
    {::_pbi::TcParser::FastEr0S1,
     {32, 3, 4, PROTOBUF_FIELD_OFFSET(IceCandidatePairConfig, _impl_.local_relay_protocol_)}},
    // optional .webrtc.rtclog.IceCandidatePairConfig.NetworkType local_network_type = 5;
    {::_pbi::TcParser::FastEr0S1,
     {40, 4, 5, PROTOBUF_FIELD_OFFSET(IceCandidatePairConfig, _impl_.local_network_type_)}},
    // optional .webrtc.rtclog.IceCandidatePairConfig.AddressFamily local_address_family = 6;
    {::_pbi::TcParser::FastEr0S1,
     {48, 5, 2, PROTOBUF_FIELD_OFFSET(IceCandidatePairConfig, _impl_.local_address_family_)}},
    // optional .webrtc.rtclog.IceCandidatePairConfig.IceCandidateType remote_candidate_type = 7;
    {::_pbi::TcParser::FastEr0S1,
     {56, 6, 4, PROTOBUF_FIELD_OFFSET(IceCandidatePairConfig, _impl_.remote_candidate_type_)}},
    // optional .webrtc.rtclog.IceCandidatePairConfig.AddressFamily remote_address_family = 8;
    {::_pbi::TcParser::FastEr0S1,
     {64, 7, 2, PROTOBUF_FIELD_OFFSET(IceCandidatePairConfig, _impl_.remote_address_family_)}},
    // optional .webrtc.rtclog.IceCandidatePairConfig.Protocol candidate_pair_protocol = 9;
    {::_pbi::TcParser::FastEr0S1,
     {72, 8, 4, PROTOBUF_FIELD_OFFSET(IceCandidatePairConfig, _impl_.candidate_pair_protocol_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .webrtc.rtclog.IceCandidatePairConfig.IceCandidatePairConfigType config_type = 1;
    {PROTOBUF_FIELD_OFFSET(IceCandidatePairConfig, _impl_.config_type_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional uint32 candidate_pair_id = 2;
    {PROTOBUF_FIELD_OFFSET(IceCandidatePairConfig, _impl_.candidate_pair_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .webrtc.rtclog.IceCandidatePairConfig.IceCandidateType local_candidate_type = 3;
    {PROTOBUF_FIELD_OFFSET(IceCandidatePairConfig, _impl_.local_candidate_type_), _Internal::kHasBitsOffset + 2, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional .webrtc.rtclog.IceCandidatePairConfig.Protocol local_relay_protocol = 4;
    {PROTOBUF_FIELD_OFFSET(IceCandidatePairConfig, _impl_.local_relay_protocol_), _Internal::kHasBitsOffset + 3, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional .webrtc.rtclog.IceCandidatePairConfig.NetworkType local_network_type = 5;
    {PROTOBUF_FIELD_OFFSET(IceCandidatePairConfig, _impl_.local_network_type_), _Internal::kHasBitsOffset + 4, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional .webrtc.rtclog.IceCandidatePairConfig.AddressFamily local_address_family = 6;
    {PROTOBUF_FIELD_OFFSET(IceCandidatePairConfig, _impl_.local_address_family_), _Internal::kHasBitsOffset + 5, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional .webrtc.rtclog.IceCandidatePairConfig.IceCandidateType remote_candidate_type = 7;
    {PROTOBUF_FIELD_OFFSET(IceCandidatePairConfig, _impl_.remote_candidate_type_), _Internal::kHasBitsOffset + 6, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional .webrtc.rtclog.IceCandidatePairConfig.AddressFamily remote_address_family = 8;
    {PROTOBUF_FIELD_OFFSET(IceCandidatePairConfig, _impl_.remote_address_family_), _Internal::kHasBitsOffset + 7, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional .webrtc.rtclog.IceCandidatePairConfig.Protocol candidate_pair_protocol = 9;
    {PROTOBUF_FIELD_OFFSET(IceCandidatePairConfig, _impl_.candidate_pair_protocol_), _Internal::kHasBitsOffset + 8, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
  }}, {{
    {0, 4},
    {0, 5},
    {0, 5},
    {0, 6},
    {0, 3},
    {0, 5},
    {0, 3},
    {0, 5},
  }}, {{
  }},
};

::uint8_t* IceCandidatePairConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog.IceCandidatePairConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .webrtc.rtclog.IceCandidatePairConfig.IceCandidatePairConfigType config_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_config_type(), target);
  }

  // optional uint32 candidate_pair_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_candidate_pair_id(), target);
  }

  // optional .webrtc.rtclog.IceCandidatePairConfig.IceCandidateType local_candidate_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_local_candidate_type(), target);
  }

  // optional .webrtc.rtclog.IceCandidatePairConfig.Protocol local_relay_protocol = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_local_relay_protocol(), target);
  }

  // optional .webrtc.rtclog.IceCandidatePairConfig.NetworkType local_network_type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_local_network_type(), target);
  }

  // optional .webrtc.rtclog.IceCandidatePairConfig.AddressFamily local_address_family = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_local_address_family(), target);
  }

  // optional .webrtc.rtclog.IceCandidatePairConfig.IceCandidateType remote_candidate_type = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_remote_candidate_type(), target);
  }

  // optional .webrtc.rtclog.IceCandidatePairConfig.AddressFamily remote_address_family = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        8, this->_internal_remote_address_family(), target);
  }

  // optional .webrtc.rtclog.IceCandidatePairConfig.Protocol candidate_pair_protocol = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        9, this->_internal_candidate_pair_protocol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog.IceCandidatePairConfig)
  return target;
}

::size_t IceCandidatePairConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog.IceCandidatePairConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .webrtc.rtclog.IceCandidatePairConfig.IceCandidatePairConfigType config_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_config_type());
    }

    // optional uint32 candidate_pair_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_candidate_pair_id());
    }

    // optional .webrtc.rtclog.IceCandidatePairConfig.IceCandidateType local_candidate_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_local_candidate_type());
    }

    // optional .webrtc.rtclog.IceCandidatePairConfig.Protocol local_relay_protocol = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_local_relay_protocol());
    }

    // optional .webrtc.rtclog.IceCandidatePairConfig.NetworkType local_network_type = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_local_network_type());
    }

    // optional .webrtc.rtclog.IceCandidatePairConfig.AddressFamily local_address_family = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_local_address_family());
    }

    // optional .webrtc.rtclog.IceCandidatePairConfig.IceCandidateType remote_candidate_type = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_remote_candidate_type());
    }

    // optional .webrtc.rtclog.IceCandidatePairConfig.AddressFamily remote_address_family = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_remote_address_family());
    }

  }
  // optional .webrtc.rtclog.IceCandidatePairConfig.Protocol candidate_pair_protocol = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_candidate_pair_protocol());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void IceCandidatePairConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IceCandidatePairConfig*>(
      &from));
}

void IceCandidatePairConfig::MergeFrom(const IceCandidatePairConfig& from) {
  IceCandidatePairConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog.IceCandidatePairConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.config_type_ = from._impl_.config_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.candidate_pair_id_ = from._impl_.candidate_pair_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.local_candidate_type_ = from._impl_.local_candidate_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.local_relay_protocol_ = from._impl_.local_relay_protocol_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.local_network_type_ = from._impl_.local_network_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.local_address_family_ = from._impl_.local_address_family_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.remote_candidate_type_ = from._impl_.remote_candidate_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.remote_address_family_ = from._impl_.remote_address_family_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_candidate_pair_protocol(from._internal_candidate_pair_protocol());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IceCandidatePairConfig::CopyFrom(const IceCandidatePairConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog.IceCandidatePairConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool IceCandidatePairConfig::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* IceCandidatePairConfig::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void IceCandidatePairConfig::InternalSwap(IceCandidatePairConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IceCandidatePairConfig, _impl_.candidate_pair_protocol_)
      + sizeof(IceCandidatePairConfig::_impl_.candidate_pair_protocol_)
      - PROTOBUF_FIELD_OFFSET(IceCandidatePairConfig, _impl_.config_type_)>(
          reinterpret_cast<char*>(&_impl_.config_type_),
          reinterpret_cast<char*>(&other->_impl_.config_type_));
}

std::string IceCandidatePairConfig::GetTypeName() const {
  return "webrtc.rtclog.IceCandidatePairConfig";
}

// ===================================================================

class IceCandidatePairEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<IceCandidatePairEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(IceCandidatePairEvent, _impl_._has_bits_);
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_candidate_pair_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

IceCandidatePairEvent::IceCandidatePairEvent(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.rtclog.IceCandidatePairEvent)
}
IceCandidatePairEvent::IceCandidatePairEvent(
    ::google::protobuf::Arena* arena, const IceCandidatePairEvent& from)
    : IceCandidatePairEvent(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE IceCandidatePairEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void IceCandidatePairEvent::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, event_type_),
           0,
           offsetof(Impl_, candidate_pair_id_) -
               offsetof(Impl_, event_type_) +
               sizeof(Impl_::candidate_pair_id_));
}
IceCandidatePairEvent::~IceCandidatePairEvent() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog.IceCandidatePairEvent)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void IceCandidatePairEvent::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void IceCandidatePairEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog.IceCandidatePairEvent)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.event_type_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.candidate_pair_id_) -
        reinterpret_cast<char*>(&_impl_.event_type_)) + sizeof(_impl_.candidate_pair_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IceCandidatePairEvent::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> IceCandidatePairEvent::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(IceCandidatePairEvent, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_IceCandidatePairEvent_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // optional uint32 candidate_pair_id = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(IceCandidatePairEvent, _impl_.candidate_pair_id_)}},
    // optional .webrtc.rtclog.IceCandidatePairEvent.IceCandidatePairEventType event_type = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 0, 3, PROTOBUF_FIELD_OFFSET(IceCandidatePairEvent, _impl_.event_type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .webrtc.rtclog.IceCandidatePairEvent.IceCandidatePairEventType event_type = 1;
    {PROTOBUF_FIELD_OFFSET(IceCandidatePairEvent, _impl_.event_type_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional uint32 candidate_pair_id = 2;
    {PROTOBUF_FIELD_OFFSET(IceCandidatePairEvent, _impl_.candidate_pair_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }}, {{
    {0, 4},
  }}, {{
  }},
};

::uint8_t* IceCandidatePairEvent::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.rtclog.IceCandidatePairEvent)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .webrtc.rtclog.IceCandidatePairEvent.IceCandidatePairEventType event_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_event_type(), target);
  }

  // optional uint32 candidate_pair_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_candidate_pair_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.rtclog.IceCandidatePairEvent)
  return target;
}

::size_t IceCandidatePairEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog.IceCandidatePairEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .webrtc.rtclog.IceCandidatePairEvent.IceCandidatePairEventType event_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_event_type());
    }

    // optional uint32 candidate_pair_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_candidate_pair_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void IceCandidatePairEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IceCandidatePairEvent*>(
      &from));
}

void IceCandidatePairEvent::MergeFrom(const IceCandidatePairEvent& from) {
  IceCandidatePairEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog.IceCandidatePairEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.event_type_ = from._impl_.event_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.candidate_pair_id_ = from._impl_.candidate_pair_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IceCandidatePairEvent::CopyFrom(const IceCandidatePairEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog.IceCandidatePairEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool IceCandidatePairEvent::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* IceCandidatePairEvent::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void IceCandidatePairEvent::InternalSwap(IceCandidatePairEvent* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IceCandidatePairEvent, _impl_.candidate_pair_id_)
      + sizeof(IceCandidatePairEvent::_impl_.candidate_pair_id_)
      - PROTOBUF_FIELD_OFFSET(IceCandidatePairEvent, _impl_.event_type_)>(
          reinterpret_cast<char*>(&_impl_.event_type_),
          reinterpret_cast<char*>(&other->_impl_.event_type_));
}

std::string IceCandidatePairEvent::GetTypeName() const {
  return "webrtc.rtclog.IceCandidatePairEvent";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace rtclog
}  // namespace webrtc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
